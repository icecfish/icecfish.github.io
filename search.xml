<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo搭建个人博客</title>
    <url>/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用一下他人的hexo搭建过程方便需要时查阅，已表明出处。</p>
<span id="more"></span>

<h3 id="搭建环境准备"><a href="#搭建环境准备" class="headerlink" title="搭建环境准备"></a>搭建环境准备</h3><p>大概可以分为以下三步</p>
<ul>
<li>Node.js 的安装和准备</li>
<li>git的安装和准备</li>
<li>gitHub账户的配置</li>
</ul>
<h4 id="配置Node-js环境"><a href="#配置Node-js环境" class="headerlink" title="配置Node.js环境"></a>配置Node.js环境</h4><ol>
<li><p>下载Node.js安装文件：  <a href="http://nodejs.cn/">nodejs中国官网</a>  <a href="https://nodejs.org/en/">nodejs官网</a>  根据自己的Windows版本选择相应的安装文件。 如图所示：  </p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/1" alt="img"></p>
<p>image</p>
<p>保持默认设置即可，一路Next，安装很快就结束了。 然后我们检查一下是不是要求的组件都安装好了，同时按下Win和R，打开运行窗口：  Windows的运行界面  </p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/2" alt="img"></p>
<p>image</p>
<p>在新打开的窗口中输入cmd，敲击回车，打开命令行界面。（下文将直接用打开命令行来表示以上操作，记住哦~） 在打开的命令行界面中，输入</p>
</li>
</ol>
<p>node -v<br> npm -v</p>
<p>如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。  [图片上传失败…(image-aae4c5-1546580871476)]</p>
<h4 id="配置Git环境"><a href="#配置Git环境" class="headerlink" title="配置Git环境"></a>配置Git环境</h4><p>下载Git安装文件：  <a href="https://git-scm.com/downloads">GIt官网下载地址：</a>  <a href="https://github.com/git-for-windows/git/releases/download/v2.16.2.windows.1/Git-2.16.2-64-bit.exe">Git-2.16.2-64-bit.exe</a>  然后就进入了Git的安装界面，如图：  </p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/3" alt="img"></p>
<p>image</p>
<p>和Node.js一样，大部分设置都只需要保持默认.  一样的，我们来检查一下Git是不是安装正确了，打开命令行，输入：</p>
<p>git –version</p>
<p>如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。  [图片上传失败…(image-8ad417-1546580871476)]</p>
<h4 id="coding账户的注册和配置"><a href="#coding账户的注册和配置" class="headerlink" title="coding账户的注册和配置"></a>coding账户的注册和配置</h4><p>国内的网站，绝大部分都是中文的，注册什么的就不说了,进入<em>Coding</em> 滚键盘就是了= =</p>
<h5 id="创建项目-Coding-Pages"><a href="#创建项目-Coding-Pages" class="headerlink" title="创建项目(Coding Pages)"></a>创建项目(Coding Pages)</h5><p>注册之后进入主页，点击项目，点击 *+*，项目名为你的用户名  查看Pages 服务是否开启：点击项目 -&gt; 代码 -&gt; Pages 服务，若没有开启则点开启</p>
<h5 id="配置SSH与Git"><a href="#配置SSH与Git" class="headerlink" title="配置SSH与Git"></a>配置SSH与Git</h5><p>那么我们有了免费的服务器之后，就要绑定个人电脑与它们联系，那就是<strong>SSH</strong>与<strong>Git</strong>  绑定之后我们每次部署项目就不用输入帐号和密码</p>
<h5 id="生成SSH-Key"><a href="#生成SSH-Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h5><p>ssh-keygen -t rsa -C <a href="mailto:your_email@youremail.com">your_email@youremail.com</a></p>
<p>后面的 <code>your_email@youremail.com</code> 改为你的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成 <code>.ssh</code> 文件夹，进去，打开 <code>id_rsa.pub</code>，复制里面的key，粗暴点就是 Ctrl+a 然后 Ctrl+c</p>
<h5 id="添加SSH-Key"><a href="#添加SSH-Key" class="headerlink" title="添加SSH Key"></a>添加SSH Key</h5><p>Coding，登录进入主页，点击 <code>账户</code> —&gt; <code>SSH公钥</code> —&gt; 输入key再点击 <code>添加</code></p>
<h5 id="验证成功与否"><a href="#验证成功与否" class="headerlink" title="验证成功与否"></a>验证成功与否</h5><p>验证coding</p>
<p>ssh -T <a href="mailto:git@git.coding.net">git@git.coding.net</a><br> 如果是第一次的会提示是否continue，输入<strong>yes</strong>就会看到：You’ve successfully authenticated, but coding does not provide shell access 。这就表示已成功连上coding!  接下来我们要做的就是把本地仓库传到coding上去，在此之前还需要设置username和email，因为coding每次commit都会记录他们</p>
<p>git config –global user.name your name<br> git config –global <a href="http://user.email/">user.email</a> <a href="mailto:your_email@youremail.com">your_email@youremail.com</a></p>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>在自己认为合适的地方创建一个文件夹，这里我以E：/hexo 为例子讲解，首先在E盘目录下创建Hexo文件夹，并在命令行的窗口进入到该目录  </p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/4" alt="img"></p>
<p>image</p>
<p>在命令行中输入：</p>
<p>npm install hexo-cli -g</p>
<p>然后你将会看到:  </p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/5" alt="img"></p>
<p>image</p>
<p>可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。  下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：<br> hexo -v</p>
<p>如果你看到了如图文字，则说明已经安装成功了。  </p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/6" alt="img"></p>
<p>image</p>
<h3 id="hexo的相关配置"><a href="#hexo的相关配置" class="headerlink" title="hexo的相关配置"></a>hexo的相关配置</h3><p><strong>初始化Hexo</strong>  我们使用<code>cd</code>命令换到你喜欢的地址，接着上面的操作，输入：</p>
<p>hexo init</p>
<p>然后输入：</p>
<p>npm install</p>
<p>之后npm将会自动安装你需要的组件，只需要等待npm操作即可。  <strong>首次体验Hexo</strong>  继续操作，同样是在命令行中，输入：</p>
<p>hexo g</p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/7" alt="img"></p>
<p>image</p>
<p>然后输入：</p>
<p>hexo s</p>
<p>然后会提示：  INFO Hexo is running at <a href="https://0.0.0.0:4000/">https://0.0.0.0:4000/</a>. Press Ctrl+C to stop.  在浏览器中打开<a href="https://localhost:4000/%EF%BC%8C%E4%BD%A0%E5%B0%86%E4%BC%9A%E7%9C%8B%E5%88%B0%EF%BC%9A">https://localhost:4000/，你将会看到：</a>  </p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/8" alt="img"></p>
<p>image</p>
<p>目前为止，Hexo在本地的配置已经全都结束了。  <strong>坑</strong> 执行hexo server提示找不到该指令  解决办法：在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：</p>
<p>sudo npm install hexo-server<br> 或者<br> npm install hexo -server –save</p>
<h3 id="怎样将Hexo与coding-page-联系起来"><a href="#怎样将Hexo与coding-page-联系起来" class="headerlink" title="怎样将Hexo与coding page 联系起来"></a>怎样将Hexo与coding page 联系起来</h3><p><strong>配置Deployment</strong>  在此之前，先安装<strong>Git部署插件</strong></p>
<p>npm install hexo-deployer-git –save</p>
<p>在你博客文件夹下<code>_config.yml</code>文件中，找到<code>Deploy</code>，然后按照如下修改：</p>
<p>deploy:<br> type: git<br> repo: <a href="mailto:git@coding.net">git@coding.net</a>:yourname/<a href="http://yourname.coding.me.git/">yourname.coding.me.git</a><br> branch: master</p>
<p>比如我的仓库的地址是<a href="mailto:git@coding.net">git@coding.net</a>:valex/valext.coding.me.git,master，所以配置如下</p>
<p>Deployment<br> Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a><br> deploy:<br> type: git<br> repo: <a href="mailto:git@coding.net">git@coding.net</a>:valex/<a href="http://valext.coding.me.git,master/">valext.coding.me.git,master</a></p>
<h3 id="写博客、发布文章"><a href="#写博客、发布文章" class="headerlink" title="写博客、发布文章"></a>写博客、发布文章</h3><p>新建一篇博客，执行下面的命令：</p>
<p>hexo new post “article title”</p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/9" alt="img"></p>
<p>image</p>
<p>这时候在你的电脑的目录下<code>:\hexo\source\ _posts</code>将会看到<code>article title.md</code>文件  用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：</p>
<p>hexo g   // 生成<br> hexo d   // 部署</p>
<p>当然你也可以执行下面的命令，相当于上面两条命令的效果</p>
<p>hexo g -d #在部署前先生成</p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/10" alt="img"></p>
<p>image</p>
<p>部署成功后访问 你的地址，<a href="https://yourname.coding.me/">httpss://yourName.coding.me</a>,将可以看到生成的文章。  <strong>踩坑提醒</strong></p>
<ul>
<li>1）注意需要提前安装一个扩展：</li>
</ul>
<p>npm install hexo-deployer-git –save</p>
<p><strong>如果没有执行者行命令，将会提醒</strong></p>
<blockquote>
<p>deloyer not found:git</p>
</blockquote>
<ul>
<li><p>2）如果出现下面这样的错误，</p>
<blockquote>
<p>Permission denied (publickey).  fatal: Could not read from remote repository.  Please make sure you have the correct access rights  and the repository exists.</p>
</blockquote>
</li>
</ul>
<p>则是因为没有设置好public key所致。</p>
<h3 id="主题推荐"><a href="#主题推荐" class="headerlink" title="主题推荐"></a>主题推荐</h3><p>每个不同的主题会需要不同的配置，主题配置文件在主题目录下的_config.yml。有几个比较好的主题推荐给大家。Yilia 是为 hexo 2.4+制作的主题。 崇尚简约优雅，以及极致的性能。 </p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/11" alt="img"></p>
<p>image</p>
<p><a href="https://litten.github.io/">Yilia地址</a>  <strong>NexT</strong> 我的网站就是采用这个主题，简洁美观。 目前Github上Star最高的Hexo主题，支持几种不同的风格。 作者提供了非常完善的配置说明。 </p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/12" alt="img"></p>
<p>image</p>
<p><a href="https://github.com/iissnan/hexo-theme-next">next地址</a>  Pacman是一款为<a href="https://zespia.tw/hexo/">Hexo</a>打造的一款扁平化，有着响应式设计的主题。  [图片上传失败…(image-5179ff-1546580871471)]</p>
<p><a href="https://github.com/A-limon/pacman">pacman地址</a></p>
<h3 id="主题使用教程"><a href="#主题使用教程" class="headerlink" title="主题使用教程"></a>主题使用教程</h3><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是高效的静态站点生成框架，她基于 <a href="https://nodejs.org/">Node.js</a>。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html">标签插件</a> 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。  你可以访问 <a href="https://hexo.io/zh-cn/docs/">Hexo 的文档</a> 了解如何安装 Hexo  在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。  为了描述方便，在以下说明中，将前者称为<strong>站点配置</strong>文件， 后者称为<strong>主题配置</strong>文件。</p>
<h4 id="安装-NexT"><a href="#安装-NexT" class="headerlink" title="安装 NexT"></a>安装 NexT</h4><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 <code>themes</code> 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。</p>
<h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><p>如果你熟悉 <a href="https://git-scm.com/">Git</a>， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 <code>git pull</code> 来快速更新， 而不用再次下载压缩包替换。</p>
<ul>
<li><a href="https://theme-next.iissnan.com/getting-started.html#clone">克隆最新版本</a></li>
<li><a href="https://theme-next.iissnan.com/getting-started.html#stable">下载稳定版本</a>  在终端窗口下，定位到 Hexo 站点目录下。使用 <code>Git</code> checkout 代码：</li>
</ul>
<p><img src="https://math.jianshu.com/math?formula=cd%20your-hexo-site" alt="cd your-hexo-site"> git clone <a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a> themes/next</p>
<h4 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h4><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。  启用 NexT 主题</p>
<p>theme: next</p>
<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。  <strong>注意</strong> ：这里以后的配置都需要在前面加上空格</p>
<h4 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h4><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：</p>
<p>INFO  Hexo is running at <a href="https://0.0.0.0:4000/">https://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>
<p>此时即可使用浏览器访问 <code>https://localhost:4000</code>，检查站点是否正确运行。  当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse  </p>
<p><img src="/2021/08/15/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/13" alt="img"></p>
<p>image</p>
<p>现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。</p>
<h4 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h4><h5 id="选择-Scheme"><a href="#选择-Scheme" class="headerlink" title="选择 Scheme"></a>选择 Scheme</h5><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新  Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 <code>#</code> 去除即可。  选择 Pisces Scheme</li>
</ul>
<h1 id="scheme-Muse"><a href="#scheme-Muse" class="headerlink" title="scheme: Muse"></a>scheme: Muse</h1><h1 id="scheme-Mist"><a href="#scheme-Mist" class="headerlink" title="scheme: Mist"></a>scheme: Mist</h1><p>scheme: Pisces</p>
<h5 id="设置-语言"><a href="#设置-语言" class="headerlink" title="设置 语言"></a>设置 语言</h5><p>编辑 站点配置文件， 将 <code>language</code> 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：</p>
<p>language: zh-Hans</p>
<p>目前 NexT 支持的语言如以下表格所示：</p>
<table>
<thead>
<tr>
<th>语言</th>
<th>代码</th>
<th>设定示例</th>
</tr>
</thead>
<tbody><tr>
<td>English</td>
<td><code>en</code></td>
<td><code>language: en</code></td>
</tr>
<tr>
<td>简体中文</td>
<td><code>zh-Hans</code></td>
<td><code>language: zh-Hans</code></td>
</tr>
<tr>
<td>Français</td>
<td><code>fr-FR</code></td>
<td><code>language: fr-FR</code></td>
</tr>
<tr>
<td>Português</td>
<td><code>pt</code></td>
<td><code>language: pt</code> or <code>language: pt-BR</code></td>
</tr>
<tr>
<td>繁體中文</td>
<td><code>zh-hk</code> 或者 <code>zh-tw</code></td>
<td><code>language: zh-hk</code></td>
</tr>
<tr>
<td>Русский язык</td>
<td><code>ru</code></td>
<td><code>language: ru</code></td>
</tr>
<tr>
<td>Deutsch</td>
<td><code>de</code></td>
<td><code>language: de</code></td>
</tr>
<tr>
<td>日本語</td>
<td><code>ja</code></td>
<td><code>language: ja</code></td>
</tr>
<tr>
<td>Indonesian</td>
<td><code>id</code></td>
<td><code>language: id</code></td>
</tr>
<tr>
<td>Korean</td>
<td><code>ko</code></td>
<td><code>language: ko</code></td>
</tr>
</tbody></table>
<h5 id="设置-菜单"><a href="#设置-菜单" class="headerlink" title="设置 菜单"></a>设置 菜单</h5><p><strong>菜单配置</strong> 包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 <a href="https://fontawesome.io/">Font Awesome</a> 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。  编辑 <strong>主题配置</strong> 文件，修改以下内容：</p>
<ol>
<li>设定菜单内容，对应的字段是 <code>menu</code>。 菜单内容的设置格式是：<code>item name: link</code>。其中 <code>item name</code>是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。  菜单示例配置</li>
</ol>
<p>menu:<br> home: /<br> archives: /archives<br> #about: /about<br> #categories: /categories<br> tags: /tags<br> #commonweal: /404.html</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">若你的站点运行在子目录中，请将链接前缀的 <span class="string">`/`</span> 去掉</span><br><span class="line"></span><br><span class="line">NexT 默认的菜单项有（标注 的项表示需要手动创建这个页面）：</span><br><span class="line"></span><br><span class="line"><span class="params">| 键值 |</span> 设定值 <span class="params">| 显示文本（简体中文） |</span></span><br><span class="line"><span class="params">| --- |</span> --- <span class="params">| --- |</span></span><br><span class="line"><span class="params">| home |</span> <span class="string">`home: /`</span> <span class="params">| 主页 |</span></span><br><span class="line"><span class="params">| archives |</span> <span class="string">`archives: /archives`</span> <span class="params">| 归档页 |</span></span><br><span class="line"><span class="params">| categories |</span> <span class="string">`categories: /categories`</span> <span class="params">| 分类页 |</span></span><br><span class="line"><span class="params">| tags |</span> <span class="string">`tags: /tags`</span> <span class="params">| 标签页 |</span></span><br><span class="line"><span class="params">| about |</span> <span class="string">`about: /about`</span> <span class="params">| 关于页面 |</span></span><br><span class="line"><span class="params">| commonweal |</span> <span class="string">`commonweal: /404.html`</span> <span class="params">| 公益 404 |</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 <code>languages/&#123;language&#125;.yml</code>（<code>&#123;language&#125;</code> 为你所使用的语言）。</p>
<p>以简体中文为例，若你需要添加一个菜单项，比如 <code>something</code>。那么就需要修改简体中文对应的翻译文件<code>languages/zh-Hans.yml</code>，在 <code>menu</code> 字段下添加一项：</p>
<pre spellcheck="false" class="md-fences md-end-block ty-contain-cm modeLoaded" lang contenteditable="true" cid="n206" mdtype="fences" style="box-sizing: border-box; overflow: visible; font-family: var(--monospace); font-size: 0.9em; display: block; break-inside: avoid; text-align: left; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); position: relative !important; border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 1em 6px; margin-bottom: 15px; margin-top: 15px; width: inherit;">menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 commonweal: 公益404 something: 有料</pre></li>
<li><p>设定菜单项的图标，对应的字段是 <code>menu_icons</code>。 此设定格式是 <code>item name: icon name</code>，其中 <code>item name</code> 与上一步所配置的菜单名字对应，<code>icon name</code> 是 Font Awesome 图标的 名字。而 <code>enable</code> 可用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p>
<p>菜单图标配置示例</p>
</li>
</ol>
<p>menu_icons:<br> enable: true<br> # Icon Mapping.<br> home: home<br> about: user<br> categories: th<br> tags: tags<br> archives: archive<br> commonweal: heartbeat</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用 作为图标。</span><br><span class="line"></span><br><span class="line">请注意键值（如 <span class="string">`home`</span>）的大小写要严格匹配</span><br></pre></td></tr></table></figure>

<h5 id="设置-侧栏"><a href="#设置-侧栏" class="headerlink" title="设置 侧栏"></a>设置 侧栏</h5><p>默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 <strong>主题配置</strong> 文件 中的 <code>sidebar</code> 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。</p>
<ol>
<li><p>设置侧栏的位置，修改 <code>sidebar.position</code> 的值，支持的选项有：</p>
<ul>
<li>left - 靠左放置</li>
<li>right - 靠右放置</li>
</ul>
<p>目前仅 Pisces Scheme 支持 <code>position</code> 配置。影响版本5.0.0及更低版本。</p>
</li>
</ol>
<p>sidebar:<br> position: left</p>
<ol>
<li>设置侧栏显示的时机，修改 <code>sidebar.display</code> 的值，支持的选项有：<ul>
<li><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</li>
<li><code>always</code> - 在所有页面中都显示</li>
<li><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</li>
<li><code>remove</code> - 完全移除</li>
</ul>
</li>
</ol>
<p>sidebar:<br> display: post</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">已知侧栏在 `use motion: false` 的情况下不会展示。 影响版本<span class="number">5.0</span>.<span class="number">0</span>及更低版本。</span><br></pre></td></tr></table></figure>

<h5 id="设置-头像"><a href="#设置-头像" class="headerlink" title="设置 头像"></a>设置 头像</h5><p>编辑 <strong>主题配置</strong> 文件， 修改字段 <code>avatar</code>， 值设置成头像的链接地址。其中，头像的链接地址可以是：</p>
<table>
<thead>
<tr>
<th>地址</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>完整的互联网 URI</td>
<td><code>https://example.com/avatar.png</code></td>
</tr>
<tr>
<td>站点内的地址</td>
<td>将头像放置主题目录下的 <code>source/uploads/</code> （新建 uploads 目录若不存在） 配置为：<code>avatar: /uploads/avatar.png</code>或者 放置在 <code>source/images/</code> 目录下 配置为：<code>avatar: /images/avatar.png</code></td>
</tr>
</tbody></table>
<p>头像设置示例</p>
<p>avatar: <a href="https://example.com/avatar.png">https://example.com/avatar.png</a></p>
<h5 id="设置-作者昵称"><a href="#设置-作者昵称" class="headerlink" title="设置 作者昵称"></a>设置 作者昵称</h5><p>编辑 <strong>站点配置</strong> 文件， 设置 <code>author</code> 为你的昵称。</p>
<h5 id="站点描述"><a href="#站点描述" class="headerlink" title="站点描述"></a>站点描述</h5><p>编辑 <strong>站点配置文件</strong>， 设置 <code>description</code> 字段为你的站点描述。站点描述可以是你喜欢的一句签名:)</p>
<p>其他主题的使用参见其他主题github中的readme部分。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://yangbingdong.com/2017/build-blog-hexo-base/#GitHub">https://yangbingdong.com/2017/build-blog-hexo-base/#GitHub</a>  <a href="https://blog.csdn.net/i_am_tomato/article/details/70177019">https://blog.csdn.net/i_am_tomato/article/details/70177019</a>  <a href="https://blog.csdn.net/summer_zmc/article/details/55049906">https://blog.csdn.net/summer_zmc/article/details/55049906</a>  <a href="https://coding.net/help/doc/project/creating-project.html">https://coding.net/help/doc/project/creating-project.html</a>  <a href="https://www.lovebxm.com/2017/05/30/buildBlog/">https://www.lovebxm.com/2017/05/30/buildBlog/</a></p>
<p><a href="https://theme-next.iissnan.com/getting-started.html">https://theme-next.iissnan.com/getting-started.html</a></p>
<p>作者：valex<br>链接：<a href="https://www.jianshu.com/p/e0fbc9eed3b2">https://www.jianshu.com/p/e0fbc9eed3b2</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>网站搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2021/06/05/mysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​        自己整理的mysql笔记。</p>
<p>​        配套视频使用更佳：<a href="https://www.bilibili.com/video/BV1fx411X7BD?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1fx411X7BD?spm_id_from=333.999.0.0</a></p>
<p>​        更多b站java自学视频收藏：<a href="https://space.bilibili.com/8383710/favlist?fid=1335661810&amp;ftype=create">https://space.bilibili.com/8383710/favlist?fid=1335661810&amp;ftype=create</a></p>
<span id="more"></span>

<h1 id="表：-table"><a href="#表：-table" class="headerlink" title="表： table"></a>表： table</h1><p>表： table是数据库的基本组成单元，所有的数据都依表格的形式组织，目的是可读性强。<br>一个表包括行和列：<br>行：被称为数据/记录I（data）<br>列：被称为字段</p>
<p>学号（int）   姓名（varchar） 年龄（int）</p>
<p>110              张三                    20<br>120              李四                    21</p>
<p>每一个字段应该包括那些属性？</p>
<p>字段名、数据类型、相关的约束。</p>
<p>DQL（数据查询语言）查询语句。凡是select语句都是DQL<br>DML（数据操作语言）insert delete update 对表当中的数据惊醒增删改<br>DDL （数据定义语言）create drop alter 对表结构的增删改<br>TCL  （事务控制语言） commit提交事务，rollback回归事务<br>DCL （数据控制语言）grant授权、revoke撤销权限</p>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="简单的查询语句"><a href="#简单的查询语句" class="headerlink" title="简单的查询语句"></a>简单的查询语句</h2><p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段名1，字段名2，字段名3，...from 表名；</span><br></pre></td></tr></table></figure>

<p>说明：<br>字段可以参与数学运算。<br>不区分大小写。<br>必须以“；”结尾。</p>
<p>条件查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">字段，字段...</span><br><span class="line">from</span><br><span class="line">表名</span><br><span class="line">where</span><br><span class="line">条件；</span><br></pre></td></tr></table></figure>

<p>执行顺序： 先from，再where 再select。<br>不等于可以用 &lt;&gt; 或者 !=.</p>
<p>范围可以用 &gt;= and &lt;=<br>或者  between and 闭区间。</p>
<p>模糊查找<br>%代表任意。<br>_代表单个字符。</p>
<p>排序</p>
<p><code>order by</code></p>
<h2 id="关于null"><a href="#关于null" class="headerlink" title="关于null"></a>关于null</h2><p>null和任何数据做运算结构都为null。</p>
<p>处理null的方式：<br>if（可能出现null的字段，所要处理的方式）;</p>
<p>多行函数（分组函数）自动忽略null<br>分组函数不可直接用于where子句中</p>
<p>分组函数一般都会和group by一起使用。<br>当一条sql语句没有group by的话，整张表的数据会自成一组。</p>
<p>使用group by分组只能查询分组字段和分组函数。若不这样mysql不报错但数据无意义。</p>
<p>having必须和group by一起用。</p>
<p>distinct 去除重复记录。且只能用在所有字段的最前面。</p>
<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p>内连接：<br>    等值连接<br>    非等值连接<br>    子链接<br>外连接：<br>    左外连接<br>    右外连接<br>全连接</p>
<p>sql 92写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段，字段 from 表，表</span><br></pre></td></tr></table></figure>

<p>笛卡尔积现象：当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询条数是两张记录条数的乘积。</p>
<p>关于表的别名：<br>表的别名好处？<br>第一执行效率高<br>第二可读性好。</p>
<p>避免笛卡尔积现象，但是匹配次数不会减少，只会显示有效记录。</p>
<p>sql99写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">	字段，字段 </span><br><span class="line">from </span><br><span class="line">	表 </span><br><span class="line">（inner） join 	</span><br><span class="line">	表 </span><br><span class="line">on 	</span><br><span class="line">	条件</span><br></pre></td></tr></table></figure>

<p>Sql92语法和sql99语法的区别：</p>
<p>99语法可以做到表的连接和查询条件分离，特别是多个表进行连接的时候，会比sql92更清晰</p>
<p>连接分类：</p>
<p>内链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表1 inner join 表2 on 关联条件</span><br></pre></td></tr></table></figure>

<p>做连接查询的时候一定要写上关联条件,inner 可以省略</p>
<p>外连接</p>
<p>左外连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表1 left outer join 表2 on 关联条件</span><br></pre></td></tr></table></figure>

<p>做连接查询的时候一定要写上关联条件,outer 可以省略</p>
<p>右外连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表1 right outer join 表2 on 关联条件</span><br></pre></td></tr></table></figure>

<p>做连接查询的时候一定要写上关联条件,outer 可以省略</p>
<p>左外连接（左连接）和右外连接（右连接）的区别：</p>
<p>左连接以左面的表为准和右边的表比较，和左表相等的不相等都会显示出来，右表符合条件的显示,不符合条件的不显示</p>
<p>右连接恰恰相反，以上左连接和右连接也可以加入outer关键字，但一般不建议这种写法，</p>
<p>外连接<br>左外连接：左边为主表。<br>右外连接：右边为主表。<br>主表内容会显示完全。</p>
<p>union关键字<br>可以完成一些where做不了的事 例如：将两个完全不相干的表合成一个表.<br>但是不能合成列数不相等的表。</p>
<p>limit<br>limit 显示  第几页开始（0开始），显示几页；<br>每页显示pagesize条记录：<br>第pageno页：（pageNo-1）*pagesize,pagesize</p>
<h1 id="创建删除表，以及字段的增删改"><a href="#创建删除表，以及字段的增删改" class="headerlink" title="创建删除表，以及字段的增删改"></a>创建删除表，以及字段的增删改</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">       字段名1 数据类型，</span><br><span class="line">       字段名2 数据类型，</span><br><span class="line">       字段名3 数据类型，</span><br><span class="line">       ...</span><br><span class="line">   );</span><br></pre></td></tr></table></figure>


<p>常见数据类型：<br>    int    整数型  int<br>    float    浮点型  float<br>    bigint    长整型  long<br>    char    定长字符串   string<br>    varchar    可变长字符串    StringBuffer/StringBuilder<br>     date    日期类型    java.sql.date<br>    BLOG    二进制大对象（存储图片、视频等流媒体信息）<br>    CLOG    字符大对象（存储较大文本，比如，可以存储4g的字符串）</p>
<p>定长用char<br>长度不确定用varchar</p>
<p>表名在数据库中一般建议以：t_或者tbl_开始<br>创建学生表：<br>    学生信息包括：<br>         学号、姓名、性别、班级编号、生日<br>         学号：bigint<br>         姓名：varchar<br>         性别：char<br>         班级编号：int<br>         生日：char</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table t_student(</span><br><span class="line">    no bigint,</span><br><span class="line">    name varchar(255),</span><br><span class="line">    sex char(1) default 1,</span><br><span class="line">    classno varchar(255),</span><br><span class="line">    birth char(10)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="insert语句插入数据"><a href="#insert语句插入数据" class="headerlink" title="insert语句插入数据"></a>insert语句插入数据</h2><p>语法格式<br>insert into 表名（字段名1，字段名2，字段名3，。。。。）values（值1，值2，值3，。。。）<br>要求：字段的数量和值的数量相同，并且数据类型要对应相同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t_student(no,name,sex,classno,birth) values(1,&#x27;zhangsan&#x27;,&#x27;1&#x27;,&#x27;gaosan1ban&#x27;,&#x27;1950-10-12&#x27;);</span><br></pre></td></tr></table></figure>

<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table if exists 表名</span><br></pre></td></tr></table></figure>

<p>字段可以省略不写，但是value必须写全。</p>
<p>表的复制<br>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名 as select语句；</span><br></pre></td></tr></table></figure>

<p>将查询结果当做表来创建。</p>
<p>insert into dept1 select * from dept;  </p>
<h2 id="修改语句：update"><a href="#修改语句：update" class="headerlink" title="修改语句：update"></a>修改语句：update</h2><p>语法格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段名1=值1，字段名2=值2... where 条件；</span><br></pre></td></tr></table></figure>

<p>注意：没有条件整张表数据全部更新</p>
<h2 id="删除语句：-delete"><a href="#删除语句：-delete" class="headerlink" title="删除语句： delete"></a>删除语句： delete</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 where 条件；</span><br></pre></td></tr></table></figure>

<p>不写条件就是删除整个表。</p>
<h2 id="怎么删除大表？"><a href="#怎么删除大表？" class="headerlink" title="怎么删除大表？"></a>怎么删除大表？</h2><p>truncate table 表名;</p>
<h2 id="表的约束"><a href="#表的约束" class="headerlink" title="表的约束"></a>表的约束</h2><p>约束</p>
<ul>
<li>非空约束：not null 约束的字段不能NULL</li>
<li>唯一约束：unique 约束的字段不能重复</li>
<li>主键约束：primary key约束的字段既不能伟NULL,也不能重复简称pk</li>
<li>外键约束：foreign key</li>
<li>检查约束：（check）:mysql没有</li>
</ul>
<p>创建表的时候在类型后面加 unique。<br>组合唯一约束在字段后面加unique（字段，字段）</p>
<p>主键<br>主键约束：primary key<br>主键字段:  id字段添加primary key 之后，id叫做主键字段<br>主键值： 主键字段中的每一个值都是主键值</p>
<p>主键有什么作用<br>表的设计三范式中，第一范式是要求任何一张表都应该有主键。<br>主键值是这行记录的唯一标识。</p>
<p>主键的分类。<br>根据主键字段的字段数量来划分：<br>单一主键<br>复合主键（多个字段联合起来添加一个主键约束）<br>根据主键性质来划分：<br>自然主键<br>业务主键：用带有业务的字段设置为主键（不建议）</p>
<p>一张表的主键约束只能有一个<br>在主键约束后面加上 auto_increment 自增。<br>外键：<br>foreign（）references 表名（）<br>父表的属性必须是唯一的。</p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>事务就是将几个dml语句绑定</p>
<p>事务可以保证多个操作原子性，要么全成功，要么全失败。对于数据库来说事务保证批量的DML要么全成功，要么全失败。</p>
<h2 id="事务具有四个特征ACID"><a href="#事务具有四个特征ACID" class="headerlink" title="事务具有四个特征ACID"></a>事务具有四个特征ACID</h2><p>a)     原子性（Atomicity）</p>
<p>整个事务中的所有操作，必须作为一个单元全部完成（或全部取消）。</p>
<p>b)    一致性（Consistency）</p>
<p>在事务开始之前与结束之后，数据库都保持一致状态。</p>
<p>c)     隔离性(Isolation)</p>
<p>一个事务不会影响其他事务的运行。</p>
<p>d)    持久性(Durability)</p>
<p>在事务完成以后，该事务对数据库所作的更改将持久地保存在数据库之中，并不会被回滚。</p>
<p>事务中存在一些概念：</p>
<p>a)     事务（Transaction）：一批操作（一组DML）</p>
<p>b)    开启事务（Start Transaction）</p>
<p>c)     回滚事务（rollback）</p>
<p>d)    提交事务（commit）</p>
<p>e)     SET AUTOCOMMIT：禁用或启用事务的自动提交模式</p>
<p>当执行DML语句是其实就是开启一个事务</p>
<p>关于事务的回滚需要注意：只能回滚insert、delete和update语句，不能回滚select（回滚select没有任何意义），对于create、drop、alter这些无法回滚.</p>
<p>事务只对DML有效果。</p>
<h2 id="事务隔离级别："><a href="#事务隔离级别：" class="headerlink" title="事务隔离级别："></a>事务隔离级别：</h2><p>•     事务的隔离级别决定了事务之间可见的级别。</p>
<p>•     当多个客户端并发地访问同一个表时，可能出现下面的一致性问题：</p>
<p>–     脏读取（Dirty Read）</p>
<p>​     一个事务开始读取了某行数据，但是另外一个事务已经更新了此数据但没有能够及时提交，这就出现了脏读取。</p>
<p>–     不可重复读（Non-repeatable Read） </p>
<p>​     在同一个事务中，同一个读操作对同一个数据的前后两次读取产生了不同的结果，这就是不可重复读。</p>
<p>–     幻像读（Phantom Read）</p>
<p>​     幻像读是指在同一个事务中以前没有的行，由于其他事务的提交而出现的新行。</p>
<h3 id="四个隔离级别"><a href="#四个隔离级别" class="headerlink" title="四个隔离级别"></a>四个隔离级别</h3><p>第一级别：读未提交<br>对方事务还未提交，我们当前事务可以读取到对方未提交的数据<br>读未提交存在脏读现象，表示读到到了脏的数据/</p>
<p>第二级别：读已提交<br>对方事务提交之后的数据我方可以读到。<br>但是不可重复读</p>
<p>第三级别：可重复读<br>解决了不可重复读问题</p>
<p>第四级别：序列化读/串行化读<br>解决了所有问题，<br>效率低，摇排队</p>
<p>oracle默认读已提交<br>mysql默认可重复读</p>
<p>演示事务<br>mysql中的事务是自动提交的</p>
<p>演示读未提交<br>1演示read uncommitted<br>设置事务全局隔离级别： set global transaction isolation level read uncommitted;<br>查看事务全局隔离级别：mysql&gt; select @@global.transaction_isolation;</p>
<p>2演示read committed</p>
<p>3repeatable</p>
<p>4serilizable</p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="索引原理"><a href="#索引原理" class="headerlink" title="索引原理"></a>索引原理</h2><p>索引被用来快速找出在一个列上用一特定值的行。没有索引，MySQL不得不首先以第一条记录开始，然后读完整个表直到它找出相关的行。表越大，花费时间越多。对于一个有序字段，可以运用二分查找（Binary Search），这就是为什么性能能得到本质上的提高。MYISAM和INNODB都是用B+Tree作为索引结构</p>
<p>（主键，unique 都会默认的添加索引）</p>
<h2 id="索引的应用"><a href="#索引的应用" class="headerlink" title="索引的应用"></a>索引的应用</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>如果未使用索引，我们查询 工资大于 1500的会执行全表扫描</p>
<p><strong>什么时候需要给字段添加索引：</strong></p>
<p>**-**<strong>表中该字段中的数据量庞大</strong></p>
<p>  **-<strong><strong>经常被检索，经常出现在where</strong></strong>子句中的字段**</p>
<p>  **-<strong><strong>经常被DML</strong></strong>操作的字段不建议添加索引**</p>
<p><strong>索引等同于一本书的目录</strong></p>
<p><strong>主键会自动添加索引，所以尽量根据主键查询效率较高。</strong></p>
<p>如经常根据sal进行查询，并且遇到了性能瓶颈，首先查看程序是否存算法问题，再考虑对sal建立索引，建立索引如下：</p>
<p> 1、create unique index 索引名 on 表名(列名); </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create unique index u_ename on emp(ename);</span><br></pre></td></tr></table></figure>

<p> 2、alter table 表名 add unique index 索引名 (列名); </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create index test_index on emp (sal);  </span><br></pre></td></tr></table></figure>



<h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show index from emp;  </span><br></pre></td></tr></table></figure>



<h3 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h3><p>注意一定不可以用select * … 可以看到type!=all了，说明使用了索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">explain select sal from emp where sal &gt; 1500;  </span><br></pre></td></tr></table></figure>

<p>条件中的sal使用了索引</p>
<p>如下图：假如我们要查找sal大于1500的所有行，那么可以扫描索引，索引时排序的，结果得出7行，我们知道不会再有匹配的记录，可以退出了。<br> 如果查找一个值，它在索引表中某个中间点以前不会出现，那么也有找到其第一个匹配索引项的定位算法，而不用进行表的顺序扫描（如二分查找法）。<br> 这样，可以快速定位到第一个匹配的值，以节省大量搜索时间。数据库利用了各种各样的快速定位索引值的技术，通常这些技术都属于DBA的工作。</p>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP INDEX index_name ON  talbe_name  ALTER TABLE table_name DROP  INDEX index_name  ALTER TABLE table_name DROP  PRIMARY KEY </span><br></pre></td></tr></table></figure>

<p>其中，前两条语句是等价的，删除掉table_name中的索引index_name。  第3条语句只在删除PRIMARY KEY索引时使用，因为一个表只可能有一个PRIMARY KEY索引，   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE EMP DROP  INDEX test_index;    </span><br></pre></td></tr></table></figure>

<p> 删除后就不再使用索引了，查询会执行全表扫描。         </p>
<h1 id="数据库设计三范式（解决数据冗余）"><a href="#数据库设计三范式（解决数据冗余）" class="headerlink" title="数据库设计三范式（解决数据冗余）"></a>数据库设计三范式（解决数据冗余）</h1><h2 id="第一范式："><a href="#第一范式：" class="headerlink" title="第一范式："></a>第一范式：</h2><p>任何一张表都应该有主键，并且每一个字段的原子性不可再分</p>
<p>关于第一范式，每一行必须唯一，也就是每个表必须有主键，这是我们数据库设计的最基本要求，主要通常采用数值型或定长字符串表示，关于列不可再分，应该根据具体的情况来决定。如联系方式，为了开发上的便利行可能就采用一个字段了。</p>
<p>不符合第一范式的示例</p>
<table>
<thead>
<tr>
<th>学生编号</th>
<th>学生姓名</th>
<th>联系方式</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>张三</td>
<td><a href="mailto:&#122;&#x73;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;">&#122;&#x73;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;</a>,1359999999</td>
</tr>
<tr>
<td>1002</td>
<td>李四</td>
<td><a href="mailto:ls@gmail.com">ls@gmail.com</a>,13699999999</td>
</tr>
<tr>
<td>1001</td>
<td>王五</td>
<td><a href="mailto:&#x77;&#x77;&#x40;&#49;&#54;&#x33;&#x2e;&#x6e;&#x65;&#x74;">&#x77;&#x77;&#x40;&#49;&#54;&#x33;&#x2e;&#x6e;&#x65;&#x74;</a>,13488888888</td>
</tr>
</tbody></table>
<p>存在问题：</p>
<p>n 最后一条记录和第一条重复（不唯一，没有主键）</p>
<p>n 联系方式字段可以再分，不是原子性的</p>
<table>
<thead>
<tr>
<th>学生编号(pk)</th>
<th>学生姓名</th>
<th>email</th>
<th>联系电话</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>张三</td>
<td><a href="mailto:&#x7a;&#x73;&#64;&#103;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#x7a;&#x73;&#64;&#103;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a></td>
<td>1359999999</td>
</tr>
<tr>
<td>1002</td>
<td>李四</td>
<td><a href="mailto:ls@gmail.com">ls@gmail.com</a></td>
<td>13699999999</td>
</tr>
<tr>
<td>1003</td>
<td>王五</td>
<td><a href="mailto:ww@163.net">ww@163.net</a></td>
<td>13488888888</td>
</tr>
</tbody></table>
<h2 id="第二范式："><a href="#第二范式：" class="headerlink" title="第二范式："></a>第二范式：</h2><p>建立在第一范式之上，所有非主键字段完全依赖主键，不能产生部分依赖</p>
<p>示例：</p>
<table>
<thead>
<tr>
<th>学生编号</th>
<th>学生姓名</th>
<th>教师编号</th>
<th>教师姓名</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>张三</td>
<td>001</td>
<td>王老师</td>
</tr>
<tr>
<td>1002</td>
<td>李四</td>
<td>002</td>
<td>赵老师</td>
</tr>
<tr>
<td>1003</td>
<td>王五</td>
<td>001</td>
<td>王老师</td>
</tr>
<tr>
<td>1001</td>
<td>张三</td>
<td>002</td>
<td>赵老师</td>
</tr>
</tbody></table>
<p>确定主键：</p>
<table>
<thead>
<tr>
<th>学生编号(PK)</th>
<th>教师编号(PK)</th>
<th>学生姓名</th>
<th>教师姓名</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>001</td>
<td>张三</td>
<td>王老师</td>
</tr>
<tr>
<td>1002</td>
<td>002</td>
<td>李四</td>
<td>赵老师</td>
</tr>
<tr>
<td>1003</td>
<td>001</td>
<td>王五</td>
<td>王老师</td>
</tr>
<tr>
<td>1001</td>
<td>002</td>
<td>张三</td>
<td>赵老师</td>
</tr>
</tbody></table>
<p>以上虽然确定了主键，但此表会出现大量的冗余，主要涉及到的冗余字段为“学生姓名”和“教师姓名”，出现冗余的原因在于，学生姓名部分依赖了主键的一个字段学生编号，而没有依赖教师编号，而教师姓名部门依赖了主键的一个字段教师编号，这就是第二范式部分依赖。</p>
<p>解决方案如下：</p>
<p>学生信息表</p>
<table>
<thead>
<tr>
<th>学生编号（PK）</th>
<th>学生姓名</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>张三</td>
</tr>
<tr>
<td>1002</td>
<td>李四</td>
</tr>
<tr>
<td>1003</td>
<td>王五</td>
</tr>
</tbody></table>
<p>教师信息表</p>
<table>
<thead>
<tr>
<th>教师编号（PK）</th>
<th>教师姓名</th>
</tr>
</thead>
<tbody><tr>
<td>001</td>
<td>王老师</td>
</tr>
<tr>
<td>002</td>
<td>赵老师</td>
</tr>
</tbody></table>
<p>教师和学生的关系表</p>
<table>
<thead>
<tr>
<th>学生编号(PK) fkà学生表的学生编号</th>
<th>教师编号(PK) fkà教师表的教师编号</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>001</td>
</tr>
<tr>
<td>1002</td>
<td>002</td>
</tr>
<tr>
<td>1003</td>
<td>001</td>
</tr>
<tr>
<td>1001</td>
<td>002</td>
</tr>
</tbody></table>
<p>如果一个表是单一主键，那么它就复合第二范式，部分依赖和主键有关系</p>
<p><strong>以上是一种典型的“多对多”的设计</strong></p>
<h2 id="第三范式："><a href="#第三范式：" class="headerlink" title="第三范式："></a>第三范式：</h2><p>建立在第二范式之上，所有非主键字段直接依赖主键，不能产生传递依赖</p>
<p>提醒：在实际的开发中，以满足客户的需求为主，有的时候回拿冗余换执行速度。</p>
<table>
<thead>
<tr>
<th>学生编号（PK）</th>
<th>学生姓名</th>
<th>班级编号</th>
<th>班级名称</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>张三</td>
<td>01</td>
<td>一年一班</td>
</tr>
<tr>
<td>1002</td>
<td>李四</td>
<td>02</td>
<td>一年二班</td>
</tr>
<tr>
<td>1003</td>
<td>王五</td>
<td>03</td>
<td>一年三班</td>
</tr>
<tr>
<td>1004</td>
<td>六</td>
<td>03</td>
<td>一年三班</td>
</tr>
</tbody></table>
<p>从上表可以看出，班级名称字段存在冗余，因为班级名称字段没有直接依赖于主键，班级名称字段依赖于班级编号，班级编号依赖于学生编号，那么这就是传递依赖，解决的办法是将冗余字段单独拿出来建立表，如：</p>
<p>学生信息表</p>
<table>
<thead>
<tr>
<th>学生编号（PK）</th>
<th>学生姓名</th>
<th>班级编号（FK）</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>张三</td>
<td>01</td>
</tr>
<tr>
<td>1002</td>
<td>李四</td>
<td>02</td>
</tr>
<tr>
<td>1003</td>
<td>王五</td>
<td>03</td>
</tr>
<tr>
<td>1004</td>
<td>六</td>
<td>03</td>
</tr>
</tbody></table>
<p>班级信息表</p>
<table>
<thead>
<tr>
<th>班级编号（PK）</th>
<th>班级名称</th>
</tr>
</thead>
<tbody><tr>
<td>01</td>
<td>一年一班</td>
</tr>
<tr>
<td>02</td>
<td>一年二班</td>
</tr>
<tr>
<td>03</td>
<td>一年三班</td>
</tr>
</tbody></table>
<p><strong>以上设计是一种典型的一对多的设计，一存储在一张表中，多存储在一张表中，在多的那张表中添加外键指向一的一方的主键</strong></p>
<h2 id="三范式总结"><a href="#三范式总结" class="headerlink" title="三范式总结"></a>三范式总结</h2><p>第一范式：有主键，具有原子性，字段不可分割</p>
<p>第二范式：完全依赖，没有部分依赖</p>
<p>第三范式：没有传递依赖</p>
<p>数据库设计尽量遵循三范式，但是还是根据实际情况进行取舍，有时可能会拿冗余换速度，最终用目的要满足客户需求。</p>
<p><strong>一对一设计，有两种设计方案：</strong></p>
<p><strong>第一种设计方案：主键共享</strong></p>
<p><strong>第二种设计方案：外键唯一</strong></p>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="什么是视图"><a href="#什么是视图" class="headerlink" title="什么是视图"></a>什么是视图</h2><p>•     视图是一种根据查询（也就是SELECT表达式）定义的数据库对象，用于获取想要看到和使用的局部数据。</p>
<p>•     视图有时也被成为“虚拟表”。 </p>
<p>•     视图可以被用来从常规表（称为“基表”）或其他视图中查询数据。</p>
<p>•     相对于从基表中直接获取数据，视图有以下好处：</p>
<p>–     访问数据变得简单</p>
<p>–     可被用来对不同用户显示不同的表的内容</p>
<p>用来协助适配表的结构以适应前端现有的应用程序</p>
<p>视图作用：</p>
<p>-     提高检索效率</p>
<p>-     隐藏表的实现细节【面向视图检索】                               </p>
<p> <img src="/2021/06/05/mysql/image-20210912104154791.png" alt="image-20210912104154791"></p>
<h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><p>如下示例：查询员工的姓名，部门，工资入职信息等信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename,dname,sal,hiredate,e.deptno  from emp e,dept d where e.deptno   =  e.deptno and e.deptno = 10;  </span><br></pre></td></tr></table></figure>

<p>为什么使用视图？因为需求决定以上语句需要在多个地方使用，如果频繁的拷贝以上代码，会给维护带来成本，视图可以解决这个问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create view v_dept_emp as select ename,dname,sal,hiredate,e.deptno from emp  e,dept d where e.deptno   =  e.deptno and e.deptno = 10;  </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create view v_dept_avg_sal_grade as  select a.deptno, a.avg_sal, b.grade   from (select deptno, avg(sal) avg_sal  from emp group by deptno) a, salgrade b   where a.avg_sal between b.losal and  b.hisal; /*注意mysql不支持子查询创建视图*/ |</span><br></pre></td></tr></table></figure>

<h2 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter view v_dept_emp as select  ename,dname,sal,hiredate,e.deptno from e  mp e,dept d where e.deptno = 20;     </span><br></pre></td></tr></table></figure>

<h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop view if exists v_dept_emp;  </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2021/09/15/Liunx/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux的指令，及与java相关的操作</p>
<span id="more"></span>

<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="查看当前网络配置"><a href="#查看当前网络配置" class="headerlink" title="查看当前网络配置"></a>查看当前网络配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>



<h2 id="网络连接的三种模式"><a href="#网络连接的三种模式" class="headerlink" title="网络连接的三种模式"></a>网络连接的三种模式</h2><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><p><img src="/2021/09/15/Liunx/image-20210917222304391.png" alt="image-20210917222304391"></p>
<p>虚拟系统可以和外部系统通讯，但是容易造成ip冲突</p>
<h3 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h3><p><img src="/2021/09/15/Liunx/image-20210917222724284.png" alt="image-20210917222724284"></p>
<p>虚拟系统可以访问外部，但是外部访问不进来 </p>
<h3 id="主机模式"><a href="#主机模式" class="headerlink" title="主机模式"></a>主机模式</h3><p>独立的系统不和外部发生联系</p>
<h2 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h2><p>在使用虚拟机系统的时候。想回到原先的一个状态的操作，叫做快照管理</p>
<p>1安装好系统，先做一个快照A</p>
<p>2进入系统，创建一个文件夹，在保存一个快照b</p>
<p>3回到系统刚刚安装好的状态，即快照A</p>
<h2 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h2><p>与主机共享一个文件夹</p>
<p>1安装vmtools</p>
<p>2右键虚拟机-&gt;设置-&gt;选项-&gt;共享文件夹-&gt;启用-&gt;添加</p>
<h2 id="Liunx目录结构"><a href="#Liunx目录结构" class="headerlink" title="Liunx目录结构"></a>Liunx目录结构</h2><p>Liunx会把计算机硬件映射成文件。</p>
<p>在Liunx世界里，一切皆文件。</p>
<p>/      代表根本目录</p>
<p>/bin 是Binary的缩写（user/bin、user/local/bin）</p>
<p>用于存放最常用的命令</p>
<p>/sbin</p>
<p>存放系统管理员使用的系统管理程序</p>
<p>/home</p>
<p>存放普通用户的主目录，每个用户都有一个自己的目录</p>
<p>/root</p>
<p>系统管理员目录</p>
<p>/lib</p>
<p>系统开机所需要最基本的动态连接共享库。</p>
<p>/lost+found </p>
<p>在非法关机时存放一些文件</p>
<p>/etc</p>
<p>所有的系统管理所需要的配置文件和子目录</p>
<p>/usr</p>
<p>存放应用程序</p>
<p>/boot</p>
<p>liunx启动的相关文件</p>
<p>/proc</p>
<p>虚拟目录，系统内粗拿到映射</p>
<p>/srv</p>
<p>存放一些服务启动之后需要提取的数据</p>
<p>/sys</p>
<p>放系统内核的</p>
<p>/tmp</p>
<p>存放临时文件</p>
<p>/dev</p>
<p>类似于windows的设备管理器，所有的硬件用文件的形式存放</p>
<p>/media</p>
<p>liunx系统会自动识别一些设备，挂载到这个目录</p>
<p>/mnt</p>
<p>将外部的存储挂在到/mnt/上，进入该目录就可以查看里的内容了</p>
<p>/opt</p>
<p>主机额外安装软件存放的目录。</p>
<p>/usr/local</p>
<p>这是另一个给注解外安装软件所安装的目录。一般是通过编译源码的方式安装的程序。</p>
<p>/var</p>
<p>这个目录中存放着不断扩充的东西，习惯将经常被修改的目录存放到这个目录下。包括各种日志目录、</p>
<p>/selinux</p>
<p>安全子系统，它能控制程序只能访问特定文件，有三种工作模式，可以自行设置</p>
<p><img src="/2021/09/15/Liunx/image-20210918095347922.png" alt="image-20210918095347922"></p>
<h2 id="远程登陆到Liunx"><a href="#远程登陆到Liunx" class="headerlink" title="远程登陆到Liunx"></a>远程登陆到Liunx</h2><p><img src="/2021/09/15/Liunx/image-20210918095526276.png" alt="image-20210918095526276"></p>
<p>实际工作示意图：</p>
<p><img src="/2021/09/15/Liunx/image-20210918102445638.png" alt="image-20210918102445638"></p>
<h1 id="实操阶段"><a href="#实操阶段" class="headerlink" title="实操阶段"></a>实操阶段</h1><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><h3 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h3><p>以vim打开一个档案进入一般模式。</p>
<p>按esc进入正常模式。</p>
<p>正常模式下的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gg         回到首行</span><br><span class="line"></span><br><span class="line">G          到最后一行</span><br><span class="line"></span><br><span class="line">输入数字 再输入shift+g       进入指定行</span><br><span class="line"></span><br><span class="line">u          撤销一个动作</span><br><span class="line"></span><br><span class="line">yy         复制当前行。</span><br><span class="line"></span><br><span class="line">p          粘贴</span><br><span class="line"></span><br><span class="line">数字+yy     复制包括当前行在内的数字行</span><br><span class="line"></span><br><span class="line">dd         删除当前行</span><br><span class="line"></span><br><span class="line">数字+dd     删除包括当前行在内的数字行</span><br></pre></td></tr></table></figure>



<h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><p>按下i,I,o,O,a,A,r,R等任何一个字母之后才会进入编辑模式，一般按i即可</p>
<h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>在命令行模式。输入：  在这个模式中，可以提供你相关指令，完成读取、存盘、替换、离开vim、显示行号等动作</p>
<p>命令行下的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/关键字                            查询关键字 输入n查找下一个</span><br><span class="line"></span><br><span class="line">:%s/要替换的文本/替换之后的文本       替换文本</span><br><span class="line"></span><br><span class="line">:set nu                           显示行号</span><br><span class="line"></span><br><span class="line">:set nonu                         去掉行号</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/15/Liunx/image-20210918110553599.png" alt="image-20210918110553599"></p>
<p><img src="/2021/09/15/Liunx/image-20210918112404583.png" alt="image-20210918112404583"></p>
<h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">只输入shutdown    相当于加了-h 1</span><br><span class="line"></span><br><span class="line">shutdown -h now  立刻关机</span><br><span class="line"></span><br><span class="line">shutdown -h 1    1分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown -r now  立刻重启</span><br><span class="line"></span><br><span class="line">halt             关机</span><br><span class="line"></span><br><span class="line">reboot           立刻重启</span><br><span class="line"></span><br><span class="line">sync             把内存数据同步到硬盘</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>不管是重启还是关机，首先要运行sync命令</p>
<p>目前的 shutdown/reboot/halt 等命令均已经在关机前进行了sync。但是建议手动打一遍</p>
<p>logout 注销用户。只在命令行下有效。</p>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd  用户名</span><br></pre></td></tr></table></figure>

<p>细节：</p>
<p>当创建好用户后，会自动创建和用户同名的家目录/home/用户名</p>
<p>也可以给新创建的用户指定家目录位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd -d 目录名 用户名</span><br></pre></td></tr></table></figure>

<h3 id="设定密码"><a href="#设定密码" class="headerlink" title="设定密码"></a>设定密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd   用户名</span><br></pre></td></tr></table></figure>

<p>补充，显示当前用户所在的目录 <code>pwd</code></p>
<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>删除用户，但是保留家目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userdel   用户名</span><br></pre></td></tr></table></figure>

<p>删除这个用户，同时删除家目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userdel -r 用户名</span><br></pre></td></tr></table></figure>

<h3 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h3><p>基本语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id    用户名</span><br></pre></td></tr></table></figure>

<p>切换用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su    -用户名</span><br></pre></td></tr></table></figure>

<p>细节说明：</p>
<p>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。</p>
<p>当需要返回原来用户时，使用exit/logout</p>
<p>查看当前用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">who am i   或： whoami</span><br></pre></td></tr></table></figure>

<h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><p>系统对拥有共性的多个用户进行统一管理</p>
<h4 id="添加用户组"><a href="#添加用户组" class="headerlink" title="添加用户组"></a>添加用户组</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupadd   组名</span><br></pre></td></tr></table></figure>

<h4 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure>

<p>注意：用户组里面有用户，必须先把用户移动或删除了，才能删除组。</p>
<h4 id="增加用户时直接加上组"><a href="#增加用户时直接加上组" class="headerlink" title="增加用户时直接加上组"></a>增加用户时直接加上组</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd -g 用户组 用户名</span><br></pre></td></tr></table></figure>

<h4 id="修改用户的组"><a href="#修改用户的组" class="headerlink" title="修改用户的组"></a>修改用户的组</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod -g 用户组 用户名</span><br></pre></td></tr></table></figure>

<p>用户信息</p>
<p>/etc/passwd</p>
<p>用户配置文件</p>
<p>/etc/shadom</p>
<p>口令配置文件</p>
<p>/etc/group</p>
<p>组配置文件</p>
<h2 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h2><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p>修改当前级别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">init 数字</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/15/Liunx/image-20210918141009572.png" alt="image-20210918141009572"></p>
<p>修改开机默认级别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl get-default       查看当前默认级别</span><br><span class="line">systemctl set-default Target.target    设置默认级别</span><br></pre></td></tr></table></figure>



<h3 id="找回root密码"><a href="#找回root密码" class="headerlink" title="找回root密码"></a>找回root密码</h3><p>1首先，启动系统，进入开机界面，在界面中按”e“进入编辑界面</p>
<p><img src="/2021/09/15/Liunx/image-20210918161142505.png" alt="image-20210918161142505"></p>
<p>2进入编辑界面，使用键盘的上下键把光标往下移，找到以”linux16“开头内容所在的行数，在最后输入：”init=/bin/sh“</p>
<p>3使用快捷键 ctrl-x进入单用户模式</p>
<p>4接着，在光标闪烁位置输入：mount -o remount,rw /，完成以后按回车。</p>
<p>5在新的一行最后输入： passwd 按回车。输入密码，接着确认密码。修改后显示passwd……的样式，说明密码修改成功</p>
<p>6接着，在鼠标闪烁的位置输入touch /.autorelabel（注意touch 与 / 中间有空格），完成后回车。等待系统自动修改密码。完成后系统会自动重启，密码生效。</p>
<h3 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h3><h4 id="man"><a href="#man" class="headerlink" title="man"></a>man</h4><p>获得帮助帮助信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">man 命令或配置文件</span><br></pre></td></tr></table></figure>

<p>例如man ls</p>
<p>在Linux下，隐藏文件始以 .开头的，选项可以组合使用。比如ls -al，ls -al /root</p>
<h4 id="help命令"><a href="#help命令" class="headerlink" title="help命令"></a>help命令</h4><p>获得shell内置命令的帮助信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">help 命令</span><br></pre></td></tr></table></figure>

<h3 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h3><h4 id="pwd指令"><a href="#pwd指令" class="headerlink" title="pwd指令"></a>pwd指令</h4><p>获取当前工作目录的绝对路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure>

<h4 id="ls指令"><a href="#ls指令" class="headerlink" title="ls指令"></a>ls指令</h4><p>获取当前目录的所有目录和文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line">ls -lh        按照人看着舒服的方式查看</span><br></pre></td></tr></table></figure>

<p>-a:显示当前目录所有文件和目录，包括隐藏的</p>
<p>-l：以列表的方式显示信息</p>
<h4 id="cd指令"><a href="#cd指令" class="headerlink" title="cd指令"></a>cd指令</h4><p>定位绝对路径或者相对路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 路径     到达该目录</span><br><span class="line">cd~或者cd ：回到自己的家目录</span><br><span class="line">cd.. ：回到当前目录的上一级目录</span><br></pre></td></tr></table></figure>

<h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><p>创建目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir 目录名</span><br><span class="line">mkdir 路径/目录名</span><br><span class="line">mkdir -p 路径/多级目录</span><br></pre></td></tr></table></figure>

<h4 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h4><p>删除空目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmdir 目录名 或 路径</span><br><span class="line">rm -rf 目录名        强制删除</span><br></pre></td></tr></table></figure>

<h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><p>创建空文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch 文件名</span><br></pre></td></tr></table></figure>

<h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><p>拷贝文件到指定目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp [文件名] 目标目录</span><br><span class="line">cp -r 复制目录 目标目录 </span><br><span class="line">\cp 强制复制（不提示是否覆盖）</span><br></pre></td></tr></table></figure>

<h4 id="rm指令"><a href="#rm指令" class="headerlink" title="rm指令"></a>rm指令</h4><p>删除文件夹或目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm 要删除的文件或目录</span><br><span class="line">rm -f 强制删除不提示</span><br><span class="line">rm -r 递归删除整个文件夹</span><br><span class="line">rm -rf 强制递归删除整个文件夹</span><br></pre></td></tr></table></figure>

<h4 id="mv指令"><a href="#mv指令" class="headerlink" title="mv指令"></a>mv指令</h4><p>移动文件或重命名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv 旧名字 新名字       重命名</span><br><span class="line">mv 文件或目录 目录          移动</span><br></pre></td></tr></table></figure>

<h4 id="cat指令"><a href="#cat指令" class="headerlink" title="cat指令"></a>cat指令</h4><p>查看文件内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat 要查看的内容</span><br><span class="line">cat -n 内容        显示行号</span><br><span class="line">cat -n 内容 |more  分页</span><br></pre></td></tr></table></figure>

<p>细节：cat只能浏览文件，而不能修改文件，一般会带上 管道命令 |more</p>
<h4 id="more指令"><a href="#more指令" class="headerlink" title="more指令"></a>more指令</h4><p>基于vi编辑器的文本过滤器，按页显示文本内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more 要查看的文件</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/15/Liunx/image-20210918170051978.png" alt="image-20210918170051978"></p>
<h4 id="less指令"><a href="#less指令" class="headerlink" title="less指令"></a>less指令</h4><p>也是用来看分页文件内容，比more更加强大，支持各种终端。并不是一次将整个文件加载之后才显示，而是根据显示的内容需要加载内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less 要查看的文件</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/15/Liunx/image-20210918170454405.png" alt="image-20210918170454405"></p>
<h4 id="echo指令"><a href="#echo指令" class="headerlink" title="echo指令"></a>echo指令</h4><p>输出内容到控制器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 内容</span><br></pre></td></tr></table></figure>

<h4 id="head指令"><a href="#head指令" class="headerlink" title="head指令"></a>head指令</h4><p>用于显示文件的开头部分内容，默认前10行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head 文件             看10行  </span><br><span class="line">head -n 数字 文件      看n行</span><br></pre></td></tr></table></figure>

<h4 id="tail指令"><a href="#tail指令" class="headerlink" title="tail指令"></a>tail指令</h4><p>用于输入文件中尾部内容，默认10行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail 文件</span><br><span class="line">tail -n 数字 文件</span><br><span class="line">tail -f 文件       实时追踪该文档的所有更新</span><br></pre></td></tr></table></figure>

<h4 id="gt-指令和-gt-gt-指令"><a href="#gt-指令和-gt-gt-指令" class="headerlink" title="&gt;指令和&gt;&gt;指令"></a>&gt;指令和&gt;&gt;指令</h4><p>&gt;输出重定向和&gt;&gt;追加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l &gt; 文件                   列表的内容写入文件中（覆盖）</span><br><span class="line">ls -al &gt;&gt; 文件                 列表的内容追加到文件中</span><br><span class="line">cat 文件1 &gt; 文件2               将文件1的内容覆盖到文件2中</span><br><span class="line">echo &quot;内容&quot; &gt;&gt; 文件             </span><br></pre></td></tr></table></figure>

<h4 id="ln指令"><a href="#ln指令" class="headerlink" title="ln指令"></a>ln指令</h4><p>软连接也成为符号链接，类似于windows里的快捷方式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s 目标目录 存放的目录</span><br><span class="line">例如：</span><br><span class="line">ln -s /root/ /home/myroot</span><br><span class="line">访问myroot就会直接跳到root中</span><br></pre></td></tr></table></figure>

<h4 id="history指令"><a href="#history指令" class="headerlink" title="history指令"></a>history指令</h4><p>查看已经执行过的历史命令，也可以执行历史命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">history            查看历史指令</span><br><span class="line">histroy 数字        查看最近n条</span><br><span class="line">！编号              再次执行该指令</span><br></pre></td></tr></table></figure>

<h3 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h3><h4 id="date指令"><a href="#date指令" class="headerlink" title="date指令"></a>date指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date                         时间</span><br><span class="line">date +%Y					 年</span><br><span class="line">date +%m                     月</span><br><span class="line">date +%d                     日</span><br><span class="line">date &quot;+%Y-%m-%d %H:%M:%S&quot;    年月日时分秒</span><br><span class="line">date -s 字符串时间             设置时间</span><br></pre></td></tr></table></figure>

<h4 id="cal-显示日历信息"><a href="#cal-显示日历信息" class="headerlink" title="cal 显示日历信息"></a>cal 显示日历信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cal     显示当前日历</span><br><span class="line">cal 加年 显示该年日历</span><br></pre></td></tr></table></figure>

<h3 id="搜索查找"><a href="#搜索查找" class="headerlink" title="搜索查找"></a>搜索查找</h3><h4 id="find指令"><a href="#find指令" class="headerlink" title="find指令"></a>find指令</h4><p>将从指定目录向下递归地遍历各个子目录，将满足条件的文件或者目录显示在终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find 搜索范围 选项</span><br><span class="line">例如：</span><br><span class="line">find /home -name hello.txt</span><br><span class="line">find /opt -user nobody</span><br><span class="line">find / -size +200M</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/15/Liunx/image-20210918205057527.png" alt="image-20210918205057527"></p>
<h4 id="locate指令"><a href="#locate指令" class="headerlink" title="locate指令"></a>locate指令</h4><p>locate指令可以快速定位文件路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">locate 搜索文件</span><br></pre></td></tr></table></figure>

<p>特别说明。locate指令基于数据库查询，所以第一次运行前，必须限制性 updatedb</p>
<h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><p>可以查看某几个指令在那个目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which 指令</span><br></pre></td></tr></table></figure>

<h4 id="grep指令和管道符号"><a href="#grep指令和管道符号" class="headerlink" title="grep指令和管道符号|"></a>grep指令和管道符号|</h4><p>grep:过滤查找</p>
<p>“|”管道符，表示将前一个命令的结果输出给后面的命令处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep [选项] 查找内容 源文件</span><br><span class="line">例如：</span><br><span class="line">cat /home/hello.txt |grep -n &quot;yes&quot;</span><br><span class="line">等同于</span><br><span class="line">grep -n &quot;yes&quot; /home/hello.txt</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/15/Liunx/image-20210918210445842.png" alt="image-20210918210445842"></p>
<h3 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h3><h4 id="gzip-gunzip指令"><a href="#gzip-gunzip指令" class="headerlink" title="gzip/gunzip指令"></a>gzip/gunzip指令</h4><p>gzip用于压缩文件</p>
<p>gunzip用于解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip 文件</span><br><span class="line">gunzip 文件.gz</span><br></pre></td></tr></table></figure>

<h4 id="zip-unzip指令"><a href="#zip-unzip指令" class="headerlink" title="zip/unzip指令"></a>zip/unzip指令</h4><p>zip用于压缩文件</p>
<p>unzip用于解压</p>
<p>这个在打包发布中很有用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip [选项] xxx.zip      压缩</span><br><span class="line">-r:递归压缩，即压缩目录</span><br><span class="line">例如：</span><br><span class="line">zip -r myhome.zip /home</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unzip [选项] xxx.zip    解压</span><br><span class="line">-d&lt;目录&gt;:指定解压后文件的存放目录</span><br><span class="line">例如</span><br><span class="line">unzip -d /opt/tmp /home/myhome.zip</span><br></pre></td></tr></table></figure>

<h4 id="tar指令"><a href="#tar指令" class="headerlink" title="tar指令"></a>tar指令</h4><p>tar指令是打包指令，最后打包的文件是.tar.gz的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar [选项] xxx.tar.gz 打包的内容</span><br><span class="line">例如：</span><br><span class="line">tar -zcvf pc.tar.gz /home/pig.txt /home/cat.txt  把pig.txt和cat.txt打包到pc.tar.gz中</span><br><span class="line">tar -zcvf myhome.tar.gz /home 将/home文件夹压缩成myhome.tar.gz</span><br><span class="line">tar -zxvf pc.tar.gz 将pc.tar.gz解压到当前目录</span><br><span class="line">tar -zxvf /home/myhome.tar.gz -C /opt/tmp2   将myhome.tar.gz解压到tmp2中</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/15/Liunx/image-20210918213422025.png" alt="image-20210918213422025"></p>
<h2 id="组管理和权限管理"><a href="#组管理和权限管理" class="headerlink" title="组管理和权限管理"></a>组管理和权限管理</h2><h3 id="组基本介绍"><a href="#组基本介绍" class="headerlink" title="组基本介绍"></a>组基本介绍</h3><p>在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件有所有者、所在组、其他组的概念。</p>
<h3 id="文件-目录-所有者"><a href="#文件-目录-所有者" class="headerlink" title="文件/目录 所有者"></a>文件/目录 所有者</h3><p>一般为文件的创建者，谁创建了该文件，就自然成为该文件的所有者</p>
<p>查看文件的所有者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -ahl</span><br></pre></td></tr></table></figure>

<h4 id="修改文件所有者-chown命令"><a href="#修改文件所有者-chown命令" class="headerlink" title="修改文件所有者 chown命令"></a>修改文件所有者 chown命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown 用户名 文件名</span><br></pre></td></tr></table></figure>

<h3 id="创建组"><a href="#创建组" class="headerlink" title="创建组"></a>创建组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupadd 组名</span><br><span class="line">useradd -g 组名 用户名      创建一个用户并将他添加到一个组</span><br></pre></td></tr></table></figure>

<h3 id="文件-目录-所在组"><a href="#文件-目录-所在组" class="headerlink" title="文件/目录 所在组"></a>文件/目录 所在组</h3><p>当某个用户创建了一个文件后，这个文件的所在组就是用户的所在组</p>
<p>查看文件/目录 所在组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -ahl</span><br></pre></td></tr></table></figure>

<h4 id="修改文件所在的组-chgrp命令"><a href="#修改文件所在的组-chgrp命令" class="headerlink" title="修改文件所在的组 chgrp命令"></a>修改文件所在的组 chgrp命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp 组名 文件名</span><br></pre></td></tr></table></figure>

<h3 id="其他组"><a href="#其他组" class="headerlink" title="其他组"></a>其他组</h3><p>出文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组</p>
<h3 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h3><h4 id="用root的管理权限可以改变某个用户的所在组-usermod命令"><a href="#用root的管理权限可以改变某个用户的所在组-usermod命令" class="headerlink" title="用root的管理权限可以改变某个用户的所在组 usermod命令"></a>用root的管理权限可以改变某个用户的所在组 usermod命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod -g 新组名 用户名</span><br><span class="line">usermod -d 目录名 用户名      改变该用户登录的初始目录。</span><br></pre></td></tr></table></figure>

<p>特别说明：用户需要有进入新目录的权限</p>
<h3 id="权限的基本介绍"><a href="#权限的基本介绍" class="headerlink" title="权限的基本介绍"></a>权限的基本介绍</h3><p><img src="/2021/09/15/Liunx/image-20210918222304531.png" alt="image-20210918222304531"></p>
<p><img src="/2021/09/15/Liunx/image-20210918222810499.png" alt="image-20210918222810499"></p>
<h3 id="文件及目录权限实际案例"><a href="#文件及目录权限实际案例" class="headerlink" title="文件及目录权限实际案例"></a>文件及目录权限实际案例</h3><p><img src="/2021/09/15/Liunx/image-20210918224036756.png" alt="image-20210918224036756"></p>
<h3 id="修改权限-chmod"><a href="#修改权限-chmod" class="headerlink" title="修改权限-chmod"></a>修改权限-chmod</h3><p><img src="/2021/09/15/Liunx/image-20210918224739180.png" alt="image-20210918224739180"></p>
<p><img src="/2021/09/15/Liunx/image-20210918224836272.png" alt="image-20210918224836272"></p>
<p> 1=x</p>
<p>2=w</p>
<p>3=x+w</p>
<p>4=r</p>
<p>5=r+x</p>
<p>6=r+w</p>
<p>7=r+w+x</p>
<h3 id="修改文件所有者-chmod"><a href="#修改文件所有者-chmod" class="headerlink" title="修改文件所有者-chmod"></a>修改文件所有者-chmod</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown newowener 文件/目录            改变文件/目录所有者</span><br><span class="line">chown newowner: newgroup 文件目录    改变所有者，所在组</span><br><span class="line">-R 如果是目录 则使其下所有子文件或目录递归生效</span><br></pre></td></tr></table></figure>

<h3 id="修改文件-目录所在组-chgrp"><a href="#修改文件-目录所在组-chgrp" class="headerlink" title="修改文件/目录所在组-chgrp"></a>修改文件/目录所在组-chgrp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp newgroup 文件/目录           改变所在组</span><br><span class="line">-R 如果是目录 则使其下所有子文件或目录递归生效</span><br></pre></td></tr></table></figure>

<p>对文件rwx的理解</p>
<p>x:代表可以进入该目录，比如cd。</p>
<p>r:表示可以ls，将目录及的内容显示。</p>
<p>w:表示可以在该目录，删除或者创建文件。</p>
<p>举例子：</p>
<p>比如一个用户对目录有–x的权限，对目录里的某个文件有r–的权限。</p>
<p>该用户可以进入该目录，但是不能ls查看该目录的情况。又因为他对某个文件有r的权限，他可以读该文件。</p>
<h2 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h2><h3 id="crond任务调度"><a href="#crond任务调度" class="headerlink" title="crond任务调度"></a>crond任务调度</h3><p>crontab 进行定时任务的设置</p>
<p>概输：</p>
<p>任务调度：是指系统在某个实践执行的特定的命令或程序。</p>
<p>任务调度分类</p>
<p>1系统任务：有些重要的工作必须周而复始的执行。例如：病毒扫描</p>
<p>2个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab [选项]</span><br></pre></td></tr></table></figure>

<p>选项：</p>
<p><img src="/2021/09/15/Liunx/image-20210919104230288.png" alt="image-20210919104230288"></p>
<p>占位符说明：</p>
<p><img src="/2021/09/15/Liunx/image-20210919104536723.png" alt="image-20210919104536723"></p>
<p><img src="/2021/09/15/Liunx/image-20210919105201837.png" alt="image-20210919105201837"></p>
<p><img src="/2021/09/15/Liunx/image-20210919105528052.png" alt="image-20210919105528052"></p>
<p>案例：</p>
<p><img src="/2021/09/15/Liunx/image-20210919110806354.png" alt="image-20210919110806354"></p>
<p>自动执行脚本的方式：</p>
<p>1先写脚本</p>
<p>2赋予脚本执行权限</p>
<p>3crontab -e +脚本</p>
<h3 id="at定时任务"><a href="#at定时任务" class="headerlink" title="at定时任务"></a>at定时任务</h3><p>一次性计划任务</p>
<p>1at的守护进程atd会议后台模式运行，检查作业队列来运行</p>
<p>2默认情况下atd60秒检查一次作业队列，有作业时，检查作业运行时间，与当前时间匹配就会运行次作业。</p>
<p>3at命令是一次性的</p>
<p>4在使用at命令时，要保证atd进程的启动，可以使用相关指令来查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef |grep atd               查看当前进程是否有atd</span><br></pre></td></tr></table></figure>

<p>at命令格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">at [选项] 时间</span><br><span class="line">Ctrl + D          需要连按两次，结束at命令的输入</span><br><span class="line">atq               查看系统中没有执行的工作任务</span><br><span class="line">atrm 编号          删除系统内的任务</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/15/Liunx/image-20210919111754140.png" alt="image-20210919111754140"></p>
<p>关于时间的设定：</p>
<p><img src="/2021/09/15/Liunx/image-20210919111943086.png" alt="image-20210919111943086"></p>
<p>应用实例</p>
<p><img src="/2021/09/15/Liunx/image-20210919120140583.png" alt="image-20210919120140583"></p>
<h2 id="Linux磁盘分区、挂载"><a href="#Linux磁盘分区、挂载" class="headerlink" title="Linux磁盘分区、挂载"></a>Linux磁盘分区、挂载</h2><h3 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h3><p>1、Linux来说无论有几个分区，分给哪个目录使用，它归根到底就只有一个根目录，一个独立且唯一的文件结构，Liunx中每个分区都是用来组成整个文件系统的一部分。</p>
<p>2、Linux采用了一种叫”载入“的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和目录联系起来。这是要载入的一个分区将使它的存储空间在一个目录下获得。</p>
<p><img src="/2021/09/15/Liunx/Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20210919122838447.png" alt="image-20210919122838447"></p>
<p><img src="/2021/09/15/Liunx/image-20210919123152580.png" alt="image-20210919123152580"></p>
<p>查看所有设备挂载情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsblk</span><br><span class="line">lsblk -f</span><br></pre></td></tr></table></figure>

<p>lsblk -f 内每一段文本的含义</p>
<p><img src="/2021/09/15/Liunx/image-20210919123758401.png" alt="image-20210919123758401"></p>
<p>分区命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/15/Liunx/image-20210919124811536.png" alt="image-20210919124811536"></p>
<p>格式化磁盘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfs -t ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>

<p>这里ext4是分区类型</p>
<p>挂载：将一个分区和一个目录联系起来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount 设备名称</span><br></pre></td></tr></table></figure>

<p>卸载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unmount 设备名称/怪哉目录</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>用命令行挂载，重启后就失效</p>
<p>永久挂载：</p>
<p>通过修改/etc/fstab实现挂载</p>
<p>添加完成后 执行mount -a 即可生效</p>
<h3 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h3><p>查询系统整体磁盘使用情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df -h            </span><br><span class="line">du -h /目录       查询指定目录(不加目录默认插叙当前目录)</span><br><span class="line">-s 指定目录战用大小汇总</span><br><span class="line">-h 带计量单位</span><br><span class="line">-a 含文件</span><br><span class="line">--max-depth=1 子目录深度</span><br><span class="line">-c 列出明细的同时，增加汇总值</span><br></pre></td></tr></table></figure>

<p>补充</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wc -l        统计数量</span><br><span class="line">tree 目录     以树状显示目录结构</span><br></pre></td></tr></table></figure>

<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p><img src="/2021/09/15/Liunx/image-20210919134152284.png" alt="image-20210919134152284"></p>
<h3 id="查看网络ip和网关"><a href="#查看网络ip和网关" class="headerlink" title="查看网络ip和网关"></a>查看网络ip和网关</h3><h4 id="查看windows环境中的vmnet8网络配置"><a href="#查看windows环境中的vmnet8网络配置" class="headerlink" title="查看windows环境中的vmnet8网络配置"></a>查看windows环境中的vmnet8网络配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure>

<h4 id="查看Linux的网络配置i"><a href="#查看Linux的网络配置i" class="headerlink" title="查看Linux的网络配置i"></a>查看Linux的网络配置i</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<h3 id="ping测试"><a href="#ping测试" class="headerlink" title="ping测试"></a>ping测试</h3><p>判断是否联通</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 目的主机</span><br></pre></td></tr></table></figure>

<h3 id="Linux网络环境配置"><a href="#Linux网络环境配置" class="headerlink" title="Linux网络环境配置"></a>Linux网络环境配置</h3><h4 id="第一种方式：自动获取"><a href="#第一种方式：自动获取" class="headerlink" title="第一种方式：自动获取"></a>第一种方式：自动获取</h4><p>通过界面的设置自动获取ip，特点：linux启动后自动获取，避免冲突，缺点是每次获取的ip地址可能不一样</p>
<h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><p>直接修改配置文件来指定ip，并可以连接到外网</p>
<p>编辑 vi/etc/sysconfig/network-scripts/ifcfg-ens33</p>
<p>要求：将ip地址配置的静态的 比如：ip地址为192.168.200.130</p>
<p><img src="/2021/09/15/Liunx/image-20210919155712505.png" alt="image-20210919155712505"></p>
<p>改完之后</p>
<p><img src="/2021/09/15/Liunx/image-20210919160212076.png"></p>
<p>子网ip也要修改</p>
<p><img src="/2021/09/15/Liunx/image-20210919160333288.png" alt="image-20210919160333288"></p>
<p>这里网关也要改</p>
<p>重启网络服务或者重启系统生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service network restart 或 reboot</span><br></pre></td></tr></table></figure>

<h3 id="设置主机名和host映射"><a href="#设置主机名和host映射" class="headerlink" title="设置主机名和host映射"></a>设置主机名和host映射</h3><h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h4><p>查看主机名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>

<p>修改文件/etc/hostname</p>
<p>重启后修改生效</p>
<h4 id="设置hosts映射（通过主机名找到linux系统）"><a href="#设置hosts映射（通过主机名找到linux系统）" class="headerlink" title="设置hosts映射（通过主机名找到linux系统）"></a>设置hosts映射（通过主机名找到linux系统）</h4><p>windows</p>
<p>在C:\Windows\System32\drivers\etc\hosts 文件指定即可</p>
<p>案例：192.168.200.130 zcb666</p>
<p>linux</p>
<p>在/etc/hosts 文件指定</p>
<h4 id="主机名解析过程分析（Hosts和DNS）"><a href="#主机名解析过程分析（Hosts和DNS）" class="headerlink" title="主机名解析过程分析（Hosts和DNS）"></a>主机名解析过程分析（Hosts和DNS）</h4><p>Hosts是一个文本文件，用来记录ip和主机名的映射关系</p>
<p>DNS是域名系统</p>
<p>是互联网上作为域名和IP地址互相映射的分布式数据库</p>
<p><img src="/2021/09/15/Liunx/image-20210919161916295.png" alt="image-20210919161916295"></p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p><img src="/2021/09/15/Liunx/image-20210919162351124.png" alt="image-20210919162351124"></p>
<h3 id="显示系统执行的进程"><a href="#显示系统执行的进程" class="headerlink" title="显示系统执行的进程"></a>显示系统执行的进程</h3><p>ps命令</p>
<p>用来查看目前系统中，那些正在执行的程序，以及他们的状况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/15/Liunx/image-20210919162516229.png" alt="image-20210919162516229"></p>
<p>进程的相关信息</p>
<p><img src="/2021/09/15/Liunx/image-20210919162734920.png" alt="image-20210919162734920"></p>
<p>stat：进程状态。S-睡眠 s-表示进程是会话的先导状态，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死状态，T-被跟踪或者停止等待</p>
<p>全格式显示当前所有的进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef</span><br><span class="line">-e         显示所有进程</span><br><span class="line">-f         全格式</span><br></pre></td></tr></table></figure>

<h3 id="终止进程kill和killall"><a href="#终止进程kill和killall" class="headerlink" title="终止进程kill和killall"></a>终止进程kill和killall</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill [选项] 进程号</span><br><span class="line">killall 进程名     会杀死它和其子进程</span><br><span class="line">选项：</span><br><span class="line">-9：表示强迫进程立即停止</span><br></pre></td></tr></table></figure>

<p>重启进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/systemctl start sshd.service</span><br></pre></td></tr></table></figure>

<h3 id="查看进程树pstree"><a href="#查看进程树pstree" class="headerlink" title="查看进程树pstree"></a>查看进程树pstree</h3><p>可以更加直观的查看进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pstree [选项]</span><br><span class="line">-p           显示进程的pid（进程号）</span><br><span class="line">-u           显示进程的所属用户</span><br></pre></td></tr></table></figure>

<h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><p>服务本质就是进程，在后台运行，通常会监听某个端口，等待其他程序的请求。</p>
<p><img src="/2021/09/15/Liunx/image-20210919170524951.png" alt="image-20210919170524951"></p>
<p>service管理指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">servic 服务名[start|stop|restart|reload|status]</span><br></pre></td></tr></table></figure>

<p>被service管理的服务在/etc/init.d中</p>
<h4 id="查看服务名"><a href="#查看服务名" class="headerlink" title="查看服务名"></a>查看服务名</h4><p>方式一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setup</span><br></pre></td></tr></table></figure>

<p>打星号的代表会随着系统启动而启动</p>
<p>方式二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /etc/init.d</span><br></pre></td></tr></table></figure>

<h4 id="服务的运行级别"><a href="#服务的运行级别" class="headerlink" title="服务的运行级别"></a>服务的运行级别</h4><p><img src="/2021/09/15/Liunx/image-20210919171109730.png" alt="image-20210919171109730"></p>
<h4 id="chkconfig指令"><a href="#chkconfig指令" class="headerlink" title="chkconfig指令"></a>chkconfig指令</h4><p>给服务的各个运行级别设置自 启动/关闭</p>
<p>chkconfig指令管理的服务在 /etc/init.d查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chkconfig --list                     查看服务</span><br><span class="line">chkconfig  服务名 --list              查看指定服务</span><br><span class="line">chkconfig --level n 服务名 on/off     </span><br><span class="line">例如：</span><br><span class="line">对network服务，进行各种操作，把network在3运行级别，关闭自启动</span><br><span class="line">chkconfig --level 3 network off</span><br><span class="line">chkconfig --level 3 network on</span><br></pre></td></tr></table></figure>

<p>细节：chkconfig重新设置服务后自启动或关闭，需要重启机器reboot生效。</p>
<h4 id="systemctl管理指令"><a href="#systemctl管理指令" class="headerlink" title="systemctl管理指令"></a>systemctl管理指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl [start|stop|restart|status]</span><br></pre></td></tr></table></figure>

<p>被systemctl指令管理的服务在/usr/lib/systemd/system查看</p>
<p>systemctl设置服务的自启动状态</p>
<p>写全名或者.service之前的都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files   查看服务开机启动状态</span><br><span class="line">systemctl enable 服务名      设置服务开机启动       控制3和5级别</span><br><span class="line">systemctl disable 服务名     设置服务开机关闭       控制3和5级别</span><br><span class="line">systemctl is-enabled 服务名  查询某个服务是否自启动</span><br></pre></td></tr></table></figure>

<p>systemctl stop/start firewalld细节：</p>
<p>防火墙会管理端口，控制外来程序是否可以访问端口。</p>
<p><img src="/2021/09/15/Liunx/image-20210919173922586.png" alt="image-20210919173922586"></p>
<p>1关闭或启用防火墙后，立即生效</p>
<p>2这种方式知识临时生效，重启系统后，还会回归对应的设置。</p>
<p>3自启动设置还得看systemctl enable/disable</p>
<h4 id="防火墙打开或关闭指定端口"><a href="#防火墙打开或关闭指定端口" class="headerlink" title="防火墙打开或关闭指定端口"></a>防火墙打开或关闭指定端口</h4><p>firewall指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=端口号/协议      打开端口</span><br><span class="line">firewall-cmd --permanent --remove-port=端口号/协议   关闭端口</span><br><span class="line">firewall-cmd --reload                         重新载入，才能生效</span><br><span class="line">firewall-cmd --query-port=端口号/协议           查询端口是否生效   </span><br></pre></td></tr></table></figure>

<p>测试连接指令（windows）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet ip地址 端口号</span><br></pre></td></tr></table></figure>

<h3 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h3><p>top指令</p>
<p>与ps很相似，但是top在执行一段时间可以更新正在运行的进程。类似于windows的任务管理器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top [选项]</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/15/Liunx/image-20210919174358874.png" alt="image-20210919174358874"></p>
<p>进程图</p>
<p><img src="/2021/09/15/Liunx/image-20210919174914219.png" alt="image-20210919174914219"></p>
<p>交互操作：</p>
<p><img src="/2021/09/15/Liunx/image-20210919175018081.png" alt="image-20210919175018081"></p>
<p>监视用户：输入u在输入用户名可以</p>
<p>结束进程：输入k在输入要结束的进程号PID</p>
<h3 id="监视网络状态"><a href="#监视网络状态" class="headerlink" title="监视网络状态"></a>监视网络状态</h3><p>查看系统网路情况netstat(可以看协议)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat [选项]</span><br><span class="line">-an 按一定顺序排列输出</span><br><span class="line">-p 显示哪个进程在调用</span><br></pre></td></tr></table></figure>

<p>内部地址和外部地址的理解</p>
<p><img src="/2021/09/15/Liunx/image-20210919180714096.png" alt="image-20210919180714096"></p>
<p>检测链接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 对方ip地址</span><br></pre></td></tr></table></figure>

<h2 id="RPM与YUM"><a href="#RPM与YUM" class="headerlink" title="RPM与YUM"></a>RPM与YUM</h2><h3 id="rpm包的管理"><a href="#rpm包的管理" class="headerlink" title="rpm包的管理"></a>rpm包的管理</h3><p>rpm用于互联网下载包的打包及安装工具</p>
<p>rpm基本指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa                   查询已安装的rpm列表</span><br><span class="line">rpm -q 软件包名            查询软件包是否安装</span><br><span class="line">rpm -qi 软件包名           查询软件包信息</span><br><span class="line">rpm -ql 软件包名           查询软件包中的文件</span><br><span class="line">rpm -qf 文件全路径名        查询文件所属的软件包</span><br></pre></td></tr></table></figure>

<p>卸载rpm包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e rpm包的名称</span><br><span class="line">rpm -e --nodeps rpm包的名称  强制卸载</span><br></pre></td></tr></table></figure>

<p>细节讨论</p>
<p><img src="/2021/09/15/Liunx/image-20210919202317147.png" alt="image-20210919202317147"></p>
<p>安装rpm包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh rpm包全路径名称</span><br><span class="line">i=install    安装</span><br><span class="line">v=verbose    提示</span><br><span class="line">h=hash       进度条</span><br></pre></td></tr></table></figure>

<h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p>Yum是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次性安装所有依赖的软件包</p>
<p>yum的基本指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list        查询yum服务器的软件</span><br><span class="line">yum install xxx 下载安装</span><br></pre></td></tr></table></figure>

<h1 id="Linux-javaEE"><a href="#Linux-javaEE" class="headerlink" title="Linux javaEE"></a>Linux javaEE</h1><h2 id="搭建javaEE环境"><a href="#搭建javaEE环境" class="headerlink" title="搭建javaEE环境"></a>搭建javaEE环境</h2><p>概述</p>
<p><img src="/2021/09/15/Liunx/image-20210919203438219.png" alt="image-20210919203438219"></p>
<h2 id="tomcat的安装"><a href="#tomcat的安装" class="headerlink" title="tomcat的安装"></a>tomcat的安装</h2><p><img src="/2021/09/15/Liunx/image-20210919210227801.png" alt="image-20210919210227801"></p>
<h2 id="idea2021的安装"><a href="#idea2021的安装" class="headerlink" title="idea2021的安装"></a>idea2021的安装</h2><p><img src="/2021/09/15/Liunx/image-20210919210844589.png" alt="image-20210919210844589"></p>
<h2 id="mysql的安装"><a href="#mysql的安装" class="headerlink" title="mysql的安装"></a>mysql的安装</h2><p><img src="/2021/09/15/Liunx/image-20210919215357045.png" alt="image-20210919215437159"></p>
<p><img src="/2021/09/15/Liunx/image-20210919215744777.png" alt="image-20210919215744777"></p>
<p><img src="/2021/09/15/Liunx/image-20210919215806574.png" alt="image-20210919215806574"></p>
<h1 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h1><p><img src="/2021/09/15/Liunx/image-20210919215955181.png" alt="image-20210919215955181"></p>
<h2 id="Shell脚本的执行方式"><a href="#Shell脚本的执行方式" class="headerlink" title="Shell脚本的执行方式"></a>Shell脚本的执行方式</h2><p><img src="/2021/09/15/Liunx/image-20210919220222238.png" alt="image-20210919220222238"></p>
<h2 id="Shell的变量"><a href="#Shell的变量" class="headerlink" title="Shell的变量"></a>Shell的变量</h2><p><img src="/2021/09/15/Liunx/image-20210919220959379.png" alt="image-20210919220959379"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">案例1：定义变量A</span></span><br><span class="line">A=100</span><br><span class="line"><span class="meta">#</span><span class="bash">输出变量需要加上$</span></span><br><span class="line">echo $A</span><br><span class="line"><span class="meta">#</span><span class="bash">案例2：撤销变量A</span></span><br><span class="line">unset A</span><br><span class="line">echo &quot;A=$A&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">案例3：生命静态的变量B=2，不能<span class="built_in">unset</span></span></span><br><span class="line">readonly B=2</span><br><span class="line">echo B=$B</span><br></pre></td></tr></table></figure>

<h3 id="Shell变量的定义"><a href="#Shell变量的定义" class="headerlink" title="Shell变量的定义"></a>Shell变量的定义</h3><p><img src="/2021/09/15/Liunx/image-20210919222458012.png" alt="image-20210919222458012"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C=`date`</span><br><span class="line">D=$(echo &quot;hello,world!&quot;)</span><br><span class="line">echo &quot;C=$C&quot;</span><br><span class="line">echo D=$D</span><br></pre></td></tr></table></figure>

<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export 变量名=变量值        将shell变量输出为环境变量</span><br><span class="line">source 配置文件            让修改后的配置信息立即生效</span><br><span class="line">echo $变量名               查询环境变量的值</span><br></pre></td></tr></table></figure>

<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;!</span><br><span class="line">注释内容</span><br><span class="line">!</span><br></pre></td></tr></table></figure>

<h3 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h3><p><img src="/2021/09/15/Liunx/image-20210919223610249.png" alt="image-20210919223610249"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;0=$0 1=$1 2=$2&quot;</span><br><span class="line">echo &quot;所有的参数=$*&quot;</span><br><span class="line">echo &quot;$@&quot;</span><br><span class="line">echo &quot;参数的个数=$#&quot;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p><img src="/2021/09/15/Liunx/image-20210919224104715.png" alt="image-20210919224104715"></p>
<h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p><img src="/2021/09/15/Liunx/image-20210919224148657.png" alt="image-20210919224148657"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;当前执行的进程id=$$&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">以后台的方式运行一个脚本，并获取他的进程号</span></span><br><span class="line">/root/shcode/position.sh &amp;</span><br><span class="line">echo &quot;最后一个后台方式运行的进程id=$!&quot;</span><br><span class="line">echo &quot;执行的结果是=$?&quot;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p><img src="/2021/09/15/Liunx/image-20210919225420712.png" alt="image-20210919225420712"></p>
<p>运算符</p>
<p><img src="/2021/09/15/Liunx/image-20210919224557670.png" alt="image-20210919224557670"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/shell</span></span><br><span class="line">RES1=$(((2+3)*4))</span><br><span class="line">echo RES1=$RES1</span><br><span class="line">RES2=$[(2+3)*4]</span><br><span class="line">echo RES2=$RES2</span><br><span class="line">TEMP=`expr 2 + 3`</span><br><span class="line">RES3=`expr $TEMP \* 4`</span><br><span class="line">echo RES3=$RES3</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p><img src="/2021/09/15/Liunx/image-20210919230520118.png" alt="image-20210919230520118"></p>
<p>注意！乘法必须是   \*</p>
<h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p><img src="/2021/09/15/Liunx/image-20210919230623696.png" alt="image-20210919230623696"></p>
<h4 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h4><p><img src="/2021/09/15/Liunx/image-20210919230722683.png" alt="image-20210919230722683"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">案例1：ok是否等于ok</span></span><br><span class="line">if [ &quot;ok&quot; = &quot;ok&quot; ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;equal&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash">案例2: 23是否大于22</span></span><br><span class="line">if [ 23 -ge 22 ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;大于&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash">案例3：/root/shcode/position.sh 目录中的文件是否存在</span></span><br><span class="line">if [ -f /root/shcode/position.sh ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;存在&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="/2021/09/15/Liunx/image-20210919231831165.png" alt="image-20210919231831165"></p>
<h4 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h4><p><img src="/2021/09/15/Liunx/image-20210919231913555.png" alt="image-20210919231913555"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ $1 -ge 60 ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;及格了&quot;</span><br><span class="line">elif [ $1 -lt 60 ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;没及格&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p><img src="/2021/09/15/Liunx/image-20210919232256199.png" alt="image-20210919232256199"></p>
<h4 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h4><p><img src="/2021/09/15/Liunx/image-20210919232315835.png" alt="image-20210919232315835"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">case $1 in</span><br><span class="line">&quot;1&quot;)</span><br><span class="line">echo &quot;周一&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;2&quot;)</span><br><span class="line">echo &quot;周二&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;other...&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p><img src="/2021/09/15/Liunx/image-20210919232632544.png" alt="image-20210919232632544"></p>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p><img src="/2021/09/15/Liunx/image-20210919232722698.png" alt="image-20210919232722698"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">注意：$*是吧输入的参数，当作一个整体，所以，只会输出一句话</span></span><br><span class="line">for i in &quot;$*&quot;</span><br><span class="line">do</span><br><span class="line">        echo &quot;num is $i&quot;</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash">使用<span class="variable">$@</span>来获取输入的参数，注意，这时是分别对待，所以有几个参数，就输出几句话</span></span><br><span class="line">echo &quot;====================================&quot;</span><br><span class="line">for i in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">        echo “num is $i”</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p><img src="/2021/09/15/Liunx/image-20210919233610027.png" alt="image-20210919233610027"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">SUM=0</span><br><span class="line">for(( i=1; i&lt;=$1; i++))</span><br><span class="line">do</span><br><span class="line">        SUM=$[$SUM+$i]</span><br><span class="line">done</span><br><span class="line">echo &quot;综合SUM=$SUM&quot;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p><img src="/2021/09/15/Liunx/image-20210919234007733.png" alt="image-20210919234007733"></p>
<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p><img src="/2021/09/15/Liunx/image-20210920094822930.png" alt="image-20210920094822930"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">SUM=0</span><br><span class="line">i=0</span><br><span class="line">while [ $i -le $1 ]</span><br><span class="line">do</span><br><span class="line">        SUM=$[$SUM+$i]</span><br><span class="line">        i=$[$i+1]</span><br><span class="line">done</span><br><span class="line">echo &quot;执行结果=$SUM&quot;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p><img src="/2021/09/15/Liunx/image-20210920095454600.png" alt="image-20210920095454600"></p>
<h4 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">read [选项] 参数</span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/15/Liunx/image-20210920095619520.png" alt="image-20210920095619520"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p &quot;请输入一个数NUM1=&quot; NUM1</span><br><span class="line">echo 你输入的值：$NUM1</span><br><span class="line">read -t 10 -p &quot;请输入一个数NUM2=&quot; NUM2</span><br><span class="line">echo 你输入的值：$NUM2</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p><img src="/2021/09/15/Liunx/image-20210920100113331.png" alt="image-20210920100113331"></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>shell编程和其他编程语言一样，由系统编程，也可以自定义函数。</p>
<h4 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h4><p>basename</p>
<p>返回完整路径最后/的部分，常用于获取文件名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">basename [pathname][suffix]</span><br><span class="line">basename [string][suffix]</span><br></pre></td></tr></table></figure>

<p>dirname</p>
<p>返回完整路径最后/的前面的部分，常用于返回路径部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirname 文件绝对路径</span><br></pre></td></tr></table></figure>

<h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p><img src="/2021/09/15/Liunx/image-20210920102914176.png" alt="image-20210920102914176"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">function getSum()&#123;</span><br><span class="line"></span><br><span class="line">        SUM=$[$n1+$n2]</span><br><span class="line">        echo &quot;和是=$SUM&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read -p &quot;请输入一个数：&quot; n1</span><br><span class="line">read -p &quot;请输入一个数：&quot; n2</span><br><span class="line"></span><br><span class="line">getSum $n1 $n2</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<p><img src="/2021/09/15/Liunx/image-20210920103436287.png" alt="image-20210920103436287"></p>
<h3 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h3><p>步骤</p>
<p><img src="/2021/09/15/Liunx/image-20210920103641788.png" alt="image-20210920103641788"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">备份目录</span></span><br><span class="line">BACKUP=/data/backup/db</span><br><span class="line"><span class="meta">#</span><span class="bash">当前时间</span></span><br><span class="line">DATETIME=$(date +%Y-%m-%d_%H%M%S)</span><br><span class="line"><span class="meta">#</span><span class="bash">数据库的地址</span></span><br><span class="line">HOST=localhost</span><br><span class="line"><span class="meta">#</span><span class="bash">数据库用户名</span></span><br><span class="line">DB_USER=root</span><br><span class="line"><span class="meta">#</span><span class="bash">数据库密码</span></span><br><span class="line">DB_pw=123456</span><br><span class="line"><span class="meta">#</span><span class="bash">备份的数据库名</span></span><br><span class="line">DATABASE=Mydb</span><br><span class="line"><span class="meta">#</span><span class="bash">如果不存在，就创建备份目录</span></span><br><span class="line">[ ! -d &quot;$&#123;BACKUP&#125;/$&#123;DATETIME&#125;&quot; ] &amp;&amp; mkdir -p &quot;$&#123;BACKUP&#125;/$DATETIME&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash">备份数据库</span></span><br><span class="line">mydaldump -u$&#123;DB_USER&#125; -p $&#123;DB_PW&#125; --host=$&#123;HOST&#125; -q -R --database $&#123;DATABASE&#125; |gzip &gt;$&#123;BACKUP&#125;/$&#123;DATETIME&#125;/$DATETIME.sql.gz</span><br><span class="line"><span class="meta">#</span><span class="bash">将文件处理成 tar.gz</span></span><br><span class="line">cd $&#123;BACKUP&#125;</span><br><span class="line">tar -zcvf $DATETIME.tar.gz $&#123;DATETIME&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">删除对应的备份目录</span></span><br><span class="line">rm -rf $&#123;BACKUP&#125;/$&#123;DATETIME&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">删除10天前的备份文件</span></span><br><span class="line">find $&#123;BACKUP&#125; -atime +10 -name &quot;*.tar.gz&quot; -exec rm -rf &#123;&#125; \;</span><br><span class="line">echo &quot;备份数据库&#123;DATABASE&#125;成功&quot;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>crontab中的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">30 2 * * * /user/sbin/mysql_db_backup.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>spring5</title>
    <url>/2021/08/15/spring5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    spring相关笔记，讲解了spring中ioc和di以及aop和aop的实际应用场景声明式事务。</p>
<p>​    配套视频使用更佳：<a href="https://www.bilibili.com/video/BV1d4411g7tv?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1d4411g7tv?spm_id_from=333.999.0.0</a>   其中spring在p8到p119</p>
<p>​    更多b站java自学视频收藏：<a href="https://space.bilibili.com/8383710/favlist?fid=1335661810&amp;ftype=create">https://space.bilibili.com/8383710/favlist?fid=1335661810&amp;ftype=create</a></p>
<span id="more"></span>



<h1 id="IOC控制反转、DI依赖注入"><a href="#IOC控制反转、DI依赖注入" class="headerlink" title="IOC控制反转、DI依赖注入"></a>IOC控制反转、DI依赖注入</h1><p>Spring基础知识学习笔记(一)，内容包括： </p>
<ol>
<li>Spring入门案例 </li>
<li>IOC控制反转理解</li>
<li>属性注入的不同方式 </li>
<li>注入不同类型的属性值 </li>
<li>自动装配与注解开发</li>
</ol>
<h2 id="1-Spring概述"><a href="#1-Spring概述" class="headerlink" title="1. Spring概述"></a>1. Spring概述</h2><p>开源的免费框架，是一个容器，可以管理所有的组件(类)；</p>
<p> 轻量级的、非入侵的框架，不依赖于Spring的API</p>
<p> 控制反转(IOC)和面向切面编程(AOP) 支持事务处理，支持对框架整合 组件化、一站式 </p>
<p>官网： <a href="https://spring.io/">https://spring.io</a> </p>
<p>文档：<a href="https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#spring-core">https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#spring-core</a> </p>
<p>【总结】：Spring是一个轻量级的、控制反转和面向切面编程的框架</p>
<p>体系结构：</p>
<p><img src="/2021/08/15/spring5/image-20210910184322772.png" alt="image-20210910184322772"></p>
<p>Test：Spring的单元测试模块 </p>
<p>Core Container：核心容器(IOC)，包括4部分： </p>
<p>​    spring-core：提供了框架的基本组成部分，包括 IoC 和依赖注入功能。 </p>
<p>​    spring-beans：提供 BeanFactory， </p>
<p>​    spring-context：模块建立在由core和 beans 模块的基础上建立起来的，它以一种类似于 JNDI注册的方式访问对象。Context模块继承自Bean模块，并且添加了国际化（比如，使用 资源束）、事件传播、资源加载和透明地创建上下文（比如，通过Servelet容器）等功能 </p>
<p>​    spring-expression：提供了强大的表达式语言，用于在运行时查    询和操作对象图。它是 JSP2.1规范中定义的统一表达式语言的扩展，支持set和get属性值、属性赋值、方法调用、访 问数组集合    及索引的内容、逻辑算术运算、命名变量、通过名字从SpringIoC容器检索对 象，还支持列表的投影、选择以及聚合等 </p>
<p>AOP+Aspects：面向切面编程模块 </p>
<p>Data Access：数据访问模块 </p>
<p>Web：Spring开发Web引用模块</p>
<p>导入依赖：spring-webmvc 包含的最广泛</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="2-HelloWorld案例"><a href="#2-HelloWorld案例" class="headerlink" title="2.HelloWorld案例"></a>2.HelloWorld案例</h2><h3 id="2-1IOC和DI"><a href="#2-1IOC和DI" class="headerlink" title="2.1IOC和DI"></a>2.1IOC和DI</h3><p><strong>Inversion of Control：控制反转。</strong></p>
<p> 控制，即资源的获取方式，包括： </p>
<p>主动式：要什么资源自己创建，对于复杂对象的创建时比较庞大的工程 </p>
<p>被动式：资源的获取不是我们自己创建，而是交给容器创建。 所谓容器，是用来管理所有的组件的(即有功能的类)；容器可以自动探查出哪些组件需要用到另一 些组件</p>
<p> <strong>DI：Dependency Injection，依赖注入</strong>，是IOC的一种实现形式。容器能知道哪个组件运行时需要另 外一个类，容器通过反射的形式，将容器中准备好的对象注入。</p>
<h3 id="2-2入门案例"><a href="#2-2入门案例" class="headerlink" title="2.2入门案例"></a>2.2入门案例</h3><p>HelloWorld：所有的对象交给容器创建，给容器中注册组件 </p>
<ol>
<li>新建一个Person类，<strong>添加set方法</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String lastName, Integer age, String gender, String email)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;lastName=&#x27;&quot;</span> + lastName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.新建一个Spring配置文件ApplicationContext.xml，注册bean。<br>   使用 bean 标签注册一个Person对象，Spring会自动创建这个Person对象<br>   class：写要注册的组件的全类名<br>   id：这个对象的唯一标识<br>   使用 property 标签为Person对象的属性值，name：指定属性名；value：指定属性值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册一个Person对象，Spring会自动创建这个Person对象</span></span><br><span class="line"><span class="comment">class:写要注册的组件的全类名</span></span><br><span class="line"><span class="comment">id:这个对象的唯一标识</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用property标签为Person对象的属性赋值</span></span><br><span class="line"><span class="comment">name:指定属性名</span></span><br><span class="line"><span class="comment">value:指定属性值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan@163.com&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IocTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext ioc = <span class="keyword">new</span></span><br><span class="line">            ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">        Person bean = (Person) ioc.getBean(<span class="string">&quot;person01&quot;</span>);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【几个细节】： </p>
<ol>
<li>ApplicationContext：IOC容器的接口 </li>
<li> 同一个组件在IOC容器中默认是单实例的 </li>
<li>容器中的对象的创建在容器创建完成的时候就已经创建好了</li>
<li> 容器中如果没有这个组件，获取组件时会报异常 NoSuchBeanDefinitionException </li>
<li>IOC容器用 property 标签创建这个组件对象的时候，会利用setter方法为其属性赋值，注意 属性名是set方法后的那串的首字母小写</li>
</ol>
<h3 id="2-3-根据bean类型获取bean实例"><a href="#2-3-根据bean类型获取bean实例" class="headerlink" title="2.3 根据bean类型获取bean实例"></a>2.3 根据bean类型获取bean实例</h3><p>ioc.getBean()方法中可以传入bean的id，也可以传入class对象，也可以同时传入。 </p>
<p>如果一个类型指只注册了一个，则可以通过 ioc.getBean(….class) 获得该对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person bean1 = ioc.getBean(Person.class);</span><br></pre></td></tr></table></figure>

<p>但是如果IOC容器中这个类型的bean有多个，则会报异常 NoUniqueBeanDefinitionException</p>
<p>也可以同时传入bean的id和class对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person bean1 = ioc.getBean(<span class="string">&quot;person02&quot;</span>,Person.class);</span><br></pre></td></tr></table></figure>

<h2 id="3-属性的注入方式"><a href="#3-属性的注入方式" class="headerlink" title="3.属性的注入方式"></a>3.属性的注入方式</h2><ul>
<li>依赖：bean对象的创建依赖于容器 </li>
<li>注入：bean对象中所有的属性由容器来注入</li>
</ul>
<h3 id="3-1-setter注入"><a href="#3-1-setter注入" class="headerlink" title="3.1 setter注入"></a>3.1 setter注入</h3><p><strong>需要借助set方法</strong>，使用 propetry 标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-通过构造器注入"><a href="#3-2-通过构造器注入" class="headerlink" title="3.2 通过构造器注入"></a>3.2 通过构造器注入</h3><p>使用 <code>constructor-arg</code> 标签，则调用构造器进行属性注入，<strong>需要借助有参构造</strong></p>
<ul>
<li><strong>通过构造函数中的参数名称注入</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangwu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>只写value属性</strong>，<strong>会默认按顺序寻找构造方法进行匹配</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;wangwu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>通过构造函数参数类型</strong>，默认按照顺序</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangwu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>通过构造函数参数索引</strong>，如果有多个重载的构造函数时也可以配合type一起使用</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangwu&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-p名称空间注入"><a href="#3-3-p名称空间注入" class="headerlink" title="3.3 p名称空间注入"></a>3.3 p名称空间注入</h3><p>使用p:propertyName直接注入属性的值。本质上还是调用的set方法 </p>
<p>导入头文件约束：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">1</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan@163.com&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person04&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:lastName</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;30&quot;</span> <span class="attr">p:email</span>=<span class="string">&quot;zhangsan@qq.com&quot;</span> <span class="attr">p:gender</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-4-c命名空间注入"><a href="#3-4-c命名空间注入" class="headerlink" title="3.4 c命名空间注入"></a>3.4 c命名空间注入</h3><p>c(构造: Constructor)命名空间注入，使用c:propertyName注入属性值,本质上使用的是构造器注入 </p>
<p>导入头文件约束：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person05&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">c:lastName</span>=<span class="string">&quot;zhangsan&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;30&quot;</span> <span class="attr">c:email</span>=<span class="string">&quot;zhangsan@qq.com&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">c:gender</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-注入不同类型的属性值"><a href="#4-注入不同类型的属性值" class="headerlink" title="4.注入不同类型的属性值"></a>4.注入不同类型的属性值</h2><p>新建了一个Student类和一个Address类，来测试不同类型的属性值注入：</p>
<p> Student类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">    <span class="keyword">private</span> Map card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">    <span class="comment">//get/set方法</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Address类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="comment">//get/set方法</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-1-注入基本类型值"><a href="#4-1-注入基本类型值" class="headerlink" title="4.1 注入基本类型值"></a>4.1 注入基本类型值</h3><p>之前的例子都是注入基本类型的属性。如果不赋值的话，会使用属性的默认值 </p>
<h3 id="4-2-注入null"><a href="#4-2-注入null" class="headerlink" title="4.2 注入null"></a>4.2 注入null</h3><p> 如果有属性给了初始值，想注入为null，则在property内部需要使用 null 标签：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意，使用value=”null”是不对的：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;null&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的用法虽然对象的name属性打印出来是null，但是bean.getName()==null是false.(相当于给string类型赋值“null”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student bean = ioc.getBean(<span class="string">&quot;student01&quot;</span>, Student.class);</span><br><span class="line">System.out.println(bean);</span><br><span class="line">System.out.println(bean.getName()==<span class="keyword">null</span>); <span class="comment">//false																			</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Student&#123;name=&#x27;null&#x27;, address=null, books=null, hobbys=null, card=null,games=null, false&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-注入bean"><a href="#4-3-注入bean" class="headerlink" title="4.3 注入bean"></a>4.3 注入bean</h3><p>可以使用 ref 引用外部的值：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--先注册一个Address对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">value</span>=<span class="string">&quot;001&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过id值引用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address01&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要注意，<strong>ref是严格的引用</strong>，通过容器拿到的Address实例就是Student实例中的Address属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Address address01 = ioc.getBean(<span class="string">&quot;address01&quot;</span>, Address.class);</span><br><span class="line">Student student02 = ioc.getBean(<span class="string">&quot;student02&quot;</span>, Student.class);</span><br><span class="line">System.out.println(student02);</span><br><span class="line">System.out.println(student02.getAddress() == address01); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>也可以引用<strong>内部bean</strong>，在 property 标签体中再定义bean，这个Address和外面的没有关系，<strong>只能内部使用</strong>，外面获取不到：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student03&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Address&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tianijng&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">value</span>=<span class="string">&quot;002&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-集合类型赋值"><a href="#4-3-集合类型赋值" class="headerlink" title="4.3 集合类型赋值"></a>4.3 集合类型赋值</h3><h4 id="01-数组"><a href="#01-数组" class="headerlink" title="01 数组"></a>01 数组</h4><p>array 标签+ value 标签：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="02-List"><a href="#02-List" class="headerlink" title="02 List"></a>02 List</h4><p>list 标签+ value 标签：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>玩游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="03-Map"><a href="#03-Map" class="headerlink" title="03 Map"></a>03 Map</h4><p>props 标签：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>20190604<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;性别&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="05-util名称空间"><a href="#05-util名称空间" class="headerlink" title="05 util名称空间"></a>05 util名称空间</h4><p>util名称空间可以创建集合类型的bean，以便别的地方引用。 </p>
<p>头文件约束：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</span><br><span class="line">xsi:schemaLocation= &quot;http://www.springframework.org/schema/util</span><br><span class="line">http://www.springframework.org/schema/util/spring-util-4.1.xsd&quot;</span><br><span class="line"><span class="comment">&lt;!--util名称空间 提取出通用的集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>玩游戏<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用ref直接引用util提取出来的集合id即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student05&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myList&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4-级联属性赋值"><a href="#4-4-级联属性赋值" class="headerlink" title="4.4 级联属性赋值"></a>4.4 级联属性赋值</h3><p>propetry 标签中的name标签，可以使用级联属性，修改属性的属性，但是原来属性的值会被修改。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">value</span>=<span class="string">&quot;001&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address01&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将address01中的num属性进行了修改--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address.num&quot;</span> <span class="attr">value</span>=<span class="string">&quot;00005&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-5-继承实现配置信息重用"><a href="#4-5-继承实现配置信息重用" class="headerlink" title="4.5 继承实现配置信息重用"></a>4.5 继承实现配置信息重用</h3><p>指定parent属性为要重用的bean的id值，不写的属性就沿用，也可以重写定义属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan@163.com&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--parent：要重用的配置信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person001&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;person01&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单独修改name属性的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhang&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还可以指定属性abstract=“true”，这样的bean只能被用来继承信息，不能获取实例。否则会报异常 BeanIsAbstractException</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用property标签为Person对象的属性赋值</span></span><br><span class="line"><span class="comment">name:指定属性名</span></span><br><span class="line"><span class="comment">value:指定属性值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan@163.com&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-bean的一些性质"><a href="#5-bean的一些性质" class="headerlink" title="5.bean的一些性质"></a>5.bean的一些性质</h2><h3 id="5-1-bean之间依赖"><a href="#5-1-bean之间依赖" class="headerlink" title="5.1 bean之间依赖"></a>5.1 bean之间依赖</h3><p>多个bean的默认创建顺序，是按照配置顺序创建的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.bean.Person&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">Student创建了</span><br><span class="line">Address创建了</span><br><span class="line">Person创建了</span><br></pre></td></tr></table></figure>

<p>可以用depends-on属性进行设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;student&quot; class=&quot;com.xiao.bean.Student&quot; depends-on=&quot;person,address&quot;&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;address&quot; class=&quot;com.xiao.bean.Address&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;person&quot; class=&quot;com.xiao.bean.Person&quot;&gt;&lt;/bean&gt;</span><br><span class="line">Person创建了</span><br><span class="line">Address创建了</span><br><span class="line">Student创建了</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-2-bean的作用域scope"><a href="#5-2-bean的作用域scope" class="headerlink" title="5.2 bean的作用域scope"></a>5.2 bean的作用域scope</h3><p>在bean配置中可以设置作用域属性scope：</p>
<ul>
<li>single： 单例模式，是默认模式。在容器启动完成之前就已经创建好对象保存在容器中了。 </li>
<li>prototype ：原型模式，容器启动会不去创建，每次从容器中get的时候才会产生一个新对象</li>
<li>request：在web环境下，同一次请求创建一个bean实例(没用) </li>
<li>session：在web环境下，同一次会话创建一个bean实例(没用)</li>
</ul>
<h3 id="5-3-静态工厂与实例工厂"><a href="#5-3-静态工厂与实例工厂" class="headerlink" title="5.3 静态工厂与实例工厂"></a>5.3 静态工厂与实例工厂</h3><p>静态工厂：工厂本身不用创建对象，通过静态方法调用，对象 = 工厂类.工厂方法名( ) </p>
<p>实例工厂：工厂本身需要创建对象，先创建工厂对象，再通过工厂对象创建所需对象 </p>
<p>新建三个类Air、AirStaticFactory和AirInstanceFactory：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Air</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double weight;</span><br><span class="line">    <span class="keyword">private</span> Double length;</span><br><span class="line">    <span class="keyword">private</span> Integer PersonNum;</span><br><span class="line">    <span class="comment">//get/set...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirStaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//提供一个静态方法获取Air对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Air <span class="title">getAir</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AirStaticFactory正在造飞机！&quot;</span>);</span><br><span class="line">        Air air = <span class="keyword">new</span> Air();</span><br><span class="line">        air.setName(name);</span><br><span class="line">        air.setLength(<span class="number">100.0</span>);</span><br><span class="line">        air.setWeight(<span class="number">100.0</span>);</span><br><span class="line">        air.setPersonNum(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> air;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirInstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//提供一个方法获取Air对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Air <span class="title">getAir</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AirInstanceFactory正在造飞机！&quot;</span>);</span><br><span class="line">        Air air = <span class="keyword">new</span> Air();</span><br><span class="line">        air.setName(name);</span><br><span class="line">        air.setLength(<span class="number">100.0</span>);</span><br><span class="line">        air.setWeight(<span class="number">100.0</span>);</span><br><span class="line">        air.setPersonNum(<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span> air;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态工厂：不需要创建工厂本身，class指定静态工厂的全类名，factory-method指定工厂方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态工厂，不需要创建工厂本身,class指定静态工厂的全类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;air01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.AirStaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAir&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;林青霞&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">//获取到的就是Air的实例</span><br><span class="line">Air air01 = ioc.getBean(&quot;air01&quot;,Air.class);</span><br></pre></td></tr></table></figure>

<p>实例工厂：先创建示例工厂本身，再创建对象，指定当前对象的创建需要哪个工厂factory-bean和哪个 方法factory-method</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--实例工厂，需要先创建示例工厂本身--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;airInstanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.AirInstanceFactory&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定当前对象的创建需要哪个工厂和哪个方法，不需要指定class了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;air02&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;airInstanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAir&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张学友&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">Air air02 = ioc.getBean(&quot;air02&quot;,Air.class);</span><br></pre></td></tr></table></figure>

<h3 id="5-4-自定义工厂"><a href="#5-4-自定义工厂" class="headerlink" title="5.4 自定义工厂"></a>5.4 自定义工厂</h3><p>实现了FactoryBean接口的类，是Spring可以认识的工厂类，Spring会自动调用工厂方法创建对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFactoryBeanImpl</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Air</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//工厂方法，Spring会自动调用这个方法来创建对象并返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Air <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Air air = <span class="keyword">new</span> Air();</span><br><span class="line">        air.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> air;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回对象的类型,Spring会自动调用这个方法来确认创建的对象是什么类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Air.class;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是单例模式吗？</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注册工厂对象，会自动调用工厂方法返回对象：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册工厂对象，会自动调用工厂方法返回对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;air03&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.MyFactoryBeanImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">Air air03 = ioc.getBean(&quot;air03&quot;);</span><br></pre></td></tr></table></figure>

<p>这种类型，IOC容器启动时不会创建实例，使用getBean时才会创建</p>
<h3 id="5-5-bean的生命周期方法"><a href="#5-5-bean的生命周期方法" class="headerlink" title="5.5 bean的生命周期方法"></a>5.5 bean的生命周期方法</h3><p>可以为bean自定义一些生命周期方法，Spring在创建或销毁bean时调用。 init-method ， destroymethod ，不能有参数。 </p>
<p>IOC容器中注册的bean：</p>
<ul>
<li>单实例bean：容器启动的时候就会创建好，容器关闭也会销毁创建的bean (容器启动)构造器 —&gt; 初始化方法 —&gt; （容器关闭)销毁方法 </li>
<li>多实例bean：获取的时候才去创建 (容器启动)构造器 —&gt; 初始化方法 ，容器关闭不会调用bean的销毁方法</li>
</ul>
<p>在Air类中新增两个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Air</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double weight;</span><br><span class="line">    <span class="keyword">private</span> Double length;</span><br><span class="line">    <span class="keyword">private</span> Integer PersonNum;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁方法被调用了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始方法被调用了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;bean id=<span class="string">&quot;air04&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.xiao.Air&quot;</span> init-method=<span class="string">&quot;init&quot;</span> destroymethod=<span class="string">&quot;destroy&quot;</span>&gt; &lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-6-bean的后置处理器"><a href="#5-6-bean的后置处理器" class="headerlink" title="5.6 bean的后置处理器"></a>5.6 bean的后置处理器</h3><p>定义一个类实现BeanPostProcessor接口，其中两个方法 postProcessBeforeInitialization 和 postProcessAfterInitialization 会在调用初始化方法前后调用。需要注册这个实现类 </p>
<p>即使没有定义初始化方法，这两个方法也会被调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 前置处理器，在初始化方法之前调用</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> bean 传递过来的，将要初始化的bean</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 经该方法处理之后可以返回一个新的bean</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+beanName+<span class="string">&quot;】将要调用初始化方法了..BeforeInitialization..这个bean是这样的：+【&quot;</span>+bean+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">                           <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 后置处理器，在初始化方法之后调用</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 经该方法处理后返回给IOC容器保存的bean</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+beanName+<span class="string">&quot;】初始化方法调用完了..AfterInitialization..这个bean是这样的：+【&quot;</span>+bean+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;bean id=<span class="string">&quot;air04&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.xiao.Air&quot;</span> init-method=<span class="string">&quot;init&quot;</span> destroymethod=<span class="string">&quot;destroy&quot;</span>&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;myBeanPostProcessor&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.xiao.MyBeanPostProcessor&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【air04】将要调用初始化方法了..BeforeInitialization..这个bean是这样的：+</span><br><span class="line">【Air&#123;name=&#x27;null&#x27;, weight=null, length=null, PersonNum=null&#125;】</span><br><span class="line">初始方法被调用了</span><br><span class="line">【air04】初始化方法调用完了..AfterInitialization..这个bean是这样的：+</span><br><span class="line">【Air&#123;name=&#x27;null&#x27;, weight=null, length=null, PersonNum=null&#125;】</span><br></pre></td></tr></table></figure>

<h2 id="6-bean的装配"><a href="#6-bean的装配" class="headerlink" title="6.bean的装配"></a>6.bean的装配</h2><h3 id="6-1-Spring管理连接池"><a href="#6-1-Spring管理连接池" class="headerlink" title="6.1 Spring管理连接池"></a>6.1 Spring管理连接池</h3><p>配置C3P0的数据库连接池，注册一个ComboPooledDataSource对象即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-2-引入外部配置文件"><a href="#6-2-引入外部配置文件" class="headerlink" title="6.2 引入外部配置文件"></a>6.2 引入外部配置文件</h3><p>首先新建一个数据库连接池的配置文件db.properties：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj。jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql:///mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>需要用到context命名空间：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">https://www.springframework.org/schema/context/spring-context.xsd&quot;</span><br></pre></td></tr></table></figure>

<p>使用 context:property-placeholder location=” … “ 标签导入数据库配置文件db.properties， 就可以用$取出对应的属性了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>【一个小坑】：Spring内部已经定义过一个username了，${username}就是系统的用户名，所以这里 定义的是jdbc.username</p>
<h3 id="6-3-基于XML的自动装配"><a href="#6-3-基于XML的自动装配" class="headerlink" title="6.3 基于XML的自动装配"></a>6.3 基于XML的自动装配</h3><p>自动装配是Spring满足bean依赖的一种方式。Spring会在上下文中自动寻找，并给bean自动装配属性。 </p>
<p>Spring中的三种装配方式： </p>
<ol>
<li>在xml显示配置 </li>
<li> 在Java中显示配置</li>
<li> 隐式的自动装配bean</li>
</ol>
<p>在 bean 标签中设置 autowire 属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;air05&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.Air&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>autowire=”default/no” ：不自动装配 </li>
<li>autowire=”byName” ：按照名字，以属性名作为id去容器中找到这个组件，为其赋值；如果找不到就装配null </li>
<li>autowire=”byType” ：按照类型，以属性的类型作为查找依据去容器中找到这个组件，为其赋 值，<strong>该类型必须只有一个</strong>，否则会报异常NoUniqueBeanDifinetionException；如果找不到就装 配null </li>
<li>autowire=”construction” ：按照构造器进行赋值：先按照有参构造器的参数类型进行装，如果 没有就直接为组件装配null即可；如果按照类型有多个，就会把参数名作为id继续匹配，匹配到就 自动装配，匹配不到就装配null。不会报错</li>
</ul>
<h2 id="7-注解开发"><a href="#7-注解开发" class="headerlink" title="7.注解开发"></a>7.注解开发</h2><p>7.1 不同层组件 </p>
<p>1.通过给bean上添加注解，可以快速的将bean加入到IOC容器中。创建Dao、Service、Controller 层所需要用到的注解：</p>
<ul>
<li>@Component ：组件，放在类上，将某个类注册到Spring中，id是类名首字母小写。相当于：</li>
<li>@Repository ：Dao持久化层 </li>
<li>@Servic ：Service业务逻辑层 </li>
<li>@Controller ：Controller控制器层。后面三个含义更清晰 </li>
</ul>
<p>2.还需要告诉Spring，自动扫描加了注解的组件：添加context名称空间，``。还需要有AOP包的依 赖。 </p>
<p>3.组件的id默认是类名首字母小写，作用于默认是单例，可以修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(value = &quot;book&quot;)</span></span><br><span class="line"><span class="meta">@Scope(value = &quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBook</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存图书！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Value ：注入值，注入基本数据类型和String类型数据 </li>
<li>@Scope ：标注作用域。singleton, prototype… 细节：如果注解中有且只有一个属性要赋值时，且名称是value，value在赋值是可以不写。</li>
</ul>
<h3 id="7-2-context扫描包的配置"><a href="#7-2-context扫描包的配置" class="headerlink" title="7.2 context扫描包的配置"></a>7.2 context扫描包的配置</h3><p>指定要扫描的包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>指定扫描包时指定排除一些不要的组件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定排除不要的组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;...&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>type=”annotation” ：按照注解进行排除， expression 属性中指定要排除的注解的全类名 </li>
<li>type=”assignable” ：按照类名进行排除， expression 属性中指定要排除的类的全类名 </li>
</ul>
<p>只扫描进入指定的组件，默认都是全部扫描进来， use-default-filters 需要设置为false：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;...&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="7-3-Autowired自动装配"><a href="#7-3-Autowired自动装配" class="headerlink" title="7.3 Autowired自动装配"></a>7.3 Autowired自动装配</h3><h4 id="01-基本使用"><a href="#01-基本使用" class="headerlink" title="01 基本使用"></a>01 基本使用</h4><p>直接在成员上添加 @Autowired 完成自动装配。 </p>
<p>Dao层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明一个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读了一本书！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Service层，使用注解 @Autowired 完成成员BookDao的自动装配，调用dao层的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用@Autowired完成成员BookDao的自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookDao.readBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Controller层，使用注解 @Autowired 完成成员BookService的自动装配，调用service层的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookService.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="02-Autowired的执行流程"><a href="#02-Autowired的执行流程" class="headerlink" title="02 Autowired的执行流程"></a>02 Autowired的执行流程</h4><p>@Autowired 可以直接用在属性上，执行流程：</p>
<ol>
<li>首先按照类型去容器中找对应的组件，如果找到一个就赋值，找不到就抛异常；</li>
<li>如果有多个类型匹配时，会使用要注入的对象变量名称作为bean的id，在spring容器查找，找到 了也可以注入成功，找不到就报错。</li>
<li>结合注解 @Qualifer ，指定一个id：在自动按照类型注入的基础之上，再按照指定的bean的id去 查找。它在给字段注入时不能独立使用，必须和@Autowired 一起使用；但是给方法参数注入时， 可以独立使用。 </li>
</ol>
<p>@Autowired 标注的属性如果找不到就会报错，可以指定required属性，找不到就自动装配null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false )</span></span><br></pre></td></tr></table></figure>

<h4 id="03-注解加在方法上"><a href="#03-注解加在方法上" class="headerlink" title="03 注解加在方法上"></a>03 注解加在方法上</h4><p>@Autowired ：也可以使用在set方法上，执行流程跟上面一样； </p>
<p>@Qualifer ：还可以用在方法的参数，指定按照哪个id去装配。 </p>
<p>@Nullable ：标记的属性可以null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setBookDao</span><span class="params">(BookDao bookDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookDao.readBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Resource： 直接按照Bean的id注入，是Java自带的注解。执行流程：</p>
<ol>
<li><p>如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛 出异常</p>
</li>
<li><p>如果指定了name，则从上下文中查找id匹配的bean进行装配，找不到则抛出异常 </p>
</li>
<li><p>如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会 抛出异常</p>
</li>
<li><p>如果既没有指定name，又没有指定type，则自动按照byName方式（类名首字母小写比如 BookDao-&gt;bookDao）进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则 自动装配；</p>
</li>
</ol>
<h3 id="7-4-Spring的单元测试"><a href="#7-4-Spring的单元测试" class="headerlink" title="7.4 Spring的单元测试"></a>7.4 Spring的单元测试</h3><p>使用Spring的单元测试，不需要用ioc.getBean()来获取组件了，直接Autowired组件，Spring自动装配 导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加注解： </p>
<ul>
<li>@ContextConfiguration：指定Spring配置文件的位置</li>
<li>@RunWith：指定用哪种驱动进行单元测试，默认是junit，这里指定用Spring的单元测试模块来执 行标了@Test注解的测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*@ContextConfiguration:指定Spring配置文件的位置</span></span><br><span class="line"><span class="comment">*@RunWith：指定用哪种驱动进行单元测试，默认是junit,这里指定用Spring的单元测试模块来执行标了</span></span><br><span class="line"><span class="comment">@Test注解的测试方法</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:ApplicationContext.xml&quot;)</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookController bookController;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookController.one();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Autowired好处：不用ioc.getBean();获取组件了，直接Autowired组件为我们自动装配</p>
<p><img src="/2021/08/15/spring5/image-20210912092854740.png" alt="image-20210912092854740"></p>
<h1 id="动态代理、AOP"><a href="#动态代理、AOP" class="headerlink" title="动态代理、AOP"></a>动态代理、AOP</h1><p>Spring基础知识学习笔记(二)，内容包括： </p>
<ol>
<li>代理模式：静态代理和动态代理 </li>
<li> AOP实现：注解实现+配置文件实现 </li>
<li>切面、通知、切入点、切入点表达式 </li>
<li>环绕通知 </li>
</ol>
<p>OOP：(Object Oriented Programming) 面向对象编程。 </p>
<p>AOP：(Aspect Oriented Programming) 面向切面编程，基于OOP基础之上的编程思想，在程序运行期间，将某段代码动态的切入到指定方法的指定位置进行运算。 </p>
<p>应用场景：计算器运行计算方法的时候进行日志记录，不推荐直接在方法内部，修改维护麻烦。</p>
<h2 id="1-代理模式"><a href="#1-代理模式" class="headerlink" title="1. 代理模式"></a>1. 代理模式</h2><h3 id="1-1-静态代理"><a href="#1-1-静态代理" class="headerlink" title="1.1 静态代理"></a>1.1 静态代理</h3><p>静态代理角色分析：</p>
<p>抽象角色 : 一般使用接口或者抽象类来实现 </p>
<p>真实角色 : 被代理的角色 </p>
<p>代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 . </p>
<p>客户 : 使用代理角色来进行一些操作 </p>
<p>案例：房东有房子，交给中介代理，客户直接找中介，中介在租房前后带客户看房子和收中介费。 </p>
<p>租房接口Renet：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象角色：租房接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>真实角色房东：Host，实现了Rent接口，可以出租房子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实角色: 房东，房东要出租房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房屋出租&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理角色Proxy：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//中介在出租房屋前带客户看房子</span></span><br><span class="line">        seeHouse();</span><br><span class="line">        <span class="keyword">this</span>.host.rent();</span><br><span class="line">        <span class="comment">//中介在出租房屋后收中介费</span></span><br><span class="line">        fare();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;带客户看房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户Client，找中介租房：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//房东</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">//中介来代理房东</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line">        <span class="comment">//客户找中介，中介出租房屋</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">带客户看房子</span><br><span class="line">房屋出租！</span><br><span class="line">收中介费</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure>

<p><strong>静态代理的好处:</strong> </p>
<ul>
<li>使得真实角色更加纯粹，不再去关注一些公共的事情 </li>
<li>公共的业务由代理来完成，实现了业务的分工 </li>
<li>公共业务发生扩展时变得更加集中和方便 </li>
</ul>
<p><strong>缺点 :</strong></p>
<ul>
<li>类多了 , 多了代理类 , 工作量变大了 ，开发效率降低</li>
</ul>
<h3 id="1-2-动态代理"><a href="#1-2-动态代理" class="headerlink" title="1.2 动态代理"></a>1.2 动态代理</h3><p>动态代理的角色和静态代理的一样 ，区别是动态代理的代理类是动态生成的 ，静态代理的代理类是提前写好的。 </p>
<p>动态代理分为两类 : 一类是基于接口动态代理 , 一类是基于类的动态代理 </p>
<ul>
<li>基于接口的动态代理—-JDK动态代理，代理对象和被代理对象唯一能产生的关联就是实现了同一个 接口。如果目标对象没有实现任何接口，是无法为其创建代理对象的。 </li>
<li>基于类的动态代理–cglib </li>
</ul>
<p>JDK动态代理需要两个核心类：<strong>Proxy</strong>代理和<strong>InvocationHandler</strong>调用处理程序。 </p>
<p><strong>Proxy：</strong> </p>
<p>Proxy.newProxyInstance() 方法为目标对象创建代理对象，返回代理对象。三个参数： </p>
<ul>
<li>ClassLoader loader：和被代理对象使用相同的类加载器。 </li>
<li>Class[] interfaces：和被代理对象具有相同的行为。实现相同的接口。</li>
<li>InvocationHandler：如何代理，方法执行器。 </li>
</ul>
<p><strong>InvocationHandler：</strong> </p>
<p>调用其 invoke() 方法，执行被代理对象的任何方法，都会经过该方法，三个参数：被代理对象、方法、参数 </p>
<ul>
<li>Object proxy：被代理的对象 </li>
<li>Method method：方法</li>
<li>Object[] args：执行方法的参数 </li>
</ul>
<p>代码实现： </p>
<ol>
<li>定义一个出租房子的接口Rent</li>
<li> 房东类实现Rent，具有出租房子的功能</li>
<li>定义一个类实现InvocationHandler接口，来创建动态代理对象，增强功能 </li>
<li>动态代理对象调用方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@Description</span>: 定义一个类实现InvocationHandler接口，来创建动态代理对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line">    <span class="comment">//设置要代理的接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明一个生成代理类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Proxy.newProxyInstance()传入三个参数：类加载器，类实现的接口，InvocationHandler对象</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),rent.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理实例，并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Rent rent,Rent.class.getDeclaredMethod(<span class="string">&quot;rent&quot;</span>)</span>,Object[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//先看房</span></span><br><span class="line">        seeHouse();</span><br><span class="line">        <span class="comment">//使用反射机制invoke方法，传入被代理的接口和参数。使用真实对象的方法</span></span><br><span class="line">        Object result = method.invoke(rent, args);</span><br><span class="line">        fare();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带看房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介收费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>:测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        ProxyInvocationHandler proxyInvocationHandler = <span class="keyword">new</span></span><br><span class="line">            ProxyInvocationHandler();</span><br><span class="line">        <span class="comment">//传入要代理的接口</span></span><br><span class="line">        proxyInvocationHandler.setRent(host);</span><br><span class="line">        <span class="comment">//获得代理对象</span></span><br><span class="line">        Rent proxy = (Rent) proxyInvocationHandler.getProxy();</span><br><span class="line">        <span class="comment">//代理对象使用真实对象的方法，方法被增强了</span></span><br><span class="line">        proxy.rentHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-动态代理实现日志功能"><a href="#1-3-动态代理实现日志功能" class="headerlink" title="1.3 动态代理实现日志功能"></a>1.3 动态代理实现日志功能</h3><ol>
<li>定义一个Calculator接口，声明加减乘除方法</li>
<li>定义一个MyCalculator类实现Calculator接口，完成方法体 </li>
<li>定义一个生成代理对象的类CalculatorProxy，获取代理对象</li>
<li> 重写InvocationHandler的invoke方法，在执行目标方法前后，添加相应的日志输出，也可以处理 异常信息 </li>
</ol>
<p>Calculator接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加减乘除方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>MyCalculator类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculator</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i - j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i * j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i / j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>日志工具类LogUtils：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//执行前</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method,Object... args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+method.getName()+<span class="string">&quot;】方法开始执行了，用的参数列表是【&quot;</span>+Arrays.asList(args)+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行后</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(Method method,Object result)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+method.getName()+<span class="string">&quot;】方法执行完成了，计算结果是【&quot;</span>+result+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出现异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">(Method method,Exception e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+method.getName()+<span class="string">&quot;】方法出现异常了,异常信息是：&quot;</span>+e.getCause());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法结束</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【&quot;</span>+method.getName()+<span class="string">&quot;】方法最终结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成代理对象的类CalculatorProxy：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* Proxy.newProxyInstance()</span></span><br><span class="line"><span class="comment">* 为传入的参数对象创建一个动态代理对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> calculator 被代理的对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calculator <span class="title">getProxy</span><span class="params">(Calculator calculator)</span> </span>&#123;</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(</span><br><span class="line">            calculator.getClass().getClassLoader(),</span><br><span class="line">            calculator.getClass().getInterfaces(),</span><br><span class="line">            <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> proxy 代理对象，给JDK使用的</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> method 当前将要执行的目标对象的方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    Object result = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//目标方法执行前</span></span><br><span class="line">                        LogUtils.before(method,args);</span><br><span class="line">                        System.out.println(<span class="string">&quot;动态代理要帮你执行方法！&quot;</span>);</span><br><span class="line">                        <span class="comment">//利用反射执行目标方法</span></span><br><span class="line">                        result = method.invoke(calculator, args);</span><br><span class="line">                        <span class="comment">//目标方法执行后</span></span><br><span class="line">                        LogUtils.after(method,result);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="comment">//目标方法出现异常</span></span><br><span class="line">                        LogUtils.exception(method,e);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="comment">//目标方法结束后</span></span><br><span class="line">                        LogUtils.end(method);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//返回值必须返回出去，外界才能拿到真正执行后的返回值</span></span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="comment">//返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> (Calculator) proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calculator calculator = <span class="keyword">new</span> MyCalculator();</span><br><span class="line">        Calculator proxy = CalculatorProxy.getProxy(calculator);</span><br><span class="line">        proxy.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        proxy.divide(<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">【add】方法开始执行了，用的参数列表是【[<span class="number">1</span>, <span class="number">2</span>]】</span><br><span class="line">动态代理要帮你执行方法！</span><br><span class="line">【add】方法执行完成了，计算结果是【<span class="number">3</span>】</span><br><span class="line">【add】方法最终结束了</span><br><span class="line">【divide】方法开始执行了，用的参数列表是【[<span class="number">2</span>, <span class="number">0</span>]】</span><br><span class="line">动态代理要帮你执行方法！</span><br><span class="line">【divide】方法出现异常了,异常信息是：java.lang.ArithmeticException: / by zero</span><br><span class="line">【divide】方法最终结束了</span><br></pre></td></tr></table></figure>

<h2 id="2-aop"><a href="#2-aop" class="headerlink" title="2.aop"></a>2.aop</h2><p>AOP：(Aspect Oriented Programming) 面向切面编程，将某段代码动态的切入到指定方法的指定位置 (方法的开始、结束、异常…)。 </p>
<p>使用场景： </p>
<ul>
<li>加日志保存到数据库 </li>
<li>做权限验证 </li>
<li>做安全检查 </li>
<li>做事务控制</li>
</ul>
<h3 id="2-1-几个专业术语"><a href="#2-1-几个专业术语" class="headerlink" title="2.1 几个专业术语"></a>2.1 几个专业术语</h3><p><img src="/2021/08/15/spring5/image-20210912092952590.png" alt="image-20210912092952590"></p>
<ul>
<li>横切关注点：与业务逻辑无关的，但是需要关注的部分，就是横切关注点，方法的开始、返回、异常、结束等。 </li>
<li>切面（ASPECT）类：在上面例子中相当于自己定义的一个日志工具类。 </li>
<li>通知（Advice）：切面必须要完成的工作，是类中的一个方法。 </li>
<li>目标（Target）：被通知对象。</li>
<li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li>
<li>连接点（JointPoint）：每一个方法的每一个位置都是一个连接点 </li>
<li>切入点（PointCut）：切面通知执行的 “地点”，即真正需要执行日志记录的地方 </li>
<li>切入点表达式：在众多连接点中选出我们感兴趣的地方</li>
</ul>
<h3 id="2-2-注解实现步骤"><a href="#2-2-注解实现步骤" class="headerlink" title="2.2 注解实现步骤"></a>2.2 注解实现步骤</h3><p>需要AOP织入，要导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>步骤： </p>
<ol>
<li>将目标类和切面类(封装了通知方法的类)加入到IOC容器中，注解 @Component ，配置文件开启 context:component-scan包扫描</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.chenhui&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>告诉Spring到底哪个是切面类，在类上注解 @Aspect</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtils</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>告诉Spring切面中的方都是何时何地运行，方法上注解</p>
</li>
<li><p>在注解中写切入点表达式：execution(访问权限符 返回值类型 方法全类名(参数表))</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//执行前</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*</span></span><br><span class="line"><span class="meta">            (int,int))&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法开始执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行后</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*</span></span><br><span class="line"><span class="meta">                    (int,int))&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行完成了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出现异常</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*</span></span><br><span class="line"><span class="meta">                   (int,int))&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法出现异常了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法结束</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*</span></span><br><span class="line"><span class="meta">           (int,int))&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法最终结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Before：在目标方法之前运行；前置通知 </li>
<li>@After：在目标方法之后运行；后置通知 </li>
<li>@AfterReturning：在目标方法正常返回之后；返回通知 </li>
<li>@AfterThrowing：在目标方法抛出异常之后；异常通知 </li>
<li>@Around：环绕通知</li>
</ul>
<ol start="5">
<li>配置文件中开启基于注解的AOP功能 AOP名称空间头文件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/aop</span><br><span class="line">https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码实现： </p>
<p>目标类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculator</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>切面类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//执行前</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*(int,int))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法开始执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行后</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*</span></span><br><span class="line"><span class="meta">                    (int,int))&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行完成了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出现异常</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*</span></span><br><span class="line"><span class="meta">                   (int,int))&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法出现异常了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法结束</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*(int,int))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法最终结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试，获取到目标对象的bean，执行方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line">    ApplicationContext ioc = <span class="keyword">new</span></span><br><span class="line">        ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注意这里是根据接口类型获取的</span></span><br><span class="line">        Calculator bean = ioc.getBean(Calculator.class);</span><br><span class="line">        System.out.println(bean);<span class="comment">//com.xiao.MyProxy02.MyCalculator@3c9bfddc</span></span><br><span class="line">        System.out.println(bean.getClass());<span class="comment">//class com.sun.proxy.$Proxy22</span></span><br><span class="line">        bean.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao.MyProxy02&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-注解实现的几个细节"><a href="#2-3-注解实现的几个细节" class="headerlink" title="2.3 注解实现的几个细节"></a>2.3 注解实现的几个细节</h3><h4 id="01-获取组件"><a href="#01-获取组件" class="headerlink" title="01 获取组件"></a>01 获取组件</h4><p>IOC容器中保存的是组件的代理对象。ioc.getBean()中使用的接口类型，也可以用id名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Calculator bean = ioc.getBean(Calculator.class);</span><br><span class="line">System.out.println(bean);<span class="comment">//com.xiao.MyProxy02.MyCalculator@3c9bfddc</span></span><br><span class="line">System.out.println(bean.getClass());<span class="comment">//class com.sun.proxy.$Proxy22</span></span><br></pre></td></tr></table></figure>

<h4 id="02-cglib"><a href="#02-cglib" class="headerlink" title="02 cglib"></a>02 cglib</h4><p>有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为 true 时，表示 使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接 口，则spring将自动使用CGLib动态代理。 </p>
<p>cglib可以为没有实现接口的组件创建代理对象，通过本类类型或者id名获取到：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">xiao</span>.<span class="title">MyProxy02</span>.<span class="title">MyCalculator</span>$$<span class="title">EnhancerBySpringCGLIB</span>$$5<span class="title">ef61d8e</span></span></span><br></pre></td></tr></table></figure>

<h4 id="03-切入点表达式的写法"><a href="#03-切入点表达式的写法" class="headerlink" title="03 切入点表达式的写法"></a>03 切入点表达式的写法</h4><p> 固定格式：**execution(访问权限符 返回值类型 方法全类名(参数表))**，表达式中支持 &amp;&amp; 、||、 ！ </p>
<p>“execution(* <em>.</em>(..))” ：表示任意返回值类型，任意包下的任意类的任意方法，任意参个数 </p>
<p>通配符： </p>
<ul>
<li>*可以匹配一个或多个字符；匹配一个参数；匹配一层路径；权限位置不写就行 </li>
<li>.. 匹配任意多个参数，任意类型参数，任意多层路径 </li>
</ul>
<h4 id="04-通知方法的执行顺序"><a href="#04-通知方法的执行顺序" class="headerlink" title="04 通知方法的执行顺序"></a>04 通知方法的执行顺序</h4><p>正常执行：Before →方法执行 →After → AfterReturning(正常返回) </p>
<p>出现异常：Before →方法执行 →After → AfterThrowing</p>
<h4 id="05-拿到目标方法的详细信息"><a href="#05-拿到目标方法的详细信息" class="headerlink" title="05 拿到目标方法的详细信息"></a>05 拿到目标方法的详细信息</h4><p>从JoinPoint对象中可以拿到方法的详细信息，joinPoint.getArgs()，joinPoint.getSignature() </p>
<p>也可以接收异常和返回值，需要自己传入对应的参数Object result、Exception exception，并且要告诉 Spring指定返回值returning ，指定异常throwing</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行前</span></span><br><span class="line"><span class="meta">@Before(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*(int,int))&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【&quot;</span>+ joinPoint.getSignature().getName()+<span class="string">&quot;】方法开始执行了，用的参数列表是【&quot;</span>+ Arrays.asList(joinPoint.getArgs())+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行后</span></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(public int</span></span><br><span class="line"><span class="meta">                com.xiao.MyProxy02.MyCalculator.*(int,int))&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint,Object result)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【&quot;</span>+ joinPoint.getSignature().getName()+<span class="string">&quot;】方法执行完成了，执行结果是【&quot;</span>+ result +<span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出现异常</span></span><br><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(public int</span></span><br><span class="line"><span class="meta">               com.xiao.MyProxy02.MyCalculator.*(int,int))&quot;,throwing =&quot;exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">(JoinPoint joinPoint,Exception exception)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;】方法出现异常了,异常信息是：&quot;</span>+exception);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法结束</span></span><br><span class="line"><span class="meta">@After(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*(int,int))&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;】方法最终结束了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="06-抽取可重用的切入点表达式"><a href="#06-抽取可重用的切入点表达式" class="headerlink" title="06 抽取可重用的切入点表达式"></a>06 抽取可重用的切入点表达式</h4><p>自定义一个没有返回值和参数的方法，加上 @Pointcut 注解，声明切入点表达式，别的地方可以直接 使用其方法名进行引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(public int com.xiao.MyProxy02.MyCalculator.*(int,int))&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myPoint</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行前</span></span><br><span class="line"><span class="meta">@Before(&quot;myPoint()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="07-环绕通知"><a href="#07-环绕通知" class="headerlink" title="07 环绕通知"></a>07 环绕通知</h4><p>@Around ：就是利用反射调用目标方法，可以在其中定义环绕前置、环绕返回、环绕异常和环绕后置通知。环绕通知是优先于普通通知执行的。 </p>
<p>环绕通知只作用在自己的切面内。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;myPoint()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">//获取参数</span></span><br><span class="line">    Object[] args = point.getArgs();</span><br><span class="line">    <span class="comment">//获取方法名</span></span><br><span class="line">    String name = point.getSignature().getName();</span><br><span class="line">    Object proceed = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// @Before</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕前置通知】..【&quot;</span> + name + <span class="string">&quot;】方法开始，用的参数列表是&quot;</span></span><br><span class="line">                           + Arrays.asList(args));</span><br><span class="line">        <span class="comment">//就是利用反射调用目标方法，类似于method.invoke(obj,args)</span></span><br><span class="line">        proceed = point.proceed(args);</span><br><span class="line">        <span class="comment">// @AfterReturning</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕返回通知】..【&quot;</span> + name + <span class="string">&quot;】方法返回，返回值是&quot;</span> +</span><br><span class="line">                           proceed);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// @AfterThrowing</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕异常通知】..【&quot;</span> + name + <span class="string">&quot;】方法出现异常，异常信息是&quot;</span></span><br><span class="line">                           + e);</span><br><span class="line">        <span class="comment">//为了让外界知道这个异常，将其抛出</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// @After</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕后置通知】..【&quot;</span> + name + <span class="string">&quot;】方法结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反射调用后的返回值也一定返回出去</span></span><br><span class="line">    <span class="keyword">return</span> proceed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【环绕前置通知】..【add】方法开始，用的参数列表是[1, 2]</span><br><span class="line">【add】方法开始执行了，用的参数列表是【[1, 2]】</span><br><span class="line">【环绕返回通知】..【add】方法返回，返回值是3</span><br><span class="line">【环绕后置通知】..【add】方法结束</span><br><span class="line">【add】方法最终结束了</span><br><span class="line">【add】方法执行完成了，执行结果是【3】</span><br></pre></td></tr></table></figure>

<p>执行顺序：</p>
<p> (环绕前置 —&gt; 普通前置) —&gt; 目标方法执行 —&gt; 环绕正常返回/出现异常 —&gt; 环绕后置 —&gt; 普通后置 —&gt; 普通返回或者异常</p>
<h4 id="08-多切面情况"><a href="#08-多切面情况" class="headerlink" title="08 多切面情况"></a>08 多切面情况</h4><p>执行顺序按照类名顺序，前置1–&gt;前置2–&gt;目标方法 –&gt;后置2–&gt;后置1</p>
<p><img src="/2021/08/15/spring5/blog\public\img\ssm-img\image-20210910172506491.png" alt="image-20210910172506491"></p>
<p>在切面上使用 @Order 注解，给一个int值，值越小，优先级越高</p>
<h5 id="2-4-配置文件实现"><a href="#2-4-配置文件实现" class="headerlink" title="2.4 配置文件实现"></a>2.4 配置文件实现</h5><p>在容器中注册bean，相当于 @component </p>
<p>进行配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">aop:aspect ref=&quot;logUtils&quot;：`指定谁是切面类，相当于`@Aspect</span><br></pre></td></tr></table></figure>

<p>指定切入点和切入表达式</p>
<p>aop:before/after/after-returning/after-throwing：指定怎么切入，切在哪里，相当于 @Before等，该标签中也可以指定返回值、异常等信息。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logUtils&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.MyProxy02.LogUtils&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myCalculator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xiao.MyProxy02.MyCalculator&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面aspect，ref:要引用的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;logUtils&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public int</span></span></span><br><span class="line"><span class="string"><span class="tag">                                             com.xiao.MyProxy02.MyCalculator.*(int,int))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--返回--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--异常--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;exception&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">throwing</span>=<span class="string">&quot;exception&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;end&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h1><p>Spring的声明式事务，内容包括： </p>
<ol>
<li>注解实现声明式事务 </li>
<li>事务的隔离级别 </li>
<li>事务的传播行为 </li>
<li> 配置文件实现 </li>
</ol>
<h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><h3 id="1-1-数据库环境"><a href="#1-1-数据库环境" class="headerlink" title="1.1 数据库环境"></a>1.1 数据库环境</h3><p>三张表：账户表account，书籍价格表，书籍库存表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE account (</span><br><span class="line">    username VARCHAR(50) PRIMARY KEY,</span><br><span class="line">    balance INT(10) NOT NULL</span><br><span class="line">)ENGINE=INNODB DEFAULT CHARSET=utf8;</span><br><span class="line">INSERT INTO account VALUES</span><br><span class="line">(&quot;Tom&quot;,1000),</span><br><span class="line">(&quot;Jerry&quot;,1000);</span><br><span class="line">CREATE TABLE book (</span><br><span class="line">    isbn VARCHAR(50) PRIMARY KEY,</span><br><span class="line">    book_name VARCHAR(50) NOT NULL,</span><br><span class="line">    price INT(10)</span><br><span class="line">)ENGINE = INNODB DEFAULT CHARSET=utf8;</span><br><span class="line">INSERT INTO book VALUES</span><br><span class="line">(&quot;ISBN-001&quot;,&quot;book01&quot;,100),</span><br><span class="line">(&quot;ISBN-002&quot;,&quot;book02&quot;,200),</span><br><span class="line">(&quot;ISBN-003&quot;,&quot;book03&quot;,300),</span><br><span class="line">(&quot;ISBN-004&quot;,&quot;book04&quot;,400),</span><br><span class="line">(&quot;ISBN-005&quot;,&quot;book05&quot;,500);</span><br><span class="line">CREATE TABLE book_stock (</span><br><span class="line">    isbn VARCHAR(50) PRIMARY KEY,</span><br><span class="line">    stock INT(10) NOT NULL</span><br><span class="line">)ENGINE= INNODB DEFAULT CHARSET = utf8;</span><br><span class="line">INSERT INTO book_stock VALUES</span><br><span class="line">(&quot;ISBN-001&quot;,10),</span><br><span class="line">(&quot;ISBN-002&quot;,10),</span><br><span class="line">(&quot;ISBN-003&quot;,10),</span><br><span class="line">(&quot;ISBN-004&quot;,10),</span><br><span class="line">(&quot;ISBN-005&quot;,10);</span><br></pre></td></tr></table></figure>

<h3 id="1-2-减余额、减库存的方法"><a href="#1-2-减余额、减库存的方法" class="headerlink" title="1.2 减余额、减库存的方法"></a>1.2 减余额、减库存的方法</h3><ol>
<li>新建一个BookDao类，用于操作数据库，包括减账户余额、减图书库存方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="comment">//减去某个用户的账户余额</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBalance</span><span class="params">(String userName,<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;UPDATE account SET balance = balance - ? WHERE username =</span></span><br><span class="line"><span class="string">            ?&quot;</span>;</span><br><span class="line">            <span class="keyword">this</span>.jdbcTemplate.update(sql,price,userName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按照图书的isbn获取图书的价格</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getPrice</span><span class="params">(String isbn)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;SELECT price FROM book WHERE isbn = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.jdbcTemplate.queryForObject(sql,Integer.class,isbn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//减去图书的库存,每次减去1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStock</span><span class="params">(String isbn)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;UPDATE book_stock SET stock = stock-1 WHERE isbn = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate.update(sql,isbn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>新建一个BookService类，结账方法，调用减账户余额和减图书库存两个方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="comment">//结账方法，分为减库存，减余额两步操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkOut</span><span class="params">(String username,String isbn)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.减库存</span></span><br><span class="line">        <span class="keyword">this</span>.bookDao.updateStock(isbn);</span><br><span class="line">        System.out.println(<span class="string">&quot;减库存完成！&quot;</span>);</span><br><span class="line">        <span class="comment">//故意引入异常</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//根据isbn查询价格</span></span><br><span class="line">        Integer price = <span class="keyword">this</span>.bookDao.getPrice(isbn);</span><br><span class="line">        <span class="comment">//2.减账户余额</span></span><br><span class="line">        <span class="keyword">this</span>.bookDao.updateBalance(username,price);</span><br><span class="line">        System.out.println(<span class="string">&quot;结账完成!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>数据库配置文件db.properties和Spring配置文件applicationContext.xml：</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring?</span></span><br><span class="line"><span class="attr">useSSL</span>=<span class="string">false&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册jdbcTemplate，传入一个数据源即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    ApplicationContext ioc = <span class="keyword">new</span></span><br><span class="line">        ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BookService bookService = ioc.getBean(BookService.class);</span><br><span class="line">        bookService.checkOut(<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;ISBN-001&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果在减账户余额和减图书库存之间故意插入异常，则只会执行减余额操作，减库存未执行。</p>
<h2 id="2-声明式事务"><a href="#2-声明式事务" class="headerlink" title="2. 声明式事务"></a>2. 声明式事务</h2><h3 id="2-1-事务的ACID原则"><a href="#2-1-事务的ACID原则" class="headerlink" title="2.1 事务的ACID原则"></a>2.1 事务的ACID原则</h3><ul>
<li>原子性（Atomicity）： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部 完成，要么完全不起作用； </li>
<li>一致性（Consistency）： 执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是 相同的； </li>
<li>隔离性（Isolation）： 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之 间数据库是独立的； </li>
<li>持久性（Durability）： 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库 发生故障也不应该对其有任何影响。 </li>
</ul>
<h3 id="2-2-声明式事务配置"><a href="#2-2-声明式事务配置" class="headerlink" title="2.2 声明式事务配置"></a>2.2 声明式事务配置</h3><p>Spring提供了事务管理器，就可以在目标方法运行前后进行事务控制(事务切面)。这里使用 DataSourceTransaction。 </p>
<p>步骤： </p>
<ol>
<li>配置事务管理器让其进行事务控制，传入要控制哪个数据源 </li>
<li>开启基于注解的事务控制，依赖于tx名称空间，指定事务管理器的id </li>
<li>给事务方法加注解 @Transactional</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:t</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册jdbcTemplate，传入一个数据源即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器(切面)，DataSourceTransactionManager--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要控制哪个数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启基于注解的事务控制模式，指定事务管理器的id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>方法上加上注解 @Transactional</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkOut</span><span class="params">(String username,String isbn)</span> </span>&#123;</span><br><span class="line"><span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-事务细节"><a href="#3-事务细节" class="headerlink" title="3. 事务细节"></a>3. 事务细节</h2><ul>
<li>Isolation isolation() ：事务的隔离级别，默认为 Isolation.DEFAULT Propagation </li>
<li>propagation() ：事务的传播行为，默认为Propagation.REQUIRED </li>
<li>Class[] rollbackFor() ：哪些异常事务需要回滚，让本来不回滚的异常进行回滚 </li>
<li>String[] rollbackForClassName() ： </li>
<li>Class[] noRollbackFor() ：哪些异常事务可以不回滚，让本来回滚的异常不回滚 </li>
<li>String[] noRollbackForClassName() </li>
<li>int timeout() ：事务超出指定执行时长后自动终止并回滚，单位为秒 </li>
<li>boolean readOnly() ：设置事务为只读事务，加快查询速度，不用管事务那一堆操作。默认为 false 3.1 超时/只读</li>
</ul>
<h3 id="3-1-超时-只读"><a href="#3-1-超时-只读" class="headerlink" title="3.1 超时/只读"></a>3.1 超时/只读</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 3,readOnly = false)</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-rollbackFor-noRollbackFor"><a href="#3-2-rollbackFor-noRollbackFor" class="headerlink" title="3.2 rollbackFor/noRollbackFor"></a>3.2 rollbackFor/noRollbackFor</h3><p>运行时异常（非检查异常）：可以不用处理，默认都回滚 </p>
<p>编译时异常（检查异常）：要么try-catch，要么在方法上声明throws，默认不回滚 </p>
<ul>
<li>Class[] rollbackFor() ：哪些异常事务需要回滚，让本来不回滚的异常进行回滚 </li>
<li>Class[] noRollbackFor() ：哪些异常事务可以不回滚，让本来回滚的异常不回滚</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(noRollbackFor = &#123;ArithmeticException.class&#125;)</span></span><br></pre></td></tr></table></figure>

<p>算术运算异常，是运行时异常，本来默认回滚的，设置noRollbackFor属性后，就不回滚了。</p>
<h3 id="3-3-事务的隔离级别"><a href="#3-3-事务的隔离级别" class="headerlink" title="3.3 事务的隔离级别"></a>3.3 事务的隔离级别</h3><h4 id="01-事务并发运行带来的问题"><a href="#01-事务并发运行带来的问题" class="headerlink" title="01 事务并发运行带来的问题"></a>01 事务并发运行带来的问题</h4><p>多个事务并发运行，经常会操作相同的数据来完成各自的任务，能会导致以下的问题： </p>
<ul>
<li><strong>脏读（Dirty read):</strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到 数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提 交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确 的。 </li>
<li><strong>不可重复读（Unrepeatableread）:</strong> 指在一个事务内多次读同一数据。在这个事务还没有结束 时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改 导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样 的情况，因此称为不可重复读。 </li>
<li><strong>幻读（Phantom read）:</strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接 着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了 一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。 </li>
</ul>
<h4 id="02-SQL的隔离级别"><a href="#02-SQL的隔离级别" class="headerlink" title="02 SQL的隔离级别"></a>02 SQL的隔离级别</h4><p>SQL 标准定义了四个隔离级别： </p>
<ul>
<li><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，可能会 导致脏读、幻读或不可重复读。 </li>
<li><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻 读或不可重复读仍有可能发生。 </li>
<li><strong>REPEATABLE-READ(可重复读)：</strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务 自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。MySQL的InnoDB 存储引擎默认的。 </li>
<li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执 行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。 </li>
</ul>
<h4 id="03-Spring事务的隔离级别"><a href="#03-Spring事务的隔离级别" class="headerlink" title="03 Spring事务的隔离级别"></a>03 Spring事务的隔离级别</h4><p>TransactionDefinition 接口中定义了五个表示隔离级别的常量： </p>
<ul>
<li><strong>TransactionDefinition.ISOLATION_DEFAULT:</strong> 使用后端数据库默认的隔离级别，Mysql 默认采 用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别. </li>
<li><strong>TransactionDefinition.ISOLATION_READ_UNCOMMITTED:</strong> 最低的隔离级别，允许读取尚未 提交的数据变更，可能会导致脏读、幻读或不可重复读 </li>
<li><strong>TransactionDefinition.ISOLATION_READ_COMMITTED:</strong> 允许读取并发事务已经提交的数据， 可以阻止脏读，但是幻读或不可重复读仍有可能发生 </li>
<li><strong>TransactionDefinition.ISOLATION_REPEATABLE_READ:</strong> 对同一字段的多次读取结果都是一致 的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。 </li>
<li><strong>TransactionDefinition.ISOLATION_SERIALIZABLE:</strong> 最高的隔离级别，完全服从ACID的隔离级 别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止 脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。 </li>
</ul>
<h3 id="3-4-事务的传播行为"><a href="#3-4-事务的传播行为" class="headerlink" title="3.4 事务的传播行为"></a>3.4 事务的传播行为</h3><p>事务的传播行为，即如果有多个事务进行嵌套运行，子事务是否要和大事务公用一个事务。 当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。 </p>
<p><strong>支持当前事务的情况：</strong> </p>
<p><strong>TransactionDefinition.PROPAGATION_REQUIRED：</strong> 如果当前存在事务，则加入该事务；如 果当前没有事务，则创建一个新的事务。</p>
<p><strong>TransactionDefinition.PROPAGATION_SUPPORTS：</strong> 如果当前存在事务，则加入该事务；如 果当前没有事务，则以非事务的方式继续运行。 </p>
<p><strong>TransactionDefinition.PROPAGATION_MANDATORY：</strong> 如果当前存在事务，则加入该事务； 如果当前没有事务，则抛出异常。（mandatory：强制性） </p>
<p><strong>不支持当前事务的情况：</strong> </p>
<p><strong>TransactionDefinition.PROPAGATION_REQUIRES_NEW：</strong> 当前事务总是创建一个新的事务， 如果当前存在事务，则把当前事务挂起。 </p>
<p><strong>TransactionDefinition.PROPAGATION_NOT_SUPPORTED：</strong> 以非事务方式运行，如果当前存 在事务，则把当前事务挂起。 </p>
<p><strong>TransactionDefinition.PROPAGATION_NEVER：</strong> 以非事务方式运行，如果当前存在事务，则 抛出异常。 </p>
<p><strong>其他情况：</strong> </p>
<p><strong>TransactionDefinition.PROPAGATION_NESTED：</strong> 如果当前存在事务，则创建一个事务作为当 前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于 TransactionDefinition.PROPAGATION_REQUIRED。 </p>
<h3 id="3-5-案例"><a href="#3-5-案例" class="headerlink" title="3.5 案例"></a>3.5 案例</h3><p>REQUIRED：将之前事务用的connection传递给这个方法使用 </p>
<p>REQUIRES_NEW：这个方法直接使用新的connection </p>
<p>在BookDao类中再定义一个修改图书价格的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改图书价格</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePrice</span><span class="params">(String isbn,Integer price)</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;UPDATE book SET price=? where isbn =?&quot;</span>;</span><br><span class="line">    <span class="keyword">this</span>.jdbcTemplate.update(sql,price,isbn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>BookService类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改价格方法</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePrice</span><span class="params">(String isbn,Integer price)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bookDao.updatePrice(isbn, price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建一个MulService类，其中有一个声明了事务的方法，同时调用结账方法和修改价格的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MulService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mulTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//结账</span></span><br><span class="line">        <span class="keyword">this</span>.bookService.checkOut(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;ISBN-001&quot;</span>);</span><br><span class="line">        <span class="comment">//修改价格</span></span><br><span class="line">        <span class="keyword">this</span>.bookService.updatePrice(<span class="string">&quot;ISBN-002&quot;</span>, <span class="number">998</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="01-情况一"><a href="#01-情况一" class="headerlink" title="01 情况一"></a>01 情况一</h4><p>checkOut()方法和updatePrice()方法默认传播行为是REQUIRED，因为mulTx()方法存在事务，所以就加入它，所以如果一个方法崩了，<strong>则整体都会回滚</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结账 REQUIRED</span></span><br><span class="line"><span class="keyword">this</span>.bookService.checkOut(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;ISBN-001&quot;</span>);</span><br><span class="line"><span class="comment">//修改价格 REQUIRED</span></span><br><span class="line"><span class="keyword">this</span>.bookService.updatePrice(<span class="string">&quot;ISBN-002&quot;</span>, <span class="number">998</span>)</span><br></pre></td></tr></table></figure>

<p>大家都在一车上，一个翻车全翻车。</p>
<h4 id="02-情况二"><a href="#02-情况二" class="headerlink" title="02 情况二"></a>02 情况二</h4><p>checkOut()方法传播行为设置为REQUIRES_NEW，即自己去开个新事务，在updatePrice()方法中引入异常。 </p>
<p>相当于第一个方法开了新车，第二个方法跟主方法在一车上，翻车了并不影响第一个方法，因此结账执行完成了，修改价格会回滚。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结账 REQUIRES_NEW</span></span><br><span class="line"><span class="keyword">this</span>.bookService.checkOut(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;ISBN-001&quot;</span>);</span><br><span class="line"><span class="comment">//修改价格 REQUIRED</span></span><br><span class="line"><span class="keyword">this</span>.bookService.updatePrice(<span class="string">&quot;ISBN-002&quot;</span>, <span class="number">998</span>);</span><br></pre></td></tr></table></figure>

<h2 id="4-配置文件实现声明式事务"><a href="#4-配置文件实现声明式事务" class="headerlink" title="4. 配置文件实现声明式事务"></a>4. 配置文件实现声明式事务</h2><p>aop:config ：告诉Spring哪些方法是事务方法：事务切面按照外面的切入点表达式去切入事务方法 </p>
<p>tx:advice ：配置事务建议，切入上面的切入点</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xiao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入数据库配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:db.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册jdbcTemplate，传入一个数据源即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器(切面)，DataSourceTransactionManager--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--要控制哪个数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--结合AOP实现事务的织入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置事务属性，传播特性、超时时间等--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指明哪些方法是事务方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务切入，告诉Spring哪些方法是事务方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点，com.xiao.service包下的所有类的所有方法，只是说事务管理器要切入这些</span></span><br><span class="line"><span class="comment">方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPoint&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xiao.service.*.*</span></span></span><br><span class="line"><span class="string"><span class="tag">                                               (..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--事务建议，让事务管理器切面来切入这个切入点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPoint&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java后端</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springMVC</title>
    <url>/2021/08/25/springMVC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>​    springMVC相关笔记，介绍了springMVC从零开始到实战。前半段主要讲使用，最后一章节着重讲解springMVC源码。其中前端使用了thymeleaf、vue等技术。</p>
<p>​    配套视频使用更佳：<a href="https://www.bilibili.com/video/BV1Ry4y1574R?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1Ry4y1574R?spm_id_from=333.999.0.0</a></p>
<p>​    更多b站java自学视频收藏：<a href="https://space.bilibili.com/8383710/favlist?fid=1335661810&amp;ftype=create">https://space.bilibili.com/8383710/favlist?fid=1335661810&amp;ftype=create</a></p>
<span id="more"></span>

<h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><h3 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p>
<p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p>
<p>JavaBean分为两类：</p>
<ul>
<li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li>
<li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li>
</ul>
<p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p>
<p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p>
<p>MVC的工作流程：<br>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p>
<h3 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p>
<p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p>
<blockquote>
<p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p>
</blockquote>
<h3 id="3、SpringMVC的特点"><a href="#3、SpringMVC的特点" class="headerlink" title="3、SpringMVC的特点"></a>3、SpringMVC的特点</h3><ul>
<li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li>
<li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li>
<li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li>
<li><strong>代码清新简洁</strong>，大幅度提升开发效率</li>
<li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li>
<li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li>
</ul>
<h1 id="二、HelloWorld"><a href="#二、HelloWorld" class="headerlink" title="二、HelloWorld"></a>二、HelloWorld</h1><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>IDE：idea 2019.2</p>
<p>构建工具：maven3.5.4</p>
<p>服务器：tomcat7</p>
<p>Spring版本：5.3.1</p>
<h3 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h3><h5 id="a-gt-添加web模块"><a href="#a-gt-添加web模块" class="headerlink" title="a&gt;添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-gt-打包方式：war"><a href="#b-gt-打包方式：war" class="headerlink" title="b&gt;打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-gt-引入依赖"><a href="#c-gt-引入依赖" class="headerlink" title="c&gt;引入依赖"></a>c&gt;引入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">123456789101112131415161718192021222324252627282930</span><br></pre></td></tr></table></figure>

<p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。<br><img src="https://img-blog.csdnimg.cn/836b26dcd15140e486cb3a566abcc2b0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1MTQzNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><p>注册SpringMVC的前端控制器DispatcherServlet</p>
<h5 id="a-gt-默认配置方式"><a href="#a-gt-默认配置方式" class="headerlink" title="a&gt;默认配置方式"></a>a&gt;默认配置方式</h5><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<servlet-name>-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</servlet-name></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">1234567891011121314</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-扩展配置方式"><a href="#b-gt-扩展配置方式" class="headerlink" title="b&gt;扩展配置方式"></a>b&gt;扩展配置方式</h5><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 		作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">		而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">		因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">123456789101112131415161718192021222324252627</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p><url-pattern>标签中使用/和/*的区别：</url-pattern></p>
<p>/所匹配的请求可以是/login或.html或.js或.css方式的请求路径，但是/不能匹配.jsp请求路径的请求</p>
<p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p>
<p>/*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用/*的写法</p>
</blockquote>
<h3 id="4、创建请求控制器"><a href="#4、创建请求控制器" class="headerlink" title="4、创建请求控制器"></a>4、创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p>
<p>请求控制器中每一个处理请求的方法成为控制器方法</p>
<p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>

<h3 id="5、创建springMVC的配置文件"><a href="#5、创建springMVC的配置文件" class="headerlink" title="5、创建springMVC的配置文件"></a>5、创建springMVC的配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、测试HelloWorld"><a href="#6、测试HelloWorld" class="headerlink" title="6、测试HelloWorld"></a>6、测试HelloWorld</h3><h5 id="a-gt-实现对首页的访问"><a href="#a-gt-实现对首页的访问" class="headerlink" title="a&gt;实现对首页的访问"></a>a&gt;实现对首页的访问</h5><p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-通过超链接跳转到指定页面"><a href="#b-gt-通过超链接跳转到指定页面" class="headerlink" title="b&gt;通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h5><p>在主页index.html中设置超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在请求控制器中创建处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">HelloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p>
<h1 id="三、-RequestMapping注解"><a href="#三、-RequestMapping注解" class="headerlink" title="三、@RequestMapping注解"></a>三、@RequestMapping注解</h1><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p>
<p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p>
<h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p>
<p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p>
<p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p>
<p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">12</span><br><span class="line">@RequestMapping(</span><br><span class="line">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span><br><span class="line">)</span><br><span class="line">public String testRequestMapping()&#123;</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p>
<p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p>
<p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">1234</span><br><span class="line">@RequestMapping(</span><br><span class="line">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span><br><span class="line">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><br><span class="line">)</span><br><span class="line">public String testRequestMapping()&#123;</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p>
<p>处理get请求的映射–&gt;@GetMapping</p>
<p>处理post请求的映射–&gt;@PostMapping</p>
<p>处理put请求的映射–&gt;@PutMapping</p>
<p>处理delete请求的映射–&gt;@DeleteMapping</p>
<p>2、常用的请求方式有get，post，put，delete</p>
<p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p>
<p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p>
</blockquote>
<h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p>
<p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p>
<p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p>
<p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p>
<p>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</p>
<p>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">1</span><br><span class="line">@RequestMapping(</span><br><span class="line">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span><br><span class="line">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><br><span class="line">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span><br><span class="line">)</span><br><span class="line">public String testRequestMapping()&#123;</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!=123456” not met for actual request parameters: username={admin}, password={123456}</p>
</blockquote>
<h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p>
<p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p>
<p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p>
<p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p>
<p>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value</p>
<p>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</p>
<p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p>
<h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p>
<p>*：表示任意的0个或多个字符</p>
<p>**：表示任意的一层或多层目录</p>
<p>注意：在使用<strong>时，只能使用/</strong>/xxx的方式</p>
<h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：/deleteUser?id=1</p>
<p>rest方式：/deleteUser/1</p>
<p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">1</span><br><span class="line">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span><br><span class="line">public String testRest(@PathVariable(&quot;id&quot;) String id, @PathVariable(&quot;username&quot;) String username)&#123;</span><br><span class="line">    System.out.println(&quot;id:&quot;+id+&quot;,username:&quot;+username);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//最终输出的内容为--&gt;id:1,username:admin</span><br></pre></td></tr></table></figure>

<h1 id="四、SpringMVC获取请求参数"><a href="#四、SpringMVC获取请求参数" class="headerlink" title="四、SpringMVC获取请求参数"></a>四、SpringMVC获取请求参数</h1><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">1</span><br><span class="line">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="line">public String testParam(String username, String password)&#123;</span><br><span class="line">    System.out.println(&quot;username:&quot;+username+&quot;,password:&quot;+password);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p>
<p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p>
<p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p>
</blockquote>
<h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam"></a>3、@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p>
<p>@RequestParam注解一共有三个属性：</p>
<p>value：指定为形参赋值的请求参数的参数名</p>
<p>required：设置是否必须传输此请求参数，默认值为true</p>
<p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p>
<p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p>
<h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、@RequestHeader"></a>4、@RequestHeader</h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p>
<p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue"></a>5、@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p>
<p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p>
<h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">@RequestMapping(&quot;/testpojo&quot;)</span><br><span class="line">public String testPOJO(User user)&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p>
</blockquote>
<h1 id="五、域对象共享数据"><a href="#五、域对象共享数据" class="headerlink" title="五、域对象共享数据"></a>五、域对象共享数据</h1><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testServletAPI</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用ModelAndView向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModel</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelMap</span><span class="params">(ModelMap modelMap)</span></span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Model&#123;&#125;</span><br><span class="line">public class ModelMap extends LinkedHashMap&lt;String, Object&gt; &#123;&#125;</span><br><span class="line">public class ExtendedModelMap extends ModelMap implements Model &#123;&#125;</span><br><span class="line">public class BindingAwareModelMap extends ExtendedModelMap &#123;&#125;</span><br><span class="line">1234</span><br></pre></td></tr></table></figure>

<h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testSession</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testApplication</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">	ServletContext application = session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="六、SpringMVC的视图"><a href="#六、SpringMVC的视图" class="headerlink" title="六、SpringMVC的视图"></a>六、SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p>
<p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p>
<p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p>
<p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p>
<h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/781f6b299e6b41a8b006866ecbcb76ba.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1MTQzNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p>
<p>SpringMVC中创建转发视图的情况：</p>
<p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p>
<p>例如”forward:/“，“forward:/employee”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/71526c269bbb447b8701d906b2859965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1MTQzNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p>
<p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p>
<p>例如”redirect:/“，“redirect:/employee”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/ec5b5371ea804cafb27e2751231df362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1MTQzNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<blockquote>
<p>注：</p>
<p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p>
</blockquote>
<h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">	view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p>
<p>&lt;mvc:annotation-driven /&gt;</p>
</blockquote>
<h1 id="七、RESTful"><a href="#七、RESTful" class="headerlink" title="七、RESTful"></a>七、RESTful</h1><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p>
<h5 id="a-gt-资源"><a href="#a-gt-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p>
<h5 id="b-gt-资源的表述"><a href="#b-gt-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p>
<h5 id="c-gt-状态转移"><a href="#c-gt-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p>
<h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p>
<p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p>
<p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>传统方式</th>
<th>REST风格</th>
</tr>
</thead>
<tbody><tr>
<td>查询操作</td>
<td>getUserById?id=1</td>
<td>user/1–&gt;get请求方式</td>
</tr>
<tr>
<td>保存操作</td>
<td>saveUser</td>
<td>user–&gt;post请求方式</td>
</tr>
<tr>
<td>删除操作</td>
<td>deleteUser?id=1</td>
<td>user/1–&gt;delete请求方式</td>
</tr>
<tr>
<td>更新操作</td>
<td>updateUser</td>
<td>user–&gt;put请求方式</td>
</tr>
</tbody></table>
<h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p>
<p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p>
<p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p>
<p>a&gt;当前请求的请求方式必须为post</p>
<p>b&gt;当前请求必须传输请求参数_method</p>
<p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p>
<p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p>
<p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p>
<p>原因：</p>
<ul>
<li><p>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的</p>
</li>
<li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p>
</li>
<li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p>
</li>
<li><p>```<br>String paramValue = request.getParameter(this.methodParam);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 八、RESTful案例</span><br><span class="line"></span><br><span class="line">### 1、准备工作</span><br><span class="line"></span><br><span class="line">和传统 CRUD 一样，实现对员工信息的增删改查。</span><br><span class="line"></span><br><span class="line">- 搭建环境</span><br><span class="line"></span><br><span class="line">- 准备实体类</span><br><span class="line"></span><br><span class="line"> ```java</span><br><span class="line"> package com.atguigu.mvc.bean;</span><br><span class="line"> </span><br><span class="line"> public class Employee &#123;</span><br><span class="line"> </span><br><span class="line">    private Integer id;</span><br><span class="line">    private String lastName;</span><br><span class="line"> </span><br><span class="line">    private String email;</span><br><span class="line">    //1 male, 0 female</span><br><span class="line">    private Integer gender;</span><br><span class="line">    </span><br><span class="line">    public Integer getId() &#123;</span><br><span class="line">       return id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setId(Integer id) &#123;</span><br><span class="line">       this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getLastName() &#123;</span><br><span class="line">       return lastName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setLastName(String lastName) &#123;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">       return email;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">       this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Integer getGender() &#123;</span><br><span class="line">       return gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void setGender(Integer gender) &#123;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Employee(Integer id, String lastName, String email, Integer gender) &#123;</span><br><span class="line">       super();</span><br><span class="line">       this.id = id;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">       this.email = email;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public Employee() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<ul>
<li><p>准备dao模拟数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.mvc.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="keyword">null</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">      employees = <span class="keyword">new</span> HashMap&lt;Integer, Employee&gt;();</span><br><span class="line"></span><br><span class="line">      employees.put(<span class="number">1001</span>, <span class="keyword">new</span> Employee(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1002</span>, <span class="keyword">new</span> Employee(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">      employees.put(<span class="number">1003</span>, <span class="keyword">new</span> Employee(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1004</span>, <span class="keyword">new</span> Employee(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">      employees.put(<span class="number">1005</span>, <span class="keyword">new</span> Employee(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Integer initId = <span class="number">1006</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(employee.getId() == <span class="keyword">null</span>)&#123;</span><br><span class="line">         employee.setId(initId++);</span><br><span class="line">      &#125;</span><br><span class="line">      employees.put(employee.getId(), employee);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title">getAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.values();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> employees.get(id);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">      employees.remove(id);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3><table>
<thead>
<tr>
<th>功能</th>
<th>URL 地址</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>访问首页√</td>
<td>/</td>
<td>GET</td>
</tr>
<tr>
<td>查询全部数据√</td>
<td>/employee</td>
<td>GET</td>
</tr>
<tr>
<td>删除√</td>
<td>/employee/2</td>
<td>DELETE</td>
</tr>
<tr>
<td>跳转到添加数据页面√</td>
<td>/toAdd</td>
<td>GET</td>
</tr>
<tr>
<td>执行保存√</td>
<td>/employee</td>
<td>POST</td>
</tr>
<tr>
<td>跳转到更新数据页面√</td>
<td>/employee/2</td>
<td>GET</td>
</tr>
<tr>
<td>执行更新√</td>
<td>/employee</td>
<td>PUT</td>
</tr>
</tbody></table>
<h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-gt-配置view-controller"><a href="#a-gt-配置view-controller" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建页面"><a href="#b-gt-创建页面" class="headerlink" title="b&gt;创建页面"></a>b&gt;创建页面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-gt-控制器方法"><a href="#a-gt-控制器方法" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmployeeList</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建employee-list-html"><a href="#b-gt-创建employee-list-html" class="headerlink" title="b&gt;创建employee_list.html"></a>b&gt;创建employee_list.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-gt-创建处理delete请求方式的表单"><a href="#a-gt-创建处理delete请求方式的表单" class="headerlink" title="a&gt;创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-删除超链接绑定点击事件"><a href="#b-gt-删除超链接绑定点击事件" class="headerlink" title="b&gt;删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>删除超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过vue处理点击事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//event表示当前事件</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">deleteEmployee</span>:<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//通过id获取表单标签</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> delete_form = <span class="built_in">document</span>.getElementById(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class="line"><span class="javascript">                delete_form.action = event.target.href;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//提交表单</span></span></span><br><span class="line"><span class="javascript">                delete_form.submit();</span></span><br><span class="line"><span class="javascript">                <span class="comment">//阻止超链接的默认跳转行为</span></span></span><br><span class="line"><span class="javascript">                event.preventDefault();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="c-gt-控制器方法"><a href="#c-gt-控制器方法" class="headerlink" title="c&gt;控制器方法"></a>c&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-gt-配置view-controller-1"><a href="#a-gt-配置view-controller-1" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建employee-add-html"><a href="#b-gt-创建employee-add-html" class="headerlink" title="b&gt;创建employee_add.html"></a>b&gt;创建employee_add.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-gt-控制器方法-1"><a href="#a-gt-控制器方法-1" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addEmployee</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-gt-修改超链接"><a href="#a-gt-修改超链接" class="headerlink" title="a&gt;修改超链接"></a>a&gt;修改超链接</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="b-gt-控制器方法"><a href="#b-gt-控制器方法" class="headerlink" title="b&gt;控制器方法"></a>b&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span></span>&#123;</span><br><span class="line">    Employee employee = employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c-gt-创建employee-update-html"><a href="#c-gt-创建employee-update-html" class="headerlink" title="c&gt;创建employee_update.html"></a>c&gt;创建employee_update.html</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Update Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">    lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span></span><br><span class="line"><span class="comment">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-gt-控制器方法-2"><a href="#a-gt-控制器方法-2" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateEmployee</span><span class="params">(Employee employee)</span></span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="八、HttpMessageConverter"><a href="#八、HttpMessageConverter" class="headerlink" title="八、HttpMessageConverter"></a>八、HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p>
<p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p>
<p>ResponseEntity</p>
<h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">12345</span><br><span class="line">@RequestMapping(&quot;/testRequestBody&quot;)</span><br><span class="line">public String testRequestBody(@RequestBody String requestBody)&#123;</span><br><span class="line">    System.out.println(&quot;requestBody:&quot;+requestBody);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>requestBody:username=admin&amp;password=123456</p>
<h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestEntity</span><span class="params">(RequestEntity&lt;String&gt; requestEntity)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestEntity.getBody());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：<br>requestHeader:[host:“localhost:8080”, connection:“keep-alive”, content-length:“27”, cache-control:“max-age=0”, sec-ch-ua:”” Not A;Brand”;v=“99”, “Chromium”;v=“90”, “Google Chrome”;v=“90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:“1”, origin:“<a href="http://localhost:8080”">http://localhost:8080”</a>, user-agent:“Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36”]<br>requestBody:username=admin&amp;password=123</p>
<h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testResponseBody</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：浏览器页面显示success</p>
<h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>@ResponseBody处理json的步骤：</p>
<p>a&gt;导入jackson的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven /&gt;</span><br></pre></td></tr></table></figure>

<p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p>
<p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseUser&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testResponseUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="number">1001</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>浏览器的页面中展示的结果：</p>
<p>{“id”:1001,“username”:“admin”,“password”:“123456”,“age”:23,“sex”:“男”}</p>
<h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;通过vue和axios处理点击事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">testAjax</span>:<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                axios(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>:event.target.href,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">password</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(response.data);</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">                event.preventDefault();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c&gt;控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testAjax</span><span class="params">(String username, String password)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,ajax&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p>
<h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p>
<h1 id="九、文件上传和下载"><a href="#九、文件上传和下载" class="headerlink" title="九、文件上传和下载"></a>九、文件上传和下载</h1><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    String realPath = servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    HttpStatus statusCode = HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(bytes, headers, statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype=“multipart/form-data”</p>
<p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p>
<p>上传步骤：</p>
<p>a&gt;添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>b&gt;在SpringMVC的配置文件中添加配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>c&gt;控制器方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    String fileName = photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    String hzName = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    String photoPath = servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    String finalPath = photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> File(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p>
<p>SpringMVC中的拦截器需要实现HandlerInterceptor</p>
<p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p>
<p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p>
<p>postHandle：控制器方法执行之后执行postHandle()</p>
<p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p>
<h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的preHandle()都返回true</p>
<p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p>
<p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p>
<p>b&gt;若某个拦截器的preHandle()返回了false</p>
<p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p>
<h1 id="十一、异常处理器"><a href="#十一、异常处理器" class="headerlink" title="十一、异常处理器"></a>十一、异常处理器</h1><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p>
<p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p>
<p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        		properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">        		properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">        	--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十二、注解配置SpringMVC"><a href="#十二、注解配置SpringMVC" class="headerlink" title="十二、注解配置SpringMVC"></a>十二、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p>
<h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebInit</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        CharacterEncodingFilter encodingFilter = <span class="keyword">new</span> CharacterEncodingFilter();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="keyword">true</span>);</span><br><span class="line">        HiddenHttpMethodFilter hiddenHttpMethodFilter = <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Filter[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">	<span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonsMultipartResolver <span class="title">multipartResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonsMultipartResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        FirstInterceptor firstInterceptor = <span class="keyword">new</span> FirstInterceptor();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">        Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">        //设置异常映射</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">        //设置共享异常信息的键</span></span><br><span class="line"><span class="comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">        resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ITemplateResolver <span class="title">templateResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebApplicationContext webApplicationContext = ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">        <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">        ServletContextTemplateResolver templateResolver = <span class="keyword">new</span> ServletContextTemplateResolver(</span><br><span class="line">                webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> </span>&#123;</span><br><span class="line">        SpringTemplateEngine templateEngine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> </span>&#123;</span><br><span class="line">        ThymeleafViewResolver viewResolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul>
<li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p>
<ul>
<li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p>
<ul>
<li>Handler：<strong>处理器</strong>，需要工程师开发</li>
</ul>
<p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p>
<ul>
<li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p>
<ul>
<li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li>
</ul>
<p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p>
<ul>
<li>View：<strong>视图</strong></li>
</ul>
<p>作用：将模型数据通过页面展示给用户</p>
<h3 id="2、DispatcherServlet初始化过程"><a href="#2、DispatcherServlet初始化过程" class="headerlink" title="2、DispatcherServlet初始化过程"></a>2、DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-kphToPhs-1627992919015)(img/img005.png)]</p>
<h5 id="a-gt-初始化WebApplicationContext"><a href="#a-gt-初始化WebApplicationContext" class="headerlink" title="a&gt;初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WebApplicationContext rootContext =</span><br><span class="line">        WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    WebApplicationContext wac = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">        wac = <span class="keyword">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                <span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                    <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                    cwac.setParent(rootContext);</span><br><span class="line">                &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">        <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">        <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">        wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">        <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">        <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        String attrName = getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-创建WebApplicationContext"><a href="#b-gt-创建WebApplicationContext" class="headerlink" title="b&gt;创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</span><br><span class="line">            <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">            <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">            <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    ConfigurableWebApplicationContext wac =</span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    String configLocation = getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="keyword">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c-gt-DispatcherServlet初始化策略"><a href="#c-gt-DispatcherServlet初始化策略" class="headerlink" title="c&gt;DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p>
<p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">   initMultipartResolver(context);</span><br><span class="line">   initLocaleResolver(context);</span><br><span class="line">   initThemeResolver(context);</span><br><span class="line">   initHandlerMappings(context);</span><br><span class="line">   initHandlerAdapters(context);</span><br><span class="line">   initHandlerExceptionResolvers(context);</span><br><span class="line">   initRequestToViewNameTranslator(context);</span><br><span class="line">   initViewResolvers(context);</span><br><span class="line">   initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、DispatcherServlet调用组件处理请求"><a href="#3、DispatcherServlet调用组件处理请求" class="headerlink" title="3、DispatcherServlet调用组件处理请求"></a>3、DispatcherServlet调用组件处理请求</h3><h5 id="a-gt-processRequest"><a href="#a-gt-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p>
<p>所在类：org.springframework.web.servlet.FrameworkServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line">    LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</span><br><span class="line"></span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="b-gt-doService"><a href="#b-gt-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    logRequest(request);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            String attrName = (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.flashMapManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">        FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RequestPath requestPath = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="c-gt-doDispatch"><a href="#c-gt-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    HttpServletRequest processedRequest = request;</span><br><span class="line">    HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">        Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            	mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">            	handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">            	interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">            	interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">           	<span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            String method = request.getMethod();</span><br><span class="line">            <span class="keyword">boolean</span> isGet = <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 后续处理：处理模型数据和渲染视图</span></span><br><span class="line">        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line">                               <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler processing failed&quot;</span>, err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="d-gt-processDispatchResult"><a href="#d-gt-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、SpringMVC的执行流程"><a href="#4、SpringMVC的执行流程" class="headerlink" title="4、SpringMVC的执行流程"></a>4、SpringMVC的执行流程</h3><ol>
<li>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</li>
<li>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</li>
</ol>
<p>a) 不存在</p>
<p>i. 再判断是否配置了mvc:default-servlet-handler</p>
<p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p>
<p><img src="https://img-blog.csdnimg.cn/8df6a30e77184eb0bc1547dae5838f65.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1MTQzNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p>
<p><img src="https://img-blog.csdnimg.cn/67d25736b3b74dfe9145acedb0e8656d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc1MTQzNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>b) 存在则执行下面的流程</p>
<ol>
<li>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</li>
<li>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</li>
<li>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</li>
<li>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</li>
</ol>
<p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p>
<p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p>
<p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p>
<p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p>
<ol>
<li>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</li>
<li>此时将开始执行拦截器的postHandle(…)方法【逆向】。</li>
<li>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。</li>
<li>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</li>
<li>将渲染结果返回给客户端。</li>
</ol>
]]></content>
      <categories>
        <category>java后端</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springBoot</title>
    <url>/2021/09/01/springBoot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​    springBoot相关知识，深入源码，本文章是使用尚硅谷笔记结合我自己总结的内容。</p>
<p>​    配套视频使用更佳：<a href="https://www.bilibili.com/video/BV19K4y1L7MT?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV19K4y1L7MT?spm_id_from=333.999.0.0</a></p>
<p>​    更多b站java自学视频收藏：<a href="https://space.bilibili.com/8383710/favlist?fid=1335661810&amp;ftype=create">https://space.bilibili.com/8383710/favlist?fid=1335661810&amp;ftype=create</a></p>
<span id="more"></span>

<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="01、SpringBoot2入门"><a href="#01、SpringBoot2入门" class="headerlink" title="01、SpringBoot2入门"></a>01、SpringBoot2入门</h2><h3 id="1、系统要求"><a href="#1、系统要求" class="headerlink" title="1、系统要求"></a>1、系统要求</h3><ul>
<li><p><a href="https://www.java.com/">Java 8</a> &amp; 兼容java14 .</p>
</li>
<li><p>Maven 3.3+</p>
</li>
<li><p>idea 2019.1.2</p>
</li>
</ul>
<h3 id="2、-HelloWorld"><a href="#2、-HelloWorld" class="headerlink" title="2、 HelloWorld"></a>2、 HelloWorld</h3><p>需求：浏览发送/hello请求，响应Hello，Spring Boot 2 </p>
<h4 id="2-1、引入依赖"><a href="#2-1、引入依赖" class="headerlink" title="2.1、引入依赖"></a>2.1、引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2、创建主程序"><a href="#2-2、创建主程序" class="headerlink" title="2.2、创建主程序"></a>2.2、创建主程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主程序类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span>：这是一个SpringBoot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4、编写业务"><a href="#2-4、编写业务" class="headerlink" title="2.4、编写业务"></a>2.4、编写业务</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 2!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>这里<code>@RestController</code>等于<code>@ResponseBody</code>加<code>@Controller</code></p>
<p>其中<code>@ResponseBody</code>注解的作用是将controller的方法返回的对象 通过适当的转换器 转换为指定的格式之后，写入到response对象的body区（响应体中），通常用来返回JSON数据或者是XML。</p>
<h4 id="2-5、测试"><a href="#2-5、测试" class="headerlink" title="2.5、测试"></a>2.5、测试</h4><p>直接运行main方法</p>
<h4 id="2-6、简化配置"><a href="#2-6、简化配置" class="headerlink" title="2.6、简化配置"></a>2.6、简化配置</h4><p>application.properties</p>
<p>官网说明地址：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server.port=8888</span><br></pre></td></tr></table></figure>

<h4 id="2-7、简化部署"><a href="#2-7、简化部署" class="headerlink" title="2.7、简化部署"></a>2.7、简化部署</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">       &lt;plugins&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br><span class="line">       &lt;/plugins&gt;</span><br><span class="line">   &lt;/build&gt;</span><br></pre></td></tr></table></figure>

<p>把项目打成jar包，直接在目标服务器执行即可。</p>
<p>注意点：</p>
<ul>
<li>取消掉cmd的快速编辑模式</li>
</ul>
<h2 id="02、了解自动配置原理"><a href="#02、了解自动配置原理" class="headerlink" title="02、了解自动配置原理"></a>02、了解自动配置原理</h2><h3 id="1、SpringBoot特点"><a href="#1、SpringBoot特点" class="headerlink" title="1、SpringBoot特点"></a>1、SpringBoot特点</h3><h4 id="1-1、依赖管理"><a href="#1-1、依赖管理" class="headerlink" title="1.1、依赖管理"></a>1.1、依赖管理</h4><ul>
<li>父项目做依赖管理</li>
</ul>
<p>作用：用于控制后续依赖的版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">依赖管理    </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">他的父项目</span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">几乎声明了所有开发中常用的依赖的版本号,自动版本仲裁机制</span><br></pre></td></tr></table></figure>

<ul>
<li>开发导入starter场景启动器</li>
</ul>
<p>1、见到很多 spring-boot-starter-* ： *就代表某种场景<br>2、只要引入starter，这个场景的所有常规需要的依赖我们都自动引入<br>3、SpringBoot所有支持的场景：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a><br>4、见到的  * <em>-spring-boot-starter： 第三方为我们提供的简化开发的场景启动器。（</em> * 不能是springboot）<br>5、所有场景启动器最底层的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>无需关注版本号，自动版本仲裁</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、引入依赖默认都可以不写版本</span><br><span class="line">2、引入非版本仲裁的jar，要写版本号。（即不在spring-boot-dependencies中的jar）</span><br></pre></td></tr></table></figure>

<ul>
<li>可以修改默认版本号</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1、查看spring-boot-dependencies里面规定当前依赖的版本用的 key。</span><br><span class="line">2、在当前项目里面重写配置</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2、自动配置"><a href="#1-2、自动配置" class="headerlink" title="1.2、自动配置"></a>1.2、自动配置</h4><ul>
<li><p>自动配好Tomcat</p>
</li>
<li><ul>
<li>引入Tomcat依赖。</li>
<li>配置Tomcat</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>自动配好SpringMVC</p>
</li>
<li><ul>
<li>引入SpringMVC全套组件</li>
<li>自动配好SpringMVC常用组件（功能）</li>
</ul>
</li>
<li><p>自动配好Web常见功能，如：字符编码问题</p>
</li>
<li><ul>
<li>SpringBoot帮我们配置好了所有web开发的常见场景(在<code>ConfigurableApplicationContext</code>中)</li>
</ul>
</li>
<li><p>```<br>ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 默认的包结构</span><br><span class="line"></span><br><span class="line">- - 主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</span><br><span class="line">  - 无需以前的包扫描配置</span><br><span class="line"></span><br><span class="line">- - 想要改变扫描路径，@SpringBootApplication(scanBasePackages=**&quot;com.atguigu&quot;**)</span><br><span class="line"></span><br><span class="line">- - - 或者@ComponentScan 指定扫描路径</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>主程序入口的注解<br>@SpringBootApplication<br>等同于<br>@SpringBootConfiguration<br>@EnableAutoConfiguration<br>@ComponentScan(“com.atguigu.boot”)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 各种配置拥有默认值</span><br><span class="line"></span><br><span class="line">- - 默认配置最终都是映射到某个类上，如：MultipartProperties</span><br><span class="line">  - 配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</span><br><span class="line"></span><br><span class="line">- 按需加载所有自动配置项</span><br><span class="line"></span><br><span class="line">- - 非常多的starter</span><br><span class="line">  - 引入了哪些场景这个场景的自动配置才会开启</span><br><span class="line"></span><br><span class="line">- - SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</span><br><span class="line">  - </span><br><span class="line"></span><br><span class="line">- ......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2、容器功能</span><br><span class="line"></span><br><span class="line">#### 2.1、组件添加</span><br><span class="line"></span><br><span class="line">##### 1、@Configuration</span><br><span class="line"></span><br><span class="line">两个功能：</span><br><span class="line"></span><br><span class="line">1加入容器中。</span><br><span class="line"></span><br><span class="line">2告诉springBoot这是一个配置类</span><br><span class="line"></span><br><span class="line">- 基本使用</span><br><span class="line">- **Full模式与Lite模式**</span><br><span class="line"></span><br><span class="line">- - 示例</span><br><span class="line">  - 最佳实战</span><br><span class="line"></span><br><span class="line">- - - 配置 类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断</span><br><span class="line">    - 配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式</span><br><span class="line"></span><br><span class="line">`@Configuration`注解的使用</span><br><span class="line"></span><br><span class="line"> * 1、配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的</span><br><span class="line"> * 2、配置类本身也是组件</span><br><span class="line"> * 3、proxyBeanMethods：代理bean的方法</span><br><span class="line"> * Full(proxyBeanMethods = true)【保证每个@Bean方法被调用多少次返回的组件都是单实例的】</span><br><span class="line"> * Lite(proxyBeanMethods = false)【每个@Bean方法被调用多少次返回的组件都是新创建的】</span><br><span class="line"> * 组件依赖必须使用Full模式默认。其他默认是否Lite模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">告诉SpringBoot这是一个配置类 == 配置文件</span><br><span class="line"></span><br><span class="line">配置类的代码：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Configuration(proxyBeanMethods = false) </span><br><span class="line">public class MyConfig &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean //给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span><br><span class="line">    public User user01()&#123;</span><br><span class="line">        User zhangsan = new User(&quot;zhangsan&quot;, 18);</span><br><span class="line">        //user组件依赖了Pet组件</span><br><span class="line">        zhangsan.setPet(tomcatPet());</span><br><span class="line">        return zhangsan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;tom&quot;)</span><br><span class="line">    public Pet tomcatPet()&#123;</span><br><span class="line">        return new Pet(&quot;tomcat&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>@Configuration测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.boot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">        String[] names = run.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 从容器中获取组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.boot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回我们IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line">        Pet tom01 = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line">        </span><br><span class="line">        Pet tom02 = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;组件：&quot;</span>+(tom01 == tom02));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//容器类本身也是组件。输出结果：com.atguigu.boot.config.MyConfig$$EnhancerBySpringCGLIB$$51f1e1ca@1654a892</span></span><br><span class="line">        MyConfig bean = run.getBean(MyConfig.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果@Configuration(proxyBeanMethods = true)代理对象调用方法。SpringBoot总会检查这个组件是否在容器中有。</span></span><br><span class="line">        <span class="comment">//保持组件单实例</span></span><br><span class="line">        User user = bean.user01();</span><br><span class="line">        User user1 = bean.user01();</span><br><span class="line">        System.out.println(user == user1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        User user01 = run.getBean(<span class="string">&quot;user01&quot;</span>, User.class);</span><br><span class="line">        Pet tom = run.getBean(<span class="string">&quot;tom&quot;</span>, Pet.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;用户的宠物：&quot;</span>+(user01.getPet() == tom));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2、-Bean、-Component、-Controller、-Service、-Repository"><a href="#2、-Bean、-Component、-Controller、-Service、-Repository" class="headerlink" title="2、@Bean、@Component、@Controller、@Service、@Repository"></a>2、@Bean、@Component、@Controller、@Service、@Repository</h5><h5 id="3、-ComponentScan、-Import"><a href="#3、-ComponentScan、-Import" class="headerlink" title="3、@ComponentScan、@Import"></a>3、@ComponentScan、@Import</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* <span class="number">4</span>、<span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line">    *      给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</span><br><span class="line">    */</span><br><span class="line">    <span class="meta">@Import(&#123;User.class, DBHelper.class&#125;)</span></span><br><span class="line">    <span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>@Import 高级用法： <a href="https://www.bilibili.com/video/BV1gW411W7wy?p=8">https://www.bilibili.com/video/BV1gW411W7wy?p=8</a></p>
<h5 id="4、-Conditional"><a href="#4、-Conditional" class="headerlink" title="4、@Conditional"></a>4、@Conditional</h5><p>条件装配：满足Conditional指定的条件，则进行组件注入</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1602835786727-28b6f936-62f5-4fd6-a6c5-ae690bd1e31d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">=====================测试条件装配==========================</span><br><span class="line">    <span class="meta">@Configuration(proxyBeanMethods = false)</span> <span class="comment">//告诉SpringBoot这是一个配置类 == 配置文件</span></span><br><span class="line">    <span class="comment">//@ConditionalOnBean(name = &quot;tom&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(name = &quot;tom&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Full:外部无论对配置类中的这个组件注册方法调用多少次获取的都是之前注册容器中的单实例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span> <span class="comment">//给容器中添加组件。以方法名作为组件的id。返回类型就是组件类型。返回的值，就是组件在容器中的实例</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">user01</span><span class="params">()</span></span>&#123;</span><br><span class="line">            User zhangsan = <span class="keyword">new</span> User(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">            <span class="comment">//user组件依赖了Pet组件</span></span><br><span class="line">            zhangsan.setPet(tomcatPet());</span><br><span class="line">            <span class="keyword">return</span> zhangsan;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean(&quot;tom22&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Pet <span class="title">tomcatPet</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Pet(<span class="string">&quot;tomcat&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、返回我们IOC容器</span></span><br><span class="line">    ConfigurableApplicationContext run = SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、查看容器里面的组件</span></span><br><span class="line">    String[] names = run.getBeanDefinitionNames();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> tom = run.containsBean(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中Tom组件：&quot;</span>+tom);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> user01 = run.containsBean(<span class="string">&quot;user01&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中user01组件：&quot;</span>+user01);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> tom22 = run.containsBean(<span class="string">&quot;tom22&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;容器中tom22组件：&quot;</span>+tom22);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2、原生配置文件引入"><a href="#2-2、原生配置文件引入" class="headerlink" title="2.2、原生配置文件引入"></a>2.2、原生配置文件引入</h4><h5 id="1、-ImportResource"><a href="#1、-ImportResource" class="headerlink" title="1、@ImportResource"></a>1、@ImportResource</h5><p>注：这里使用applicationcontext还能调到配置文件中的bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">======================beans.xml=========================</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hehe&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tomcat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">@ImportResource(&quot;classpath:beans.xml&quot;)</span><br><span class="line">public class MyConfig &#123;&#125;</span><br><span class="line">======================测试=================</span><br><span class="line">boolean haha = run.containsBean(&quot;haha&quot;);</span><br><span class="line">boolean hehe = run.containsBean(&quot;hehe&quot;);</span><br><span class="line">System.out.println(&quot;haha：&quot;+haha);//true</span><br><span class="line">System.out.println(&quot;hehe：&quot;+hehe);//true</span><br></pre></td></tr></table></figure>



<h4 id="2-3、配置绑定"><a href="#2-3、配置绑定" class="headerlink" title="2.3、配置绑定"></a>2.3、配置绑定</h4><p>如何使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">getProperties</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">        Properties pps = <span class="keyword">new</span> Properties();</span><br><span class="line">        pps.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.properties&quot;</span>));</span><br><span class="line">        Enumeration enum1 = pps.propertyNames();<span class="comment">//得到配置文件的名字</span></span><br><span class="line">        <span class="keyword">while</span>(enum1.hasMoreElements()) &#123;</span><br><span class="line">            String strKey = (String) enum1.nextElement();</span><br><span class="line">            String strValue = pps.getProperty(strKey);</span><br><span class="line">            System.out.println(strKey + <span class="string">&quot;=&quot;</span> + strValue);</span><br><span class="line">            <span class="comment">//封装到JavaBean。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1、-ConfigurationProperties"><a href="#1、-ConfigurationProperties" class="headerlink" title="1、@ConfigurationProperties"></a>1、@ConfigurationProperties</h5><h5 id="2、-EnableConfigurationProperties-ConfigurationProperties"><a href="#2、-EnableConfigurationProperties-ConfigurationProperties" class="headerlink" title="2、@EnableConfigurationProperties + @ConfigurationProperties"></a>2、@EnableConfigurationProperties + @ConfigurationProperties</h5><p>这里@EnableConfigurationProperties（Class clazz）必须放在配置类中</p>
<p>两个功能：1、开启属性绑定功能（可以使用配置文件properties）</p>
<p>​                    2、把这个bean加入到容器中（可以不在该bean上加那四个注解，当然加了也行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@EnableConfigurationProperties(Car.class)</span><br><span class="line">//1、开启Car配置绑定功能</span><br><span class="line">//2、把这个Car这个组件自动注册到容器中</span><br><span class="line">public class MyConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3、-Component-ConfigurationProperties"><a href="#3、-Component-ConfigurationProperties" class="headerlink" title="3、@Component + @ConfigurationProperties"></a>3、@Component + @ConfigurationProperties</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix = &quot;mycar&quot;)</span><br><span class="line">public class Car &#123;</span><br><span class="line"></span><br><span class="line">    private String brand;</span><br><span class="line">    private Integer price;</span><br><span class="line"></span><br><span class="line">    public String getBrand() &#123;</span><br><span class="line">        return brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setBrand(String brand) &#123;</span><br><span class="line">        this.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Integer getPrice() &#123;</span><br><span class="line">        return price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPrice(Integer price) &#123;</span><br><span class="line">        this.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Car&#123;&quot; +</span><br><span class="line">            &quot;brand=&#x27;&quot; + brand + &#x27;\&#x27;&#x27; +</span><br><span class="line">            &quot;, price=&quot; + price +</span><br><span class="line">            &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3、自动配置原理入门"><a href="#3、自动配置原理入门" class="headerlink" title="3、自动配置原理入门"></a>3、自动配置原理入门</h3><h4 id="3-1、引导加载自动配置类"><a href="#3-1、引导加载自动配置类" class="headerlink" title="3.1、引导加载自动配置类"></a>3.1、引导加载自动配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">                                 @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h5><h5 id="1、-Configuration"><a href="#1、-Configuration" class="headerlink" title="1、@Configuration"></a>1、@Configuration</h5><p>代表当前是一个配置类</p>
<h5 id="2、-ComponentScan"><a href="#2、-ComponentScan" class="headerlink" title="2、@ComponentScan"></a>2、@ComponentScan</h5><p>指定扫描哪些，Spring注解；</p>
<h5 id="3、-EnableAutoConfiguration"><a href="#3、-EnableAutoConfiguration" class="headerlink" title="3、@EnableAutoConfiguration"></a>3、@EnableAutoConfiguration</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure>

<h6 id="1、-AutoConfigurationPackage"><a href="#1、-AutoConfigurationPackage" class="headerlink" title="1、@AutoConfigurationPackage"></a>1、@AutoConfigurationPackage</h6><p>自动配置包。指定了默认的包规则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span>  <span class="comment">//给容器中导入一个组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用Registrar给容器中导入一系列组件</span></span><br><span class="line"><span class="comment">//将指定的一个包下的所有组件导入进来，这个包是MainApplication 所在包下。</span></span><br></pre></td></tr></table></figure>

<p>注：这里<code>@AutoConfigurationPackage</code>为@<code>ComponentScan</code>指定要扫描那些包。具体看<a href="https://www.cnblogs.com/my-program-life/p/12181488.html">https://www.cnblogs.com/my-program-life/p/12181488.html</a></p>
<h6 id="2、-Import-AutoConfigurationImportSelector-class"><a href="#2、-Import-AutoConfigurationImportSelector-class" class="headerlink" title="2、@Import(AutoConfigurationImportSelector.class)"></a>2、@Import(AutoConfigurationImportSelector.class)</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、利用getAutoConfigurationEntry(annotationMetadata);给容器中批量导入一些组件</span><br><span class="line"><span class="number">2</span>、调用List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)获取到所有需要导入到容器中的配置类</span><br><span class="line"><span class="number">3</span>、利用工厂加载 Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader)；得到所有的组件</span><br><span class="line"><span class="number">4</span>、从META-INF/spring.factories位置来加载一个文件。</span><br><span class="line">	默认扫描我们当前系统里面所有META-INF/spring.factories位置的文件</span><br><span class="line">    spring-boot-autoconfigure-<span class="number">2.3</span><span class="number">.4</span>.RELEASE.jar包里面也有META-INF/spring.factories</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h2 id><a href="#" class="headerlink" title></a><img src="/2021/09/01/springBoot/1.png" alt="img"></h2><h4 id="3-2、按需开启自动配置项"><a href="#3-2、按需开启自动配置项" class="headerlink" title="3.2、按需开启自动配置项"></a>3.2、按需开启自动配置项</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration</span><br><span class="line">按照条件装配规则（@Conditional），最终会按需配置。</span><br></pre></td></tr></table></figure>



<h4 id="3-3、修改默认配置"><a href="#3-3、修改默认配置" class="headerlink" title="3.3、修改默认配置"></a>3.3、修改默认配置</h4><p>相当于防止用户瞎起名。先通过类型确定容器有这个组件。再找一个用户瞎起名的组件，返回刚才找的这个组件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//容器中有这个类型组件</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(MultipartResolver.class)</span>  </span><br><span class="line"><span class="comment">//容器中没有这个名字 multipartResolver的组件</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> MultipartResolver <span class="title">multipartResolver</span><span class="params">(MultipartResolver resolver)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。</span></span><br><span class="line">    <span class="comment">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器不符合规范</span></span><br><span class="line">    <span class="comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给容器中加入了文件上传解析器；</span></span><br></pre></td></tr></table></figure>

<h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><p>SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span><span class="comment">//容器中没有这个组件就配置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="-2"><a href="#-2" class="headerlink" title></a></h2><p>总结：</p>
<ul>
<li><p>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</p>
</li>
<li><p>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</p>
</li>
<li><p>生效的配置类就会给容器中装配很多组件</p>
</li>
<li><p>只要容器中有这些组件，相当于这些功能就有了</p>
</li>
<li><p>定制化配置</p>
</li>
<li><ul>
<li>用户直接自己@Bean替换底层的组件</li>
<li>用户去看这个组件是获取的配置文件什么值就去修改。</li>
</ul>
</li>
</ul>
<p><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt;</strong> <strong>xxxxProperties里面拿值  —-&gt; application.properties</strong></p>
<h4 id="3-4、最佳实践"><a href="#3-4、最佳实践" class="headerlink" title="3.4、最佳实践"></a>3.4、最佳实践</h4><ul>
<li><p>引入场景依赖</p>
</li>
<li><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></li>
</ul>
</li>
<li><p>查看自动配置了哪些（选做）</p>
</li>
<li><ul>
<li>自己分析，引入场景对应的自动配置一般都生效了</li>
<li>配置文件中debug=true开启自动配置报告。Negative（不生效）\Positive（生效）</li>
</ul>
</li>
<li><p>是否需要修改</p>
</li>
<li><ul>
<li>参照文档修改配置项</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties</a></li>
<li>自己分析。xxxxProperties绑定了配置文件的哪些。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>自定义加入或者替换组件</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>@Bean、@Component。。。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>自定义器  <strong>XXXXXCustomizer</strong>；</li>
<li>……</li>
</ul>
</li>
</ul>
<h3 id="4、开发小技巧"><a href="#4、开发小技巧" class="headerlink" title="4、开发小技巧"></a>4、开发小技巧</h3><h4 id="4-1、Lombok"><a href="#4-1、Lombok" class="headerlink" title="4.1、Lombok"></a>4.1、Lombok</h4><p>简化JavaBean开发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">idea中搜索安装lombok插件</span><br><span class="line">===============================简化JavaBean开发===================================</span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name,Integer age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================简化日志开发===================================</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle01</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;请求进来了....&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 2!&quot;</span>+<span class="string">&quot;你好：&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2、dev-tools"><a href="#4-2、dev-tools" class="headerlink" title="4.2、dev-tools"></a>4.2、dev-tools</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>项目或者页面修改以后：Ctrl+F9；</p>
<h4 id="4-3、Spring-Initailizr（项目初始化向导）"><a href="#4-3、Spring-Initailizr（项目初始化向导）" class="headerlink" title="4.3、Spring Initailizr（项目初始化向导）"></a>4.3、Spring Initailizr（项目初始化向导）</h4><h5 id="0、选择我们需要的开发场景"><a href="#0、选择我们需要的开发场景" class="headerlink" title="0、选择我们需要的开发场景"></a>0、选择我们需要的开发场景</h5><p><img src="/2021/09/01/springBoot/2.png" alt="img"></p>
<h5 id="1、自动依赖引入"><a href="#1、自动依赖引入" class="headerlink" title="1、自动依赖引入"></a>1、自动依赖引入</h5><p><img src="/2021/09/01/springBoot/3.png" alt="img"></p>
<h5 id="2、自动创建项目结构"><a href="#2、自动创建项目结构" class="headerlink" title="2、自动创建项目结构"></a>2、自动创建项目结构</h5><p><img src="/2021/09/01/springBoot/4.png" alt="img"></p>
<h5 id="3、自动编写好主配置类"><a href="#3、自动编写好主配置类" class="headerlink" title="3、自动编写好主配置类"></a>3、自动编写好主配置类</h5><p><img src="/2021/09/01/springBoot/5.png" alt="img"></p>
<h2 id="04、配置文件"><a href="#04、配置文件" class="headerlink" title="04、配置文件"></a>04、配置文件</h2><h3 id="1、文件类型"><a href="#1、文件类型" class="headerlink" title="1、文件类型"></a>1、文件类型</h3><h4 id="1-1、properties"><a href="#1-1、properties" class="headerlink" title="1.1、properties"></a>1.1、properties</h4><p>同以前的properties用法</p>
<h4 id="1-2、yaml"><a href="#1-2、yaml" class="headerlink" title="1.2、yaml"></a>1.2、yaml</h4><h5 id="1-2-1、简介"><a href="#1-2-1、简介" class="headerlink" title="1.2.1、简介"></a>1.2.1、简介</h5><p>YAML 是 “YAML Ain’t Markup Language”（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 </p>
<p>非常适合用来做以数据为中心的配置文件</p>
<h5 id="1-2-2、基本语法"><a href="#1-2-2、基本语法" class="headerlink" title="1.2.2、基本语法"></a>1.2.2、基本语法</h5><ul>
<li><p>key: value；kv之间有空格</p>
</li>
<li><p>大小写敏感</p>
</li>
<li><p>使用缩进表示层级关系</p>
</li>
<li><p>缩进不允许使用tab，只允许空格</p>
</li>
<li><p>缩进的空格数不重要，只要相同层级的元素左对齐即可</p>
</li>
<li><p>‘#’表示注释</p>
</li>
<li><p>字符串无需加引号，如果要加，’’与””表示字符串内容 会被 转义/不转义</p>
</li>
</ul>
<p>注：</p>
<p>单引号会识别诸如“/n”这种字符，但是为了防止你打错会再次转义。</p>
<p>双引号会原样输出</p>
<h5 id="1-2-3、数据类型"><a href="#1-2-3、数据类型" class="headerlink" title="1.2.3、数据类型"></a>1.2.3、数据类型</h5><ul>
<li>字面量：单个的、不可再分的值。date、boolean、string、number、null</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">k: v</span><br></pre></td></tr></table></figure>

<ul>
<li>对象：键值对的集合。map、hash、set、object </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">行内写法：  k: &#123;k1:v1,k2:v2,k3:v3&#125;</span><br><span class="line">#或</span><br><span class="line">k: </span><br><span class="line">	k1: v1</span><br><span class="line">  k2: v2</span><br><span class="line">  k3: v3</span><br></pre></td></tr></table></figure>

<ul>
<li>数组：一组按次序排列的值。array、list、queue</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">行内写法：  k: [v1,v2,v3]</span><br><span class="line">#或者</span><br><span class="line">k:</span><br><span class="line"> - v1</span><br><span class="line"> - v2</span><br><span class="line"> - v3</span><br></pre></td></tr></table></figure>

<h5 id="1-2-4、示例"><a href="#1-2-4、示例" class="headerlink" title="1.2.4、示例"></a>1.2.4、示例</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class Person &#123;</span><br><span class="line">	</span><br><span class="line">	private String userName;</span><br><span class="line">	private Boolean boss;</span><br><span class="line">	private Date birth;</span><br><span class="line">	private Integer age;</span><br><span class="line">	private Pet pet;</span><br><span class="line">	private String[] interests;</span><br><span class="line">	private List&lt;String&gt; animal;</span><br><span class="line">	private Map&lt;String, Object&gt; score;</span><br><span class="line">	private Set&lt;Double&gt; salarys;</span><br><span class="line">	private Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">public class Pet &#123;</span><br><span class="line">	private String name;</span><br><span class="line">	private Double weight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># yaml表示以上对象</span><br><span class="line">person:</span><br><span class="line">  userName: zhangsan</span><br><span class="line">  boss: false</span><br><span class="line">  birth: 2019/12/12 20:12:33</span><br><span class="line">  age: 18</span><br><span class="line">  pet: </span><br><span class="line">    name: tomcat</span><br><span class="line">    weight: 23.4</span><br><span class="line">  interests: [篮球,游泳]</span><br><span class="line">  animal: </span><br><span class="line">    - jerry</span><br><span class="line">    - mario</span><br><span class="line">  score:</span><br><span class="line">    english: </span><br><span class="line">      first: 30</span><br><span class="line">      second: 40</span><br><span class="line">      third: 50</span><br><span class="line">    math: [131,140,148]</span><br><span class="line">    chinese: &#123;first: 128,second: 136&#125;</span><br><span class="line">  salarys: [3999,4999.98,5999.99]</span><br><span class="line">  allPets:</span><br><span class="line">    sick:</span><br><span class="line">      - &#123;name: tom&#125;</span><br><span class="line">      - &#123;name: jerry,weight: 47&#125;</span><br><span class="line">    health: [&#123;name: mario,weight: 47&#125;]</span><br></pre></td></tr></table></figure>



<h3 id="2、配置提示"><a href="#2、配置提示" class="headerlink" title="2、配置提示"></a>2、配置提示</h3><p>自定义的类和配置文件绑定一般没有提示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">           &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">       &lt;plugins&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">               &lt;configuration&gt;</span><br><span class="line">                   &lt;excludes&gt;</span><br><span class="line">                       &lt;exclude&gt;</span><br><span class="line">                           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                           &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">                       &lt;/exclude&gt;</span><br><span class="line">                   &lt;/excludes&gt;</span><br><span class="line">               &lt;/configuration&gt;</span><br><span class="line">           &lt;/plugin&gt;</span><br><span class="line">       &lt;/plugins&gt;</span><br><span class="line">   &lt;/build&gt;</span><br></pre></td></tr></table></figure>

<h2 id="05、Web开发"><a href="#05、Web开发" class="headerlink" title="05、Web开发"></a>05、Web开发</h2><p><img src="/2021/09/01/springBoot/6.png" alt="img"></p>
<h3 id="1、SpringMVC自动配置概览"><a href="#1、SpringMVC自动配置概览" class="headerlink" title="1、SpringMVC自动配置概览"></a>1、SpringMVC自动配置概览</h3><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p>
<p>The auto-configuration adds the following features on top of Spring’s defaults:</p>
<ul>
<li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p>
</li>
<li><ul>
<li>内容协商视图解析器和BeanName视图解析器</li>
</ul>
</li>
<li><p>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content">later in this document</a>)).</p>
</li>
<li><ul>
<li>静态资源（包括webjars）</li>
</ul>
</li>
<li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p>
</li>
<li><ul>
<li>自动注册 <code>Converter，GenericConverter，Formatter </code></li>
</ul>
</li>
<li><p>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters">later in this document</a>).</p>
</li>
<li><ul>
<li>支持 <code>HttpMessageConverters</code> （后来我们配合内容协商理解原理）</li>
</ul>
</li>
<li><p>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes">later in this document</a>).</p>
</li>
<li><ul>
<li>自动注册 <code>MessageCodesResolver</code> （国际化用）</li>
</ul>
</li>
<li><p>Static <code>index.html</code> support.</p>
</li>
<li><ul>
<li>静态index.html 页支持</li>
</ul>
</li>
<li><p>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon">later in this document</a>).</p>
</li>
<li><ul>
<li>自定义 <code>Favicon</code>  </li>
</ul>
</li>
<li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer">later in this document</a>).</p>
</li>
<li><ul>
<li>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上）</li>
</ul>
</li>
</ul>
<p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p>
<p><strong>不用@EnableWebMvc注解。使用</strong> <code>**@Configuration**</code> <strong>+</strong> <code>**WebMvcConfigurer**</code> <strong>自定义规则</strong></p>
<p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p>
<p><strong>声明</strong> <code>**WebMvcRegistrations**</code> <strong>改变默认底层组件</strong></p>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p>
<p><strong>使用</strong> <code>**@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC**</code></p>
<h3 id="2、简单功能分析"><a href="#2、简单功能分析" class="headerlink" title="2、简单功能分析"></a>2、简单功能分析</h3><h4 id="2-1、静态资源访问"><a href="#2-1、静态资源访问" class="headerlink" title="2.1、静态资源访问"></a>2.1、静态资源访问</h4><h5 id="1、静态资源目录"><a href="#1、静态资源目录" class="headerlink" title="1、静态资源目录"></a>1、静态资源目录</h5><p>只要静态资源放在类路径下： called <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p>
<p>访问 ： 当前项目根路径/ + 静态资源名 </p>
<p>原理： 静态映射/**。</p>
<p>请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。静态资源也找不到则响应404页面</p>
<p>改变默认的静态资源路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    static-path-pattern: /res/**</span><br><span class="line"></span><br><span class="line">  resources:</span><br><span class="line">    static-locations: [classpath:/haha/]</span><br></pre></td></tr></table></figure>



<h5 id="2、静态资源访问前缀"><a href="#2、静态资源访问前缀" class="headerlink" title="2、静态资源访问前缀"></a>2、静态资源访问前缀</h5><p>默认无前缀</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    static-path-pattern: /res/**</span><br></pre></td></tr></table></figure>

<p>当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找</p>
<h5 id="3、webjar"><a href="#3、webjar" class="headerlink" title="3、webjar"></a>3、webjar</h5><p>自动映射 /<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">webjars</a>/**</p>
<p><a href="https://www.webjars.org/">https://www.webjars.org/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.webjars&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jquery&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js">http://localhost:8080/webjars/<strong>jquery/3.5.1/jquery.js</strong></a>   后面地址要按照依赖里面的包路径</p>
<h4 id="2-2、欢迎页支持"><a href="#2-2、欢迎页支持" class="headerlink" title="2.2、欢迎页支持"></a>2.2、欢迎页支持</h4><ul>
<li><p>静态资源路径下  index.html</p>
</li>
<li><ul>
<li>可以配置静态资源路径</li>
<li>但是不可以配置静态资源的访问前缀。否则导致 index.html不能被默认访问</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">#  mvc:</span><br><span class="line">#    static-path-pattern: /res/**   这个会导致welcome page功能失效</span><br><span class="line"></span><br><span class="line">  resources:</span><br><span class="line">    static-locations: [classpath:/haha/]</span><br></pre></td></tr></table></figure>

<ul>
<li>controller能处理/index</li>
</ul>
<h4 id="2-3、自定义-Favicon"><a href="#2-3、自定义-Favicon" class="headerlink" title="2.3、自定义 Favicon"></a>2.3、自定义 <code>Favicon</code></h4><p>favicon.ico 放在静态资源目录下即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">#  mvc:</span><br><span class="line">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span><br></pre></td></tr></table></figure>





<h4 id="2-4、静态资源配置原理"><a href="#2-4、静态资源配置原理" class="headerlink" title="2.4、静态资源配置原理"></a>2.4、静态资源配置原理</h4><ul>
<li>SpringBoot启动默认加载  xxxAutoConfiguration 类（自动配置类）</li>
<li>SpringMVC功能的自动配置类 WebMvcAutoConfiguration，生效</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration(proxyBeanMethods = false)</span><br><span class="line">@ConditionalOnWebApplication(type = Type.SERVLET)</span><br><span class="line">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class="line">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><br><span class="line">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><br><span class="line">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span><br><span class="line">		ValidationAutoConfiguration.class &#125;)</span><br><span class="line">public class WebMvcAutoConfiguration &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>给容器中配了什么。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration(proxyBeanMethods = false)</span><br><span class="line">@Import(EnableWebMvcConfiguration.class)</span><br><span class="line">@EnableConfigurationProperties(&#123; WebMvcProperties.class, ResourceProperties.class &#125;)</span><br><span class="line">@Order(0)</span><br><span class="line">public static class WebMvcAutoConfigurationAdapter implements WebMvcConfigurer &#123;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置文件的相关属性和xxx进行了绑定。WebMvcProperties==<strong>spring.mvc</strong>、ResourceProperties==<strong>spring.resources</strong></li>
</ul>
<h5 id="1、配置类只有一个有参构造器"><a href="#1、配置类只有一个有参构造器" class="headerlink" title="1、配置类只有一个有参构造器"></a>1、配置类只有一个有参构造器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	//有参构造器所有参数的值都会从容器中确定</span><br><span class="line">//ResourceProperties resourceProperties；获取和spring.resources绑定的所有的值的对象</span><br><span class="line">//WebMvcProperties mvcProperties 获取和spring.mvc绑定的所有的值的对象</span><br><span class="line">//ListableBeanFactory beanFactory Spring的beanFactory</span><br><span class="line">//HttpMessageConverters 找到所有的HttpMessageConverters</span><br><span class="line">//ResourceHandlerRegistrationCustomizer 找到 资源处理器的自定义器。=========</span><br><span class="line">//DispatcherServletPath  </span><br><span class="line">//ServletRegistrationBean   给应用注册Servlet、Filter....</span><br><span class="line">	public WebMvcAutoConfigurationAdapter(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span><br><span class="line">				ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span><br><span class="line">				ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span><br><span class="line">				ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span><br><span class="line">				ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations) &#123;</span><br><span class="line">			this.resourceProperties = resourceProperties;</span><br><span class="line">			this.mvcProperties = mvcProperties;</span><br><span class="line">			this.beanFactory = beanFactory;</span><br><span class="line">			this.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line">			this.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line">			this.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line">			this.servletRegistrations = servletRegistrations;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>





<h5 id="2、资源处理的默认规则"><a href="#2、资源处理的默认规则" class="headerlink" title="2、资源处理的默认规则"></a>2、资源处理的默认规则</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">		public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">			if (!this.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">				logger.debug(&quot;Default resource handling disabled&quot;);</span><br><span class="line">				return;</span><br><span class="line">			&#125;</span><br><span class="line">			Duration cachePeriod = this.resourceProperties.getCache().getPeriod();</span><br><span class="line">			CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">			//webjars的规则</span><br><span class="line">            if (!registry.hasMappingForPattern(&quot;/webjars/**&quot;)) &#123;</span><br><span class="line">				customizeResourceHandlerRegistration(registry.addResourceHandler(&quot;/webjars/**&quot;)</span><br><span class="line">						.addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;)</span><br><span class="line">						.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">			&#125;</span><br><span class="line">            </span><br><span class="line">            //</span><br><span class="line">			String staticPathPattern = this.mvcProperties.getStaticPathPattern();</span><br><span class="line">			if (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">				customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">						.addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))</span><br><span class="line">						.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">spring:</span><br><span class="line">#  mvc:</span><br><span class="line">#    static-path-pattern: /res/**</span><br><span class="line"></span><br><span class="line">  resources:</span><br><span class="line">    add-mappings: false   禁用所有静态资源规则</span><br><span class="line">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span><br><span class="line">public class ResourceProperties &#123;</span><br><span class="line"></span><br><span class="line">	private static final String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; &quot;classpath:/META-INF/resources/&quot;,</span><br><span class="line">			&quot;classpath:/resources/&quot;, &quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; &#125;;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * Locations of static resources. Defaults to classpath:[/META-INF/resources/,</span><br><span class="line">	 * /resources/, /static/, /public/].</span><br><span class="line">	 */</span><br><span class="line">	private String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br></pre></td></tr></table></figure>



<h5 id="3、欢迎页的处理规则"><a href="#3、欢迎页的处理规则" class="headerlink" title="3、欢迎页的处理规则"></a>3、欢迎页的处理规则</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HandlerMapping：处理器映射。保存了每一个Handler能处理哪些请求。	</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                               FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">        <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">        <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    welcomePageHandlerMapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//匹配index.html，匹配不到就去控制器找有没有处理/index的</span></span><br><span class="line">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class="line">                          ApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class="line">    <span class="keyword">if</span> (welcomePage.isPresent() &amp;&amp; <span class="string">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class="line">        <span class="comment">//要用欢迎页功能，必须是/**</span></span><br><span class="line">        logger.info(<span class="string">&quot;Adding welcome page: &quot;</span> + welcomePage.get());</span><br><span class="line">        setRootViewName(<span class="string">&quot;forward:index.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class="line">        <span class="comment">// 调用Controller  /index</span></span><br><span class="line">        logger.info(<span class="string">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class="line">        setRootViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4、favicon"><a href="#4、favicon" class="headerlink" title="4、favicon"></a>4、favicon</h5><h3 id="3、请求参数处理"><a href="#3、请求参数处理" class="headerlink" title="3、请求参数处理"></a>3、请求参数处理</h3><h4 id="0、请求映射"><a href="#0、请求映射" class="headerlink" title="0、请求映射"></a>0、请求映射</h4><h5 id="1、rest使用与原理"><a href="#1、rest使用与原理" class="headerlink" title="1、rest使用与原理"></a>1、rest使用与原理</h5><ul>
<li><p>@xxxMapping；</p>
</li>
<li><p>Rest风格支持（<em>使用<strong>HTTP</strong>请求方式动词来表示对资源的操作</em>）</p>
</li>
<li><ul>
<li><em>以前：</em><em>/getUser</em>  <em>获取用户</em>    <em>/deleteUser</em> <em>删除用户</em>   <em>/editUser</em>  <em>修改用户</em>      <em>/saveUser</em> <em>保存用户</em></li>
<li><em>现在： /user</em>    *GET-*<em>获取用户</em>    *DELETE-*<em>删除用户</em>     *PUT-*<em>修改用户</em>      *POST-*<em>保存用户</em></li>
</ul>
</li>
<li><ul>
<li>核心Filter；HiddenHttpMethodFilter</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>用法： 表单method=post，隐藏域 _method=put</li>
<li>SpringBoot中手动开启</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>扩展：如何把_method 这个名字换成我们自己喜欢的。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;GET-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;POST-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;PUT-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;DELETE-张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrderedHiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrderedHiddenHttpMethodFilter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义filter</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HiddenHttpMethodFilter <span class="title">hiddenHttpMethodFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HiddenHttpMethodFilter methodFilter = <span class="keyword">new</span> HiddenHttpMethodFilter();</span><br><span class="line">    methodFilter.setMethodParam(<span class="string">&quot;_m&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> methodFilter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Rest原理（表单提交要使用REST的时候）</p>
<ul>
<li><p>表单提交会带上**_method=PUT**</p>
</li>
<li><p><strong>请求过来被</strong>HiddenHttpMethodFilter拦截</p>
</li>
<li><ul>
<li>请求是否正常，并且是POST</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>获取到**_method**的值。</li>
<li>兼容以下请求；<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><strong>原生request（post），包装模式requesWrapper重写了getMethod方法，返回的是传入的值。</strong></li>
<li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requesWrapper的。</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Rest使用客户端工具，</strong></p>
<ul>
<li>如PostMan直接发送Put、delete等方式请求，无需Filter。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    hiddenmethod:</span><br><span class="line">      filter:</span><br><span class="line">        enabled: true   #开启页面表单的Rest功能</span><br></pre></td></tr></table></figure>

<h5 id="2、请求映射原理"><a href="#2、请求映射原理" class="headerlink" title="2、请求映射原理"></a>2、请求映射原理</h5><p>我的总结：</p>
<p>第一阶段，handlerMapping匹配控制器方法</p>
<p>1、先去找doGet doPost方法（找到processRequest-&gt;doService-&gt;doDispatch）</p>
<p>2、这个方法中，调用getHandler方法遍历handlerMappings（里面包含requestMappingHandlerMapping，欢迎页handlerMapping等），寻找匹配的handlerMapping（先匹配路径，在匹配请求方式）</p>
<p>3、返回一个<strong>HandlerExecutionChain</strong>对象，该对象包装了实际执行处理器的类。拿到要执行的控制器方法</p>
<p>第二阶段，handlerAdapter通过反射执行该方法</p>
<p>4、通过刚才拿到的控制器方法遍历handlerAdapters适配器集合（四个变量，第一个是标注@requestMapping注解的，第二个是函数式编程的）这里是否匹配适配器需要刚才拿到的控制器方法handler是否继承handlerMethod。以此拿到要用的适配器</p>
<p>5、执行目标方法ha.handle-&gt;invokeHandlerMethod</p>
<p>6、这个方法中，初始化参数解析器argumentResolver（用于确定将要执行的目标方法的每一个值是什么）和返回值处理器returnValuesHandler（目标方法可以使用哪些返回值）并把他们放入ServletInvocableHandlerMethod invocableMethod中</p>
<p>7、调用invocableMethod的invokeAndHandle-&gt;invokeForRequest（真正执行的方法）</p>
<p>8、这个方法先调用getMethodArgumentValues方法获得参数值</p>
<p><img src="/2021/09/01/springBoot/7.png" alt="img"></p>
<p>SpringMVC功能分析都从 org.springframework.web.servlet.DispatcherServlet-》doDispatch（）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		HttpServletRequest processedRequest = request;</span><br><span class="line">		HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">			Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				processedRequest = checkMultipart(request);</span><br><span class="line">				multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 找到当前请求使用哪个Handler（Controller的方法）处理</span></span><br><span class="line">				mappedHandler = getHandler(processedRequest);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//HandlerMapping：处理器映射。/xxx-&gt;&gt;xxxx</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/09/01/springBoot/8.png" alt="img"></p>
<p><strong>RequestMappingHandlerMapping</strong>：保存了所有@RequestMapping 和handler的映射规则。</p>
<p><img src="/2021/09/01/springBoot/9.png" alt="img"></p>
<p>所有的请求映射都在HandlerMapping中。</p>
<ul>
<li><p>SpringBoot自动配置欢迎页的 WelcomePageHandlerMapping 。访问 /能访问到index.html；</p>
</li>
<li><p>SpringBoot自动配置了默认 的 RequestMappingHandlerMapping</p>
</li>
<li><p>请求进来，挨个尝试所有的HandlerMapping看是否有请求信息。</p>
</li>
<li><ul>
<li>如果有就找到这个请求对应的handler</li>
<li>如果没有就是下一个 HandlerMapping</li>
</ul>
</li>
<li><p>我们需要一些自定义的映射处理，我们也可以自己给容器中放<strong>HandlerMapping</strong>。自定义 <strong>HandlerMapping</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line">			HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">			<span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> handler;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1、普通参数与基本注解"><a href="#1、普通参数与基本注解" class="headerlink" title="1、普通参数与基本注解"></a>1、普通参数与基本注解</h4><h5 id="1-1、注解："><a href="#1-1、注解：" class="headerlink" title="1.1、注解："></a>1.1、注解：</h5><p>@PathVariable、@RequestHeader、@ModelAttribute、@RequestParam、@MatrixVariable、@CookieValue、@RequestBody</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  car/2/owner/zhangsan</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/car/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">getCar</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@PathVariable(&quot;username&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@PathVariable</span> Map&lt;String,String&gt; pv,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestHeader</span> Map&lt;String,String&gt; header,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@RequestParam</span> Map&lt;String,String&gt; params,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     <span class="meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        map.put(&quot;id&quot;,id);</span></span><br><span class="line">        <span class="comment">//        map.put(&quot;name&quot;,name);</span></span><br><span class="line">        <span class="comment">//        map.put(&quot;pv&quot;,pv);</span></span><br><span class="line">        <span class="comment">//        map.put(&quot;userAgent&quot;,userAgent);</span></span><br><span class="line">        <span class="comment">//        map.put(&quot;headers&quot;,header);</span></span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        map.put(<span class="string">&quot;inters&quot;</span>,inters);</span><br><span class="line">        map.put(<span class="string">&quot;params&quot;</span>,params);</span><br><span class="line">        map.put(<span class="string">&quot;_ga&quot;</span>,_ga);</span><br><span class="line">        System.out.println(cookie.getName()+<span class="string">&quot;===&gt;&quot;</span>+cookie.getValue());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">postMethod</span><span class="params">(<span class="meta">@RequestBody</span> String content)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;content&quot;</span>,content);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、语法： 请求路径：/cars/sell;low=34;brand=byd,audi,yd</span></span><br><span class="line">    <span class="comment">//2、SpringBoot默认是禁用了矩阵变量的功能</span></span><br><span class="line">    <span class="comment">//      手动开启：原理。对于路径的处理。UrlPathHelper进行解析。</span></span><br><span class="line">    <span class="comment">//              removeSemicolonContent（移除分号内容）支持矩阵变量的</span></span><br><span class="line">    <span class="comment">//3、矩阵变量必须有url路径变量才能被解析</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">carsSell</span><span class="params">(<span class="meta">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="meta">@PathVariable(&quot;path&quot;)</span> String path)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;low&quot;</span>,low);</span><br><span class="line">        map.put(<span class="string">&quot;brand&quot;</span>,brand);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>,path);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /boss/1;age=20/2;age=10</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">boss</span><span class="params">(<span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="meta">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;bossAge&quot;</span>,bossAge);</span><br><span class="line">        map.put(<span class="string">&quot;empAge&quot;</span>,empAge);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2、Servlet-API："><a href="#1-2、Servlet-API：" class="headerlink" title="1.2、Servlet API："></a>1.2、Servlet API：</h5><p>WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</p>
<p><strong>ServletRequestMethodArgumentResolver  以上的部分参数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">		Class&lt;?&gt; paramType = parameter.getParameterType();</span><br><span class="line">		<span class="keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">				ServletRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">				MultipartRequest.class.isAssignableFrom(paramType) ||</span><br><span class="line">				HttpSession.class.isAssignableFrom(paramType) ||</span><br><span class="line">				(pushBuilder != <span class="keyword">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||</span><br><span class="line">				Principal.class.isAssignableFrom(paramType) ||</span><br><span class="line">				InputStream.class.isAssignableFrom(paramType) ||</span><br><span class="line">				Reader.class.isAssignableFrom(paramType) ||</span><br><span class="line">				HttpMethod.class == paramType ||</span><br><span class="line">				Locale.class == paramType ||</span><br><span class="line">				TimeZone.class == paramType ||</span><br><span class="line">				ZoneId.class == paramType);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h5 id="1-3、复杂参数："><a href="#1-3、复杂参数：" class="headerlink" title="1.3、复杂参数："></a>1.3、复杂参数：</h5><p><strong>Map</strong>、<strong>Model（map、model里面的数据会被放在request的请求域  request.setAttribute）、</strong>Errors/BindingResult、<strong>RedirectAttributes（ 重定向携带数据）</strong>、<strong>ServletResponse（response）</strong>、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map,  Model model, HttpServletRequest request 都是可以给request域中放数据，</span><br><span class="line">request.getAttribute();</span><br></pre></td></tr></table></figure>

<p><strong>Map、Model类型的参数</strong>，会返回 mavContainer.getModel（）；—&gt; BindingAwareModelMap 是Model 也是Map</p>
<p><strong>mavContainer</strong>.getModel(); 获取到值的</p>
<p><img src="/2021/09/01/springBoot/10.png" alt="img"></p>
<h3 id="-3"><a href="#-3" class="headerlink" title></a><img src="/2021/09/01/springBoot/11.png" alt="img"></h3><h3 id="-4"><a href="#-4" class="headerlink" title></a><img src="/2021/09/01/springBoot/12.png" alt="img"></h3><h5 id="1-4、自定义对象参数："><a href="#1-4、自定义对象参数：" class="headerlink" title="1.4、自定义对象参数："></a>1.4、自定义对象参数：</h5><p>可以自动类型转换与格式化，可以级联封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *     姓名： &lt;input name=&quot;userName&quot;/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     年龄： &lt;input name=&quot;age&quot;/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     生日： &lt;input name=&quot;birth&quot;/&gt; &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     宠物姓名：&lt;input name=&quot;pet.name&quot;/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *     宠物年龄：&lt;input name=&quot;pet.age&quot;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result</span><br></pre></td></tr></table></figure>



<h4 id="2、POJO封装过程"><a href="#2、POJO封装过程" class="headerlink" title="2、POJO封装过程"></a>2、POJO封装过程</h4><ul>
<li><strong>ServletModelAttributeMethodProcessor</strong></li>
</ul>
<h4 id="3、参数处理原理"><a href="#3、参数处理原理" class="headerlink" title="3、参数处理原理"></a>3、参数处理原理</h4><ul>
<li><p>HandlerMapping中找到能处理请求的Handler（Controller.method()）</p>
</li>
<li><p>为当前Handler 找一个适配器 HandlerAdapter； <strong>RequestMappingHandlerAdapter</strong></p>
</li>
<li><p>适配器执行目标方法并确定方法参数的每一个值</p>
</li>
</ul>
<h5 id="1、HandlerAdapter"><a href="#1、HandlerAdapter" class="headerlink" title="1、HandlerAdapter"></a>1、HandlerAdapter</h5><p><img src="/2021/09/01/springBoot/18.png" alt="img"></p>
<p>0 - 支持方法上标注@RequestMapping </p>
<p>1 - 支持函数式编程的</p>
<p>xxxxxx</p>
<h5 id="2、执行目标方法"><a href="#2、执行目标方法" class="headerlink" title="2、执行目标方法"></a>2、执行目标方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line"><span class="comment">//DispatcherServlet -- doDispatch</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">mav = invokeHandlerMethod(request, response, handlerMethod); <span class="comment">//执行目标方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ServletInvocableHandlerMethod</span></span><br><span class="line">Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line"><span class="comment">//获取方法的参数值</span></span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br></pre></td></tr></table></figure>

<h5 id="3、参数解析器-HandlerMethodArgumentResolver"><a href="#3、参数解析器-HandlerMethodArgumentResolver" class="headerlink" title="3、参数解析器-HandlerMethodArgumentResolver"></a>3、参数解析器-HandlerMethodArgumentResolver</h5><p>确定将要执行的目标方法的每一个参数的值是什么;</p>
<p>SpringMVC目标方法能写多少种参数类型。取决于参数解析器。</p>
<p><img src="/2021/09/01/springBoot/13.png" alt="img"></p>
<p><img src="/2021/09/01/springBoot/14.png" alt="img"></p>
<ul>
<li>当前解析器是否支持解析这种参数</li>
<li>支持就调用 resolveArgument</li>
</ul>
<h5 id="4、返回值处理器"><a href="#4、返回值处理器" class="headerlink" title="4、返回值处理器"></a>4、返回值处理器</h5><p><img src="/2021/09/01/springBoot/15.png" alt="img"></p>
<h5 id="5、如何确定目标方法每一个参数的值"><a href="#5、如何确定目标方法每一个参数的值" class="headerlink" title="5、如何确定目标方法每一个参数的值"></a>5、如何确定目标方法每一个参数的值</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">============InvocableHandlerMethod==========================</span><br><span class="line">protected Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,</span><br><span class="line">			Object... providedArgs) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		MethodParameter[] parameters = getMethodParameters();</span><br><span class="line">		if (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line">			return EMPTY_ARGS;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Object[] args = new Object[parameters.length];</span><br><span class="line">		for (int i = 0; i &lt; parameters.length; i++) &#123;</span><br><span class="line">			MethodParameter parameter = parameters[i];</span><br><span class="line">			parameter.initParameterNameDiscovery(this.parameterNameDiscoverer);</span><br><span class="line">			args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line">			if (args[i] != null) &#123;</span><br><span class="line">				continue;</span><br><span class="line">			&#125;</span><br><span class="line">			if (!this.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line">				throw new IllegalStateException(formatArgumentError(parameter, &quot;No suitable resolver&quot;));</span><br><span class="line">			&#125;</span><br><span class="line">			try &#123;</span><br><span class="line">				args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);</span><br><span class="line">			&#125;</span><br><span class="line">			catch (Exception ex) &#123;</span><br><span class="line">				// Leave stack trace for later, exception may actually be resolved and handled...</span><br><span class="line">				if (logger.isDebugEnabled()) &#123;</span><br><span class="line">					String exMsg = ex.getMessage();</span><br><span class="line">					if (exMsg != null &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">						logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				throw ex;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return args;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h6 id="5-1、挨个判断所有参数解析器那个支持解析这个参数"><a href="#5-1、挨个判断所有参数解析器那个支持解析这个参数" class="headerlink" title="5.1、挨个判断所有参数解析器那个支持解析这个参数"></a>5.1、挨个判断所有参数解析器那个支持解析这个参数</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Nullable</span><br><span class="line">private HandlerMethodArgumentResolver getArgumentResolver(MethodParameter parameter) &#123;</span><br><span class="line">	HandlerMethodArgumentResolver result = this.argumentResolverCache.get(parameter);</span><br><span class="line">	if (result == null) &#123;</span><br><span class="line">		for (HandlerMethodArgumentResolver resolver : this.argumentResolvers) &#123;</span><br><span class="line">			if (resolver.supportsParameter(parameter)) &#123;</span><br><span class="line">				result = resolver;</span><br><span class="line">				this.argumentResolverCache.put(parameter, result);</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="5-2、解析这个参数的值"><a href="#5-2、解析这个参数的值" class="headerlink" title="5.2、解析这个参数的值"></a>5.2、解析这个参数的值</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用各自 HandlerMethodArgumentResolver 的 resolveArgument 方法即可</span><br></pre></td></tr></table></figure>

<h6 id="5-3、自定义类型参数-封装POJO"><a href="#5-3、自定义类型参数-封装POJO" class="headerlink" title="5.3、自定义类型参数 封装POJO"></a>5.3、自定义类型参数 封装POJO</h6><p><strong>ServletModelAttributeMethodProcessor  这个参数处理器支持</strong></p>
<p> <strong>是否为简单类型。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSimpleValueType</span><span class="params">(Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Void.class != type &amp;&amp; <span class="keyword">void</span>.class != type &amp;&amp;</span><br><span class="line">            (ClassUtils.isPrimitiveOrWrapper(type) ||</span><br><span class="line">             Enum.class.isAssignableFrom(type) ||</span><br><span class="line">             CharSequence.class.isAssignableFrom(type) ||</span><br><span class="line">             Number.class.isAssignableFrom(type) ||</span><br><span class="line">             Date.class.isAssignableFrom(type) ||</span><br><span class="line">             Temporal.class.isAssignableFrom(type) ||</span><br><span class="line">             URI.class == type ||</span><br><span class="line">             URL.class == type ||</span><br><span class="line">             Locale.class == type ||</span><br><span class="line">             Class.class == type));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.state(mavContainer != <span class="keyword">null</span>, <span class="string">&quot;ModelAttributeMethodProcessor requires ModelAndViewContainer&quot;</span>);</span><br><span class="line">    Assert.state(binderFactory != <span class="keyword">null</span>, <span class="string">&quot;ModelAttributeMethodProcessor requires WebDataBinderFactory&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String name = ModelFactory.getNameForParameter(parameter);</span><br><span class="line">    ModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class);</span><br><span class="line">    <span class="keyword">if</span> (ann != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mavContainer.setBinding(name, ann.binding());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object attribute = <span class="keyword">null</span>;</span><br><span class="line">    BindingResult bindingResult = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mavContainer.containsAttribute(name)) &#123;</span><br><span class="line">        attribute = mavContainer.getModel().get(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Create attribute instance</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            attribute = createAttribute(name, parameter, binderFactory, webRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BindException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isBindExceptionRequired(parameter)) &#123;</span><br><span class="line">                <span class="comment">// No BindingResult parameter -&gt; fail with BindException</span></span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Otherwise, expose null/empty value and associated BindingResult</span></span><br><span class="line">            <span class="keyword">if</span> (parameter.getParameterType() == Optional.class) &#123;</span><br><span class="line">                attribute = Optional.empty();</span><br><span class="line">            &#125;</span><br><span class="line">            bindingResult = ex.getBindingResult();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bindingResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Bean property binding and validation;</span></span><br><span class="line">        <span class="comment">// skipped in case of binding failure on construction.</span></span><br><span class="line">        WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</span><br><span class="line">        <span class="keyword">if</span> (binder.getTarget() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class="line">                bindRequestParameters(binder, webRequest);</span><br><span class="line">            &#125;</span><br><span class="line">            validateIfApplicable(binder, parameter);</span><br><span class="line">            <span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BindException(binder.getBindingResult());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Value type adaptation, also covering java.util.Optional</span></span><br><span class="line">        <span class="keyword">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;</span><br><span class="line">            attribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        bindingResult = binder.getBindingResult();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add resolved attribute and BindingResult at the end of the model</span></span><br><span class="line">    Map&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();</span><br><span class="line">    mavContainer.removeAttributes(bindingResultModel);</span><br><span class="line">    mavContainer.addAllAttributes(bindingResultModel);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> attribute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="-5"><a href="#-5" class="headerlink" title></a></h3><p><strong>WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</strong></p>
<p><strong>WebDataBinder :web数据绑定器，将请求参数的值绑定到指定的JavaBean里面</strong></p>
<p><strong>WebDataBinder 利用它里面的 Converters 将请求数据转成指定的数据类型。再次封装到JavaBean中</strong></p>
<p><strong>GenericConversionService：在设置每一个值的时候，找它里面的所有converter那个可以将这个数据类型（request带来参数的字符串）转换到指定的类型（JavaBean – Integer）</strong></p>
<p><strong>byte – &gt; file</strong></p>
<p>@FunctionalInterface<strong>public interface</strong> Converter&lt;S, T&gt;</p>
<h3 id="-6"><a href="#-6" class="headerlink" title></a><img src="/2021/09/01/springBoot/16.png" alt="img"></h3><p><img src="/2021/09/01/springBoot/17.png" alt="img"></p>
<p>未来我们可以给WebDataBinder里面放自己的Converter；</p>
<p><strong>private static final class</strong> StringToNumber&lt;T **extends** Number&gt; <strong>implements</strong> Converter&lt;String, T&gt;</p>
<p>自定义 Converter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、WebMvcConfigurer定制化SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">            UrlPathHelper urlPathHelper = <span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">            <span class="comment">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class="line">            urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>);</span><br><span class="line">            configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">            registry.addConverter(<span class="keyword">new</span> Converter&lt;String, Pet&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Pet <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 啊猫,3</span></span><br><span class="line">                    <span class="keyword">if</span>(!StringUtils.isEmpty(source))&#123;</span><br><span class="line">                        Pet pet = <span class="keyword">new</span> Pet();</span><br><span class="line">                        String[] split = source.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                        pet.setName(split[<span class="number">0</span>]);</span><br><span class="line">                        pet.setAge(Integer.parseInt(split[<span class="number">1</span>]));</span><br><span class="line">                        <span class="keyword">return</span> pet;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6、目标方法执行完成"><a href="#6、目标方法执行完成" class="headerlink" title="6、目标方法执行完成"></a>6、目标方法执行完成</h3><p>将所有的数据都放在 <strong>ModelAndViewContainer</strong>；包含要去的页面地址View。还包含Model数据。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1603272018605-1bce3142-bdd9-4834-a028-c753e91c52ac.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<h3 id="7、处理派发结果"><a href="#7、处理派发结果" class="headerlink" title="7、处理派发结果"></a>7、处理派发结果</h3><p><strong>processDispatchResult</strong>(processedRequest, response, mappedHandler, mv, dispatchException);</p>
<p>renderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InternalResourceView：</span><br><span class="line">@Override</span><br><span class="line">	protected void renderMergedOutputModel(</span><br><span class="line">			Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		// Expose the model object as request attributes.</span><br><span class="line">		exposeModelAsRequestAttributes(model, request);</span><br><span class="line"></span><br><span class="line">		// Expose helpers as request attributes, if any.</span><br><span class="line">		exposeHelpers(request);</span><br><span class="line"></span><br><span class="line">		// Determine the path for the request dispatcher.</span><br><span class="line">		String dispatcherPath = prepareForRendering(request, response);</span><br><span class="line"></span><br><span class="line">		// Obtain a RequestDispatcher for the target resource (typically a JSP).</span><br><span class="line">		RequestDispatcher rd = getRequestDispatcher(request, dispatcherPath);</span><br><span class="line">		if (rd == null) &#123;</span><br><span class="line">			throw new ServletException(&quot;Could not get RequestDispatcher for [&quot; + getUrl() +</span><br><span class="line">					&quot;]: Check that the corresponding file exists within your web application archive!&quot;);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		// If already included or response already committed, perform include, else forward.</span><br><span class="line">		if (useInclude(request, response)) &#123;</span><br><span class="line">			response.setContentType(getContentType());</span><br><span class="line">			if (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(&quot;Including [&quot; + getUrl() + &quot;]&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			rd.include(request, response);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		else &#123;</span><br><span class="line">			// Note: The forwarded resource is supposed to determine the content type itself.</span><br><span class="line">			if (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(&quot;Forwarding to [&quot; + getUrl() + &quot;]&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">			rd.forward(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="-7"><a href="#-7" class="headerlink" title></a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">暴露模型作为请求域属性</span><br><span class="line">// Expose the model object as request attributes.</span><br><span class="line">		exposeModelAsRequestAttributes(model, request);</span><br></pre></td></tr></table></figure>

<h1 id="-8"><a href="#-8" class="headerlink" title></a></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected void exposeModelAsRequestAttributes(Map&lt;String, Object&gt; model,</span><br><span class="line">			HttpServletRequest request) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    //model中的所有数据遍历挨个放在请求域中</span><br><span class="line">		model.forEach((name, value) -&gt; &#123;</span><br><span class="line">			if (value != null) &#123;</span><br><span class="line">				request.setAttribute(name, value);</span><br><span class="line">			&#125;</span><br><span class="line">			else &#123;</span><br><span class="line">				request.removeAttribute(name);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h1 id="4、数据响应与内容协商"><a href="#4、数据响应与内容协商" class="headerlink" title="4、数据响应与内容协商"></a>4、数据响应与内容协商</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043749073-2573e24a-9ea9-459e-ad94-a433e1082624.png" alt="img"></p>
<h2 id="1、响应JSON"><a href="#1、响应JSON" class="headerlink" title="1、响应JSON"></a>1、响应JSON</h2><h3 id="1-1、jackson-jar-ResponseBody"><a href="#1-1、jackson-jar-ResponseBody" class="headerlink" title="1.1、jackson.jar+@ResponseBody"></a>1.1、jackson.jar+@ResponseBody</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">web场景自动引入了json场景</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-json&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.3.4.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="-9"><a href="#-9" class="headerlink" title></a><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605151090728-f7c60e6f-d0c0-4541-bfa3-8cc805dfd5d6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_21,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></h3><p>给前端自动返回json数据；</p>
<h4 id="1、返回值解析器"><a href="#1、返回值解析器" class="headerlink" title="1、返回值解析器"></a>1、返回值解析器</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605151359370-01cd1fbe-628a-4eea-9430-d79a78f59125.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_25,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">			this.returnValueHandlers.handleReturnValue(</span><br><span class="line">					returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class="line">		&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,</span><br><span class="line">			ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">		HandlerMethodReturnValueHandler handler = selectHandler(returnValue, returnType);</span><br><span class="line">		if (handler == null) &#123;</span><br><span class="line">			throw new IllegalArgumentException(&quot;Unknown return value type: &quot; + returnType.getParameterType().getName());</span><br><span class="line">		&#125;</span><br><span class="line">		handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class="line">	&#125;</span><br><span class="line">RequestResponseBodyMethodProcessor  	</span><br><span class="line">@Override</span><br><span class="line">	public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,</span><br><span class="line">			ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span><br><span class="line">			throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;</span><br><span class="line"></span><br><span class="line">		mavContainer.setRequestHandled(true);</span><br><span class="line">		ServletServerHttpRequest inputMessage = createInputMessage(webRequest);</span><br><span class="line">		ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);</span><br><span class="line"></span><br><span class="line">		// Try even with null return value. ResponseBodyAdvice could get involved.</span><br><span class="line">        // 使用消息转换器进行写出操作</span><br><span class="line">		writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>







<h4 id="2、返回值解析器原理"><a href="#2、返回值解析器原理" class="headerlink" title="2、返回值解析器原理"></a>2、返回值解析器原理</h4><h3 id="-10"><a href="#-10" class="headerlink" title></a><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605151728659-68c8ce8a-1b2b-4ab0-b86d-c3a875184672.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></h3><ul>
<li><p>1、返回值处理器判断是否支持这种类型返回值 supportsReturnType</p>
</li>
<li><p>2、返回值处理器调用 handleReturnValue 进行处理</p>
</li>
<li><p>3、RequestResponseBodyMethodProcessor 可以处理返回值标了@ResponseBody 注解的。</p>
</li>
<li><ul>
<li>\1.  利用 MessageConverters 进行处理 将数据写为json</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>1、内容协商（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型）</li>
<li>2、服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据，</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>3、SpringMVC会挨个遍历所有容器底层的 HttpMessageConverter ，看谁能处理？</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>1、得到MappingJackson2HttpMessageConverter可以将对象写为json</li>
<li>2、利用MappingJackson2HttpMessageConverter将对象转为json再写出去。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605163005521-a20d1d8e-0494-43d0-8135-308e7a22e896.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_32,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<h3 id="1-2、SpringMVC到底支持哪些返回值"><a href="#1-2、SpringMVC到底支持哪些返回值" class="headerlink" title="1.2、SpringMVC到底支持哪些返回值"></a>1.2、SpringMVC到底支持哪些返回值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ModelAndView</span><br><span class="line">Model</span><br><span class="line">View</span><br><span class="line">ResponseEntity </span><br><span class="line">ResponseBodyEmitter</span><br><span class="line">StreamingResponseBody</span><br><span class="line">HttpEntity</span><br><span class="line">HttpHeaders</span><br><span class="line">Callable</span><br><span class="line">DeferredResult</span><br><span class="line">ListenableFuture</span><br><span class="line">CompletionStage</span><br><span class="line">WebAsyncTask</span><br><span class="line">有 @ModelAttribute 且为对象类型的</span><br><span class="line">@ResponseBody 注解 ---&gt; RequestResponseBodyMethodProcessor；</span><br></pre></td></tr></table></figure>

<h3 id="1-3、HTTPMessageConverter原理"><a href="#1-3、HTTPMessageConverter原理" class="headerlink" title="1.3、HTTPMessageConverter原理"></a>1.3、HTTPMessageConverter原理</h3><h4 id="1、MessageConverter规范"><a href="#1、MessageConverter规范" class="headerlink" title="1、MessageConverter规范"></a>1、MessageConverter规范</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605163447900-e2748217-0f31-4abb-9cce-546b4d790d0b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p>HttpMessageConverter: 看是否支持将 此 Class类型的对象，转为MediaType类型的数据。</p>
<p>例子：Person对象转为JSON。或者 JSON转为Person</p>
<h4 id="2、默认的MessageConverter"><a href="#2、默认的MessageConverter" class="headerlink" title="2、默认的MessageConverter"></a>2、默认的MessageConverter</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605163584708-e19770d6-6b35-4caa-bf21-266b73cb1ef1.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p>0 - 只支持Byte类型的</p>
<p>1 - String</p>
<p>2 - String</p>
<p>3 - Resource</p>
<p>4 - ResourceRegion</p>
<p>5 - DOMSource.*<em>class *</em> SAXSource.<strong>class</strong>) \ StAXSource.**class **StreamSource.**class **Source.<strong>class</strong></p>
<p><strong>6 -</strong> MultiValueMap</p>
<p>7 - <strong>true</strong> </p>
<p><strong>8 - true</strong></p>
<p><strong>9 - 支持注解方式xml处理的。</strong></p>
<p>最终 MappingJackson2HttpMessageConverter  把对象转为JSON（利用底层的jackson的objectMapper转换的）</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605164243168-1a31e9af-54a4-463e-b65a-c28ca7a8a2fa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_34,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<h2 id="2、内容协商"><a href="#2、内容协商" class="headerlink" title="2、内容协商"></a>2、内容协商</h2><p>根据客户端接收能力不同，返回不同媒体类型的数据。</p>
<h3 id="1、引入xml依赖"><a href="#1、引入xml依赖" class="headerlink" title="1、引入xml依赖"></a>1、引入xml依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-dataformat-xml&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2、postman分别测试返回json和xml"><a href="#2、postman分别测试返回json和xml" class="headerlink" title="2、postman分别测试返回json和xml"></a>2、postman分别测试返回json和xml</h3><p>只需要改变请求头中Accept字段。Http协议中规定的，告诉服务器本客户端可以接收的数据类型。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605173127653-8a06cd0f-b8e1-4e22-9728-069b942eba3f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_33,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<h3 id="3、开启浏览器参数方式内容协商功能"><a href="#3、开启浏览器参数方式内容协商功能" class="headerlink" title="3、开启浏览器参数方式内容协商功能"></a>3、开启浏览器参数方式内容协商功能</h3><p>为了方便内容协商，开启基于请求参数的内容协商功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    contentnegotiation:</span><br><span class="line">      favor-parameter: true  #开启请求参数内容协商模式</span><br></pre></td></tr></table></figure>

<p>发请求： <a href="http://localhost:8080/test/person?format=json">http://localhost:8080/test/person?format=json</a></p>
<p><a href="http://localhost:8080/test/person?format=json">http://localhost:8080/test/person?format=</a>xml</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605230907471-b0ed34bc-6782-40e7-84b7-615726312f01.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p>确定客户端接收什么样的内容类型；</p>
<p>1、Parameter策略优先确定是要返回json数据（获取请求头中的format的值）</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605231074299-25f5b062-2de1-4a09-91bf-11e018d6ec0e.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p>2、最终进行内容协商返回给客户端json即可。</p>
<h3 id="4、内容协商原理"><a href="#4、内容协商原理" class="headerlink" title="4、内容协商原理"></a>4、内容协商原理</h3><ul>
<li><p>1、判断当前响应头中是否已经有确定的媒体类型。MediaType</p>
</li>
<li><p><strong>2、获取客户端（PostMan、浏览器）支持接收的内容类型。（获取客户端Accept请求头字段）【application/xml】</strong></p>
</li>
<li><ul>
<li><strong>contentNegotiationManager 内容协商管理器 默认使用基于请求头的策略</strong></li>
<li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605230462280-ef98de47-6717-4e27-b4ec-3eb0690b55d0.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_15,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li>
</ul>
</li>
<li><ul>
<li><strong>HeaderContentNegotiationStrategy  确定客户端可以接收的内容类型</strong> </li>
<li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605230546376-65dcf657-7653-4a58-837a-f5657778201a.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li>
</ul>
</li>
<li><p>3、遍历循环所有当前系统的 <strong>MessageConverter</strong>，看谁支持操作这个对象（Person）</p>
</li>
<li><p>4、找到支持操作Person的converter，把converter支持的媒体类型统计出来。</p>
</li>
<li><p>5、客户端需要【application/xml】。服务端能力【10种、json、xml】</p>
</li>
<li><p>  <img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605173876646-f63575e2-50c8-44d5-9603-c2d11a78adae.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
</li>
<li><p>6、进行内容协商的最佳匹配媒体类型</p>
</li>
<li><p>7、用 支持 将对象转为 最佳匹配媒体类型 的converter。调用它进行转化 。</p>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605173657818-73331882-6086-490c-973b-af46ccf07b32.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p>导入了jackson处理xml的包，xml的converter就会自动进来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WebMvcConfigurationSupport</span><br><span class="line">jackson2XmlPresent = ClassUtils.isPresent(&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;, classLoader);</span><br><span class="line"></span><br><span class="line">if (jackson2XmlPresent) &#123;</span><br><span class="line">			Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.xml();</span><br><span class="line">			if (this.applicationContext != null) &#123;</span><br><span class="line">				builder.applicationContext(this.applicationContext);</span><br><span class="line">			&#125;</span><br><span class="line">			messageConverters.add(new MappingJackson2XmlHttpMessageConverter(builder.build()));</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>







<h3 id="5、自定义-MessageConverter"><a href="#5、自定义-MessageConverter" class="headerlink" title="5、自定义 MessageConverter"></a>5、自定义 MessageConverter</h3><p><strong>实现多协议数据兼容。json、xml、x-guigu</strong></p>
<p><strong>0、</strong>@ResponseBody 响应数据出去 调用 <strong>RequestResponseBodyMethodProcessor</strong> 处理</p>
<p>1、Processor 处理方法返回值。通过 <strong>MessageConverter</strong> 处理</p>
<p>2、所有 <strong>MessageConverter</strong> 合起来可以支持各种媒体类型数据的操作（读、写）</p>
<p>3、内容协商找到最终的 <strong>messageConverter</strong>；</p>
<p>SpringMVC的什么功能。一个入口给容器中添加一个  WebMvcConfigurer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">   public WebMvcConfigurer webMvcConfigurer()&#123;</span><br><span class="line">       return new WebMvcConfigurer() &#123;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>





<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605260623995-8b1f7cec-9713-4f94-9cf1-8dbc496bd245.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605261062877-0a27cc41-51cb-4018-a9af-4e0338a247cd.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_27,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p><strong>有可能我们添加的自定义的功能会覆盖默认很多功能，导致一些默认的功能失效。</strong></p>
<p><strong>大家考虑，上述功能除了我们完全自定义外？SpringBoot有没有为我们提供基于配置文件的快速修改媒体类型功能？怎么配置呢？【提示：参照SpringBoot官方文档web开发内容协商章节】</strong></p>
<h1 id="5、视图解析与模板引擎"><a href="#5、视图解析与模板引擎" class="headerlink" title="5、视图解析与模板引擎"></a>5、视图解析与模板引擎</h1><p>视图解析：<strong>SpringBoot默认不支持 JSP，需要引入第三方模板引擎技术实现页面渲染。</strong></p>
<h2 id="1、视图解析"><a href="#1、视图解析" class="headerlink" title="1、视图解析"></a>1、视图解析</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043749039-cefbf687-4feb-441d-bad8-c6d933248d3c.png" alt="img"></p>
<h3 id="1、视图解析原理流程"><a href="#1、视图解析原理流程" class="headerlink" title="1、视图解析原理流程"></a>1、视图解析原理流程</h3><p>1、目标方法处理的过程中，所有数据都会被放在 <strong>ModelAndViewContainer 里面。包括数据和视图地址</strong></p>
<p><strong>2、方法的参数是一个自定义类型对象（从请求参数中确定的），把他重新放在</strong> <strong>ModelAndViewContainer</strong> </p>
<p><strong>3、任何目标方法执行完成以后都会返回 ModelAndView（<strong><strong>数据和视图地址</strong></strong>）。</strong></p>
<p><strong>4、****processDispatchResult  处理派发结果（页面改如何响应）</strong></p>
<ul>
<li><p>1、<strong>render</strong>(<strong>mv</strong>, request, response); 进行页面渲染逻辑</p>
</li>
<li><ul>
<li>1、根据方法的String返回值得到 <strong>View</strong> 对象【定义了页面的渲染逻辑】</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>1、所有的视图解析器尝试是否能根据当前返回值得到<strong>View</strong>对象</li>
<li>2、得到了  <strong>redirect:/main.html</strong> –&gt; Thymeleaf new <strong>RedirectView</strong>()</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>3、ContentNegotiationViewResolver 里面包含了下面所有的视图解析器，内部还是利用下面所有视图解析器得到视图对象。</li>
<li>4、view.render(mv.getModelInternal(), request, response);   视图对象调用自定义的render进行页面渲染工作</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li><strong>RedirectView 如何渲染【重定向到一个页面】</strong></li>
<li><strong>1、获取目标url地址</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><ul>
<li><strong>2、****response.sendRedirect(encodedURL);</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>视图解析：</strong></p>
<ul>
<li><ul>
<li><strong>返回值以 forward: 开始： new InternalResourceView(forwardUrl); –&gt;  转发****request.getRequestDispatcher(path).forward(request, response);</strong> </li>
<li><strong>返回值以</strong> <strong>redirect: 开始：</strong> <strong>new RedirectView() –》 render就是重定向</strong> </li>
</ul>
</li>
<li><ul>
<li><strong>返回值是普通字符串： new ThymeleafView（）—&gt;</strong> </li>
</ul>
</li>
</ul>
<p>自定义视图解析器+自定义视图； <strong>大厂学院。</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605680247945-088b0f17-185c-490b-8889-103e8b4d8c07.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605679959020-54b96fe7-f2fc-4b4d-a392-426e1d5413de.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605679471537-7db702dc-b165-4dc6-b64a-26459ee5fd6c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605679913592-151a616a-c754-4da3-a2c1-91dc0230a48d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<h2 id="2、模板引擎-Thymeleaf"><a href="#2、模板引擎-Thymeleaf" class="headerlink" title="2、模板引擎-Thymeleaf"></a>2、模板引擎-Thymeleaf</h2><h3 id="1、thymeleaf简介"><a href="#1、thymeleaf简介" class="headerlink" title="1、thymeleaf简介"></a>1、thymeleaf简介</h3><p>Thymeleaf is a modern server-side Java template engine for both web and standalone environments, capable of processing HTML, XML, JavaScript, CSS and even plain text.</p>
<p><strong>现代化、服务端Java模板引擎</strong></p>
<h3 id="2、基本语法"><a href="#2、基本语法" class="headerlink" title="2、基本语法"></a>2、基本语法</h3><h4 id="1、表达式"><a href="#1、表达式" class="headerlink" title="1、表达式"></a>1、表达式</h4><table>
<thead>
<tr>
<th>表达式名字</th>
<th>语法</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>变量取值</td>
<td>${…}</td>
<td>获取请求域、session域、对象等值</td>
</tr>
<tr>
<td>选择变量</td>
<td>*{…}</td>
<td>获取上下文对象值</td>
</tr>
<tr>
<td>消息</td>
<td>#{…}</td>
<td>获取国际化等值</td>
</tr>
<tr>
<td>链接</td>
<td>@{…}</td>
<td>生成链接</td>
</tr>
<tr>
<td>片段表达式</td>
<td>~{…}</td>
<td>jsp:include 作用，引入公共页面片段</td>
</tr>
</tbody></table>
<h4 id="2、字面量"><a href="#2、字面量" class="headerlink" title="2、字面量"></a>2、字面量</h4><p>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></p>
<p>空值: <strong>null</strong></p>
<p>变量： one，two，…. 变量不能有空格</p>
<h4 id="3、文本操作"><a href="#3、文本操作" class="headerlink" title="3、文本操作"></a>3、文本操作</h4><p>字符串拼接: <strong>+</strong></p>
<p>变量替换: <strong>|The name is ${name}|</strong> </p>
<h4 id="4、数学运算"><a href="#4、数学运算" class="headerlink" title="4、数学运算"></a>4、数学运算</h4><p>运算符: + , - , * , / , %</p>
<h4 id="5、布尔运算"><a href="#5、布尔运算" class="headerlink" title="5、布尔运算"></a>5、布尔运算</h4><p>运算符:  <strong>and</strong> <strong>,</strong> <strong>or</strong></p>
<p>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong> </p>
<h4 id="6、比较运算"><a href="#6、比较运算" class="headerlink" title="6、比较运算"></a>6、比较运算</h4><p>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;** **,** **&gt;=</strong> <strong>,</strong> <strong>&lt;=</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> **)**等式: <strong>==</strong> <strong>,</strong> <strong>!=</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong> </p>
<h4 id="7、条件运算"><a href="#7、条件运算" class="headerlink" title="7、条件运算"></a>7、条件运算</h4><p>If-then: <strong>(if) ? (then)</strong></p>
<p>If-then-else: <strong>(if) ? (then) : (else)</strong></p>
<p>Default: (value) <strong>?: (defaultvalue)</strong> </p>
<h4 id="8、特殊操作"><a href="#8、特殊操作" class="headerlink" title="8、特殊操作"></a>8、特殊操作</h4><p>无操作： _</p>
<h3 id="3、设置属性值-th-attr"><a href="#3、设置属性值-th-attr" class="headerlink" title="3、设置属性值-th:attr"></a>3、设置属性值-th:attr</h3><p>设置单个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;subscribe.html&quot; th:attr=&quot;action=@&#123;/subscribe&#125;&quot;&gt;</span><br><span class="line">  &lt;fieldset&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;email&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Subscribe!&quot; th:attr=&quot;value=#&#123;subscribe.submit&#125;&quot;/&gt;</span><br><span class="line">  &lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>设置多个值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;../../images/gtvglogo.png&quot;  th:attr=&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure>



<p>以上两个的代替写法 th:xxxx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;submit&quot; value=&quot;Subscribe!&quot; th:value=&quot;#&#123;subscribe.submit&#125;&quot;/&gt;</span><br><span class="line">&lt;form action=&quot;subscribe.html&quot; th:action=&quot;@&#123;/subscribe&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>



<p>所有h5兼容的标签写法</p>
<p><a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes</a></p>
<h3 id="4、迭代"><a href="#4、迭代" class="headerlink" title="4、迭代"></a>4、迭代</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tr th:each=&quot;prod : $&#123;prods&#125;&quot;&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;/td&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;/td&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tr th:each=&quot;prod,iterStat : $&#123;prods&#125;&quot; th:class=&quot;$&#123;iterStat.odd&#125;? &#x27;odd&#x27;&quot;&gt;</span><br><span class="line">  &lt;td th:text=&quot;$&#123;prod.name&#125;&quot;&gt;Onions&lt;/td&gt;</span><br><span class="line">  &lt;td th:text=&quot;$&#123;prod.price&#125;&quot;&gt;2.41&lt;/td&gt;</span><br><span class="line">  &lt;td th:text=&quot;$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;&quot;&gt;yes&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>



<h3 id="5、条件运算"><a href="#5、条件运算" class="headerlink" title="5、条件运算"></a>5、条件运算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;comments.html&quot;</span><br><span class="line">th:href=&quot;@&#123;/product/comments(prodId=$&#123;prod.id&#125;)&#125;&quot;</span><br><span class="line">th:if=&quot;$&#123;not #lists.isEmpty(prod.comments)&#125;&quot;&gt;view&lt;/a&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div th:switch=&quot;$&#123;user.role&#125;&quot;&gt;</span><br><span class="line">  &lt;p th:case=&quot;&#x27;admin&#x27;&quot;&gt;User is an administrator&lt;/p&gt;</span><br><span class="line">  &lt;p th:case=&quot;#&#123;roles.manager&#125;&quot;&gt;User is a manager&lt;/p&gt;</span><br><span class="line">  &lt;p th:case=&quot;*&quot;&gt;User is some other thing&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<h3 id="6、属性优先级"><a href="#6、属性优先级" class="headerlink" title="6、属性优先级"></a>6、属性优先级</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605498132699-4fae6085-a207-456c-89fa-e571ff1663da.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_44,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<h1 id="-11"><a href="#-11" class="headerlink" title></a></h1><h2 id="3、thymeleaf使用"><a href="#3、thymeleaf使用" class="headerlink" title="3、thymeleaf使用"></a>3、thymeleaf使用</h2><h4 id="1、引入Starter"><a href="#1、引入Starter" class="headerlink" title="1、引入Starter"></a>1、引入Starter</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2、自动配置好了thymeleaf"><a href="#2、自动配置好了thymeleaf" class="headerlink" title="2、自动配置好了thymeleaf"></a>2、自动配置好了thymeleaf</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration(proxyBeanMethods = false)</span><br><span class="line">@EnableConfigurationProperties(ThymeleafProperties.class)</span><br><span class="line">@ConditionalOnClass(&#123; TemplateMode.class, SpringTemplateEngine.class &#125;)</span><br><span class="line">@AutoConfigureAfter(&#123; WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class &#125;)</span><br><span class="line">public class ThymeleafAutoConfiguration &#123; &#125;</span><br></pre></td></tr></table></figure>

<h1 id="-12"><a href="#-12" class="headerlink" title></a></h1><p>自动配好的策略</p>
<ul>
<li><p>1、所有thymeleaf的配置值都在 ThymeleafProperties</p>
</li>
<li><p>2、配置好了 <strong>SpringTemplateEngine</strong> </p>
</li>
<li><p><strong>3、配好了</strong> <strong>ThymeleafViewResolver</strong> </p>
</li>
<li><p>4、我们只需要直接开发页面</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static final String DEFAULT_PREFIX = &quot;classpath:/templates/&quot;;</span><br><span class="line"></span><br><span class="line">public static final String DEFAULT_SUFFIX = &quot;.html&quot;;  //xxx.html</span><br></pre></td></tr></table></figure>

<h4 id="3、页面开发"><a href="#3、页面开发" class="headerlink" title="3、页面开发"></a>3、页面开发</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 th:text=&quot;$&#123;msg&#125;&quot;&gt;哈哈&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">    &lt;a href=&quot;www.atguigu.com&quot; th:href=&quot;$&#123;link&#125;&quot;&gt;去百度&lt;/a&gt;  &lt;br/&gt;</span><br><span class="line">    &lt;a href=&quot;www.atguigu.com&quot; th:href=&quot;@&#123;link&#125;&quot;&gt;去百度2&lt;/a&gt;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="4、构建后台管理系统"><a href="#4、构建后台管理系统" class="headerlink" title="4、构建后台管理系统"></a>4、构建后台管理系统</h2><h3 id="1、项目创建"><a href="#1、项目创建" class="headerlink" title="1、项目创建"></a>1、项目创建</h3><p>thymeleaf、web-starter、devtools、lombok</p>
<h3 id="2、静态资源处理"><a href="#2、静态资源处理" class="headerlink" title="2、静态资源处理"></a>2、静态资源处理</h3><p>自动配置好，我们只需要把所有静态资源放到 static 文件夹下</p>
<h3 id="3、路径构建"><a href="#3、路径构建" class="headerlink" title="3、路径构建"></a>3、路径构建</h3><p>th:action=”@{/login}”</p>
<h3 id="4、模板抽取"><a href="#4、模板抽取" class="headerlink" title="4、模板抽取"></a>4、模板抽取</h3><p>th:insert/replace/include</p>
<h3 id="5、页面跳转"><a href="#5、页面跳转" class="headerlink" title="5、页面跳转"></a>5、页面跳转</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">public String main(User user, HttpSession session, Model model)&#123;</span><br><span class="line"></span><br><span class="line">    if(StringUtils.hasLength(user.getUserName()) &amp;&amp; &quot;123456&quot;.equals(user.getPassword()))&#123;</span><br><span class="line">        //把登陆成功的用户保存起来</span><br><span class="line">        session.setAttribute(&quot;loginUser&quot;,user);</span><br><span class="line">        //登录成功重定向到main.html;  重定向防止表单重复提交</span><br><span class="line">        return &quot;redirect:/main.html&quot;;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,&quot;账号密码错误&quot;);</span><br><span class="line">        //回到登录页面</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6、数据渲染"><a href="#6、数据渲染" class="headerlink" title="6、数据渲染"></a>6、数据渲染</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/dynamic_table&quot;)</span><br><span class="line">public String dynamic_table(Model model)&#123;</span><br><span class="line">    //表格内容的遍历</span><br><span class="line">    List&lt;User&gt; users = Arrays.asList(new User(&quot;zhangsan&quot;, &quot;123456&quot;),</span><br><span class="line">            new User(&quot;lisi&quot;, &quot;123444&quot;),</span><br><span class="line">            new User(&quot;haha&quot;, &quot;aaaaa&quot;),</span><br><span class="line">            new User(&quot;hehe &quot;, &quot;aaddd&quot;));</span><br><span class="line">    model.addAttribute(&quot;users&quot;,users);</span><br><span class="line"></span><br><span class="line">    return &quot;table/dynamic_table&quot;;</span><br><span class="line">&#125;</span><br><span class="line">    &lt;table class=&quot;display table table-bordered&quot; id=&quot;hidden-table-info&quot;&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;#&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;密码&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">    &lt;tr class=&quot;gradeX&quot; th:each=&quot;user,stats:$&#123;users&#125;&quot;&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;stats.count&#125;&quot;&gt;Trident&lt;/td&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;user.userName&#125;&quot;&gt;Internet&lt;/td&gt;</span><br><span class="line">        &lt;td &gt;[[$&#123;user.password&#125;]]&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br></pre></td></tr></table></figure>



<h1 id="6、拦截器"><a href="#6、拦截器" class="headerlink" title="6、拦截器"></a>6、拦截器</h1><h2 id="1、HandlerInterceptor-接口"><a href="#1、HandlerInterceptor-接口" class="headerlink" title="1、HandlerInterceptor 接口"></a>1、HandlerInterceptor 接口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 登录检查</span><br><span class="line"> * 1、配置好拦截器要拦截哪些请求</span><br><span class="line"> * 2、把这些配置放在容器中</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">public class LoginInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 目标方法执行之前</span><br><span class="line">     * @param request</span><br><span class="line">     * @param response</span><br><span class="line">     * @param handler</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        log.info(&quot;preHandle拦截的请求路径是&#123;&#125;&quot;,requestURI);</span><br><span class="line"></span><br><span class="line">        //登录检查逻辑</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">        Object loginUser = session.getAttribute(&quot;loginUser&quot;);</span><br><span class="line"></span><br><span class="line">        if(loginUser != null)&#123;</span><br><span class="line">            //放行</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //拦截住。未登录。跳转到登录页</span><br><span class="line">        request.setAttribute(&quot;msg&quot;,&quot;请先登录&quot;);</span><br><span class="line">//        re.sendRedirect(&quot;/&quot;);</span><br><span class="line">        request.getRequestDispatcher(&quot;/&quot;).forward(request,response);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 目标方法执行完成以后</span><br><span class="line">     * @param request</span><br><span class="line">     * @param response</span><br><span class="line">     * @param handler</span><br><span class="line">     * @param modelAndView</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        log.info(&quot;postHandle执行&#123;&#125;&quot;,modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 页面渲染以后</span><br><span class="line">     * @param request</span><br><span class="line">     * @param response</span><br><span class="line">     * @param handler</span><br><span class="line">     * @param ex</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">        log.info(&quot;afterCompletion执行异常&#123;&#125;&quot;,ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2、配置拦截器"><a href="#2、配置拦截器" class="headerlink" title="2、配置拦截器"></a>2、配置拦截器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 1、编写一个拦截器实现HandlerInterceptor接口</span><br><span class="line"> * 2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors）</span><br><span class="line"> * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class AdminWebConfig implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        registry.addInterceptor(new LoginInterceptor())</span><br><span class="line">                .addPathPatterns(&quot;/**&quot;)  //所有请求都被拦截包括静态资源</span><br><span class="line">                .excludePathPatterns(&quot;/&quot;,&quot;/login&quot;,&quot;/css/**&quot;,&quot;/fonts/**&quot;,&quot;/images/**&quot;,&quot;/js/**&quot;); //放行的请求</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3、拦截器原理"><a href="#3、拦截器原理" class="headerlink" title="3、拦截器原理"></a>3、拦截器原理</h2><p>1、根据当前请求，找到<strong>HandlerExecutionChain【</strong>可以处理请求的handler以及handler的所有 拦截器】</p>
<p>2、先来<strong>顺序执行</strong> 所有拦截器的 preHandle方法</p>
<ul>
<li>1、如果当前拦截器prehandler返回为true。则执行下一个拦截器的preHandle</li>
<li>2、如果当前拦截器返回为false。直接    倒序执行所有已经执行了的拦截器的  afterCompletion；</li>
</ul>
<p><strong>3、如果任何一个拦截器返回false。直接跳出不执行目标方法</strong></p>
<p><strong>4、所有拦截器都返回True。执行目标方法</strong></p>
<p><strong>5、倒序执行所有拦截器的postHandle方法。</strong></p>
<p><strong>6、前面的步骤有任何异常都会直接倒序触发</strong> afterCompletion</p>
<p>7、页面成功渲染完成以后，也会倒序触发 afterCompletion</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605764129365-5b31a748-1541-4bee-9692-1917b3364bc6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_44,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605765121071-64cfc649-4892-49a3-ac08-88b52fb4286f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_35,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<h1 id="7、文件上传"><a href="#7、文件上传" class="headerlink" title="7、文件上传"></a>7、文件上传</h1><h2 id="1、页面表单"><a href="#1、页面表单" class="headerlink" title="1、页面表单"></a>1、页面表单</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>



<h2 id="2、文件上传代码"><a href="#2、文件上传代码" class="headerlink" title="2、文件上传代码"></a>2、文件上传代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * MultipartFile 自动封装上传过来的文件</span><br><span class="line"> * @param email</span><br><span class="line"> * @param username</span><br><span class="line"> * @param headerImg</span><br><span class="line"> * @param photos</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@PostMapping(&quot;/upload&quot;)</span><br><span class="line">public String upload(@RequestParam(&quot;email&quot;) String email,</span><br><span class="line">                     @RequestParam(&quot;username&quot;) String username,</span><br><span class="line">                     @RequestPart(&quot;headerImg&quot;) MultipartFile headerImg,</span><br><span class="line">                     @RequestPart(&quot;photos&quot;) MultipartFile[] photos) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">    log.info(&quot;上传的信息：email=&#123;&#125;，username=&#123;&#125;，headerImg=&#123;&#125;，photos=&#123;&#125;&quot;,</span><br><span class="line">            email,username,headerImg.getSize(),photos.length);</span><br><span class="line"></span><br><span class="line">    if(!headerImg.isEmpty())&#123;</span><br><span class="line">        //保存到文件服务器，OSS服务器</span><br><span class="line">        String originalFilename = headerImg.getOriginalFilename();</span><br><span class="line">        headerImg.transferTo(new File(&quot;H:\\cache\\&quot;+originalFilename));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(photos.length &gt; 0)&#123;</span><br><span class="line">        for (MultipartFile photo : photos) &#123;</span><br><span class="line">            if(!photo.isEmpty())&#123;</span><br><span class="line">                String originalFilename = photo.getOriginalFilename();</span><br><span class="line">                photo.transferTo(new File(&quot;H:\\cache\\&quot;+originalFilename));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return &quot;main&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、自动配置原理"><a href="#3、自动配置原理" class="headerlink" title="3、自动配置原理"></a>3、自动配置原理</h2><p>**文件上传自动配置类-MultipartAutoConfiguration-**<strong>MultipartProperties</strong></p>
<ul>
<li><p>自动配置好了 <strong>StandardServletMultipartResolver   【文件上传解析器】</strong></p>
</li>
<li><p><strong>原理步骤</strong></p>
</li>
<li><ul>
<li><strong>1、请求进来使用文件上传解析器判断（</strong>isMultipart<strong>）并封装（</strong>resolveMultipart，<strong>返回</strong>MultipartHttpServletRequest<strong>）文件上传请求</strong></li>
<li><strong>2、参数解析器来解析请求中的文件内容封装成MultipartFile</strong></li>
</ul>
</li>
<li><ul>
<li><strong>3、将request中文件信息封装为一个Map；</strong>MultiValueMap&lt;String, MultipartFile&gt;</li>
</ul>
</li>
</ul>
<p><strong>FileCopyUtils</strong>。实现文件流的拷贝</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@PostMapping(&quot;/upload&quot;)</span><br><span class="line">public String upload(@RequestParam(&quot;email&quot;) String email,</span><br><span class="line">                     @RequestParam(&quot;username&quot;) String username,</span><br><span class="line">                     @RequestPart(&quot;headerImg&quot;) MultipartFile headerImg,</span><br><span class="line">                     @RequestPart(&quot;photos&quot;) MultipartFile[] photos)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1605847414866-32b6cc9c-5191-4052-92eb-069d652dfbf9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<h1 id="8、异常处理"><a href="#8、异常处理" class="headerlink" title="8、异常处理"></a>8、异常处理</h1><h2 id="1、错误处理"><a href="#1、错误处理" class="headerlink" title="1、错误处理"></a>1、错误处理</h2><h4 id="1、默认规则"><a href="#1、默认规则" class="headerlink" title="1、默认规则"></a>1、默认规则</h4><ul>
<li><p>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射</p>
</li>
<li><p>对于机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据</p>
</li>
<li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606024421363-77083c34-0b0e-4698-bb72-42da351d3944.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606024616835-bc491bf0-c3b1-4ac3-b886-d4ff3c9874ce.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
</li>
<li><p><strong>要对其进行自定义，添加</strong><code>**View**</code><strong>解析为</strong><code>**error**``** **</code></p>
</li>
<li><p>要完全替换默认行为，可以实现 <code>ErrorController </code>并注册该类型的Bean定义，或添加<code>ErrorAttributes类型的组件</code>以使用现有机制但替换其内容。</p>
</li>
<li><p>error/下的4xx，5xx页面会被自动解析；</p>
</li>
<li><ul>
<li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606024592756-d4ab8a6b-ec37-426b-8b39-010463603d57.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_15,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li>
</ul>
</li>
</ul>
<h4 id="2、定制错误处理逻辑"><a href="#2、定制错误处理逻辑" class="headerlink" title="2、定制错误处理逻辑"></a>2、定制错误处理逻辑</h4><ul>
<li><p>自定义错误页</p>
</li>
<li><ul>
<li>error/404.html   error/5xx.html；有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页</li>
</ul>
</li>
<li><p>@ControllerAdvice+@ExceptionHandler处理全局异常；底层是 <strong>ExceptionHandlerExceptionResolver 支持的</strong></p>
</li>
<li><p>@ResponseStatus+自定义异常 ；底层是 <strong>ResponseStatusExceptionResolver ，把responsestatus注解的信息底层调用</strong> <strong>response.sendError(statusCode, resolvedReason)；tomcat发送的/error</strong></p>
</li>
<li><p>Spring底层的异常，如 参数类型转换异常；<strong>DefaultHandlerExceptionResolver 处理框架底层的异常。</strong></p>
</li>
<li><ul>
<li>response.sendError(HttpServletResponse.<strong>SC_BAD_REQUEST</strong>, ex.getMessage()); </li>
<li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606114118010-f4aaf5ee-2747-4402-bc82-08321b2490ed.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li>
</ul>
</li>
<li><p>自定义实现 HandlerExceptionResolver 处理异常；可以作为默认的全局异常处理规则</p>
</li>
<li><ul>
<li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606114688649-e6502134-88b3-48db-a463-04c23eddedc7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li>
</ul>
</li>
<li><p><strong>ErrorViewResolver</strong>  实现自定义处理异常；</p>
</li>
<li><ul>
<li>response.sendError 。error请求就会转给controller</li>
<li>你的异常没有任何人能处理。tomcat底层 response.sendError。error请求就会转给controller</li>
</ul>
</li>
<li><ul>
<li><strong>basicErrorController 要去的页面地址是</strong> <strong>ErrorViewResolver</strong>  ；</li>
</ul>
</li>
</ul>
<h4 id="3、异常处理自动配置原理"><a href="#3、异常处理自动配置原理" class="headerlink" title="3、异常处理自动配置原理"></a>3、异常处理自动配置原理</h4><ul>
<li><p><strong>ErrorMvcAutoConfiguration  自动配置异常处理规则</strong></p>
</li>
<li><ul>
<li><strong>容器中的组件：类型：DefaultErrorAttributes -&gt;</strong> <strong>id：errorAttributes</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li><strong>public class</strong> <strong>DefaultErrorAttributes</strong> <strong>implements</strong> <strong>ErrorAttributes</strong>, <strong>HandlerExceptionResolver</strong></li>
<li><strong>DefaultErrorAttributes</strong>：定义错误页面中可以包含哪些数据。</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606044430037-8d599e30-1679-407c-96b7-4df345848fa4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li>
<li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606044487738-8cb1dcda-08c5-4104-a634-b2468512e60f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_31,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>容器中的组件：类型：****BasicErrorController –&gt; id：basicErrorController（json+白页 适配响应）</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li><strong>处理默认</strong> <strong>/error 路径的请求；页面响应</strong> <strong>new</strong> ModelAndView(<strong>“error”</strong>, model)；</li>
<li><strong>容器中有组件 View</strong>-&gt;<strong>id是error</strong>；（响应默认错误页）</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>容器中放组件 <strong>BeanNameViewResolver（视图解析器）；按照返回的视图名作为组件的id去容器中找View对象。</strong></li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><strong>容器中的组件：</strong>类型：<strong>DefaultErrorViewResolver -&gt; id：</strong>conventionErrorViewResolver</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>如果发生错误，会以HTTP的状态码 作为视图页地址（viewName），找到真正的页面</li>
<li>error/404、5xx.html</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>如果想要返回页面；就会找error视图【<strong>StaticView</strong>】。(默认是一个白页)</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043870164-3770e116-344f-448e-8bff-8f32438edc9a.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_29,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img">写出去json</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606043904074-50b7f088-2d2b-4da5-85e2-0a756da74dca.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_35,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"> 错误页</p>
<h4 id="4、异常处理步骤流程"><a href="#4、异常处理步骤流程" class="headerlink" title="4、异常处理步骤流程"></a>4、异常处理步骤流程</h4><p>1、执行目标方法，目标方法运行期间有任何异常都会被catch、而且标志当前请求结束；并且用 <strong>dispatchException</strong> </p>
<p>2、进入视图解析流程（页面渲染？） </p>
<p>processDispatchResult(processedRequest, response, mappedHandler, <strong>mv</strong>, <strong>dispatchException</strong>);</p>
<p>3、<strong>mv</strong> = <strong>processHandlerException</strong>；处理handler发生的异常，处理完成返回ModelAndView；</p>
<ul>
<li><p>1、遍历所有的 <strong>handlerExceptionResolvers，看谁能处理当前异常【<strong><strong>HandlerExceptionResolver处理器异常解析器</strong></strong>】</strong></p>
</li>
<li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606047252166-ce71c3a1-0e0e-4499-90f4-6d80014ca19f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_28,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
</li>
<li><p><strong>2、系统默认的  异常解析器；</strong></p>
</li>
<li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606047109161-c68a46c1-202a-4db1-bbeb-23fcae49bbe9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
</li>
<li><ul>
<li><strong>1、DefaultErrorAttributes先来处理异常。把异常信息保存到rrequest域，并且返回null；</strong></li>
<li><strong>2、默认没有任何人能处理异常，所以异常会被抛出</strong></li>
</ul>
</li>
<li><ul>
<li><ul>
<li><strong>1、如果没有任何人能处理最终底层就会发送 /error 请求。会被底层的BasicErrorController处理</strong></li>
<li><strong>2、解析错误视图；遍历所有的</strong>  <strong>ErrorViewResolver  看谁能解析。</strong></li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606047900473-e31c1dc3-7a5f-4f70-97de-5203429781fa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></li>
<li><strong>3、默认的</strong> <strong>DefaultErrorViewResolver ,作用是把响应状态码作为错误页的地址，error/500.html</strong> </li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><strong>4、模板引擎最终响应这个页面</strong> <strong>error/500.html</strong> </li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="9、Web原生组件注入（Servlet、Filter、Listener）"><a href="#9、Web原生组件注入（Servlet、Filter、Listener）" class="headerlink" title="9、Web原生组件注入（Servlet、Filter、Listener）"></a>9、Web原生组件注入（Servlet、Filter、Listener）</h1><h2 id="1、使用Servlet-API"><a href="#1、使用Servlet-API" class="headerlink" title="1、使用Servlet API"></a>1、使用Servlet API</h2><p>@ServletComponentScan(basePackages = <strong>“com.atguigu.admin”</strong>) :指定原生Servlet组件都放在那里</p>
<p>@WebServlet(urlPatterns = <strong>“/my”</strong>)：效果：直接响应，<strong>没有经过Spring的拦截器？</strong></p>
<p>@WebFilter(urlPatterns={<strong>“/css/*“</strong>,<strong>“/images/*“</strong>})</p>
<p>@WebListener</p>
<p>推荐可以这种方式；</p>
<p>扩展：DispatchServlet 如何注册进来</p>
<ul>
<li><p>容器中自动配置了  DispatcherServlet  属性绑定到 WebMvcProperties；对应的配置文件配置项是 <strong>spring.mvc。</strong></p>
</li>
<li><p><strong>通过</strong> <strong>ServletRegistrationBean</strong><DispatcherServlet> 把 DispatcherServlet  配置进来。</DispatcherServlet></p>
</li>
<li><p>默认映射的是 / 路径。</p>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606284869220-8b63d54b-39c4-40f6-b226-f5f095ef9304.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_32,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<p>Tomcat-Servlet；</p>
<p>多个Servlet都能处理到同一层路径，精确优选原则</p>
<p>A： /my/</p>
<p>B： /my/1</p>
<h2 id="2、使用RegistrationBean"><a href="#2、使用RegistrationBean" class="headerlink" title="2、使用RegistrationBean"></a>2、使用RegistrationBean</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ServletRegistrationBean`, `FilterRegistrationBean`, and `ServletListenerRegistrationBean</span><br><span class="line">@Configuration</span><br><span class="line">public class MyRegistConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean myServlet()&#123;</span><br><span class="line">        MyServlet myServlet = new MyServlet();</span><br><span class="line"></span><br><span class="line">        return new ServletRegistrationBean(myServlet,&quot;/my&quot;,&quot;/my02&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean myFilter()&#123;</span><br><span class="line"></span><br><span class="line">        MyFilter myFilter = new MyFilter();</span><br><span class="line">//        return new FilterRegistrationBean(myFilter,myServlet());</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(myFilter);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(&quot;/my&quot;,&quot;/css/*&quot;));</span><br><span class="line">        return filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletListenerRegistrationBean myListener()&#123;</span><br><span class="line">        MySwervletContextListener mySwervletContextListener = new MySwervletContextListener();</span><br><span class="line">        return new ServletListenerRegistrationBean(mySwervletContextListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="10、嵌入式Servlet容器"><a href="#10、嵌入式Servlet容器" class="headerlink" title="10、嵌入式Servlet容器"></a>10、嵌入式Servlet容器</h1><h2 id="1、切换嵌入式Servlet容器"><a href="#1、切换嵌入式Servlet容器" class="headerlink" title="1、切换嵌入式Servlet容器"></a>1、切换嵌入式Servlet容器</h2><ul>
<li><p>默认支持的webServer</p>
</li>
<li><ul>
<li><code>Tomcat</code>, <code>Jetty</code>, or <code>Undertow</code></li>
<li><code>ServletWebServerApplicationContext 容器启动寻找ServletWebServerFactory 并引导创建服务器</code></li>
</ul>
</li>
<li><p>切换服务器</p>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1354552/1606280937533-504d0889-b893-4a01-af68-2fc31ffce9fc.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_26,text_YXRndWlndS5jb20g5bCa56GF6LC3,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>





<ul>
<li><p>原理</p>
</li>
<li><ul>
<li>SpringBoot应用启动发现当前是Web应用。web场景包-导入tomcat</li>
<li>web应用会创建一个web版的ioc容器 <code>ServletWebServerApplicationContext</code> </li>
</ul>
</li>
<li><ul>
<li><code>ServletWebServerApplicationContext</code> 启动的时候寻找 <code>**ServletWebServerFactory**``（Servlet 的web服务器工厂---&gt; Servlet 的web服务器）</code> </li>
<li>SpringBoot底层默认有很多的WebServer工厂；<code>TomcatServletWebServerFactory</code>, <code>JettyServletWebServerFactory</code>, or <code>UndertowServletWebServerFactory</code></li>
</ul>
</li>
<li><ul>
<li><code>底层直接会有一个自动配置类。ServletWebServerFactoryAutoConfiguration</code></li>
<li><code>ServletWebServerFactoryAutoConfiguration导入了ServletWebServerFactoryConfiguration（配置类）</code></li>
</ul>
</li>
<li><ul>
<li><code>ServletWebServerFactoryConfiguration 配置类 根据动态判断系统中到底导入了那个Web服务器的包。（默认是web-starter导入tomcat包），容器中就有 TomcatServletWebServerFactory</code></li>
<li><code>TomcatServletWebServerFactory 创建出Tomcat服务器并启动；TomcatWebServer 的构造器拥有初始化方法initialize---this.tomcat.start();</code></li>
</ul>
</li>
<li><ul>
<li><code>内嵌服务器，就是手动把启动服务器的代码调用（tomcat核心jar包存在）</code></li>
</ul>
</li>
<li><p>``</p>
</li>
</ul>
<h2 id="2、定制Servlet容器"><a href="#2、定制Servlet容器" class="headerlink" title="2、定制Servlet容器"></a>2、定制Servlet容器</h2><ul>
<li><p>实现  <strong>WebServerFactoryCu</strong>stomizer<ConfigurableServletWebServerFactory> </ConfigurableServletWebServerFactory></p>
</li>
<li><ul>
<li>把配置文件的值和<code>**ServletWebServerFactory 进行绑定**</code></li>
</ul>
</li>
<li><p>修改配置文件 <strong>server.xxx</strong></p>
</li>
<li><p>直接自定义 <strong>ConfigurableServletWebServerFactory</strong> </p>
</li>
</ul>
<p><strong>xxxxx<strong><strong>Customizer</strong></strong>：定制化器，可以改变xxxx的默认规则</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line">import org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class CustomizationBean implements WebServerFactoryCustomizer&lt;ConfigurableServletWebServerFactory&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void customize(ConfigurableServletWebServerFactory server) &#123;</span><br><span class="line">        server.setPort(9000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="11、定制化原理"><a href="#11、定制化原理" class="headerlink" title="11、定制化原理"></a>11、定制化原理</h1><h2 id="1、定制化的常见方式"><a href="#1、定制化的常见方式" class="headerlink" title="1、定制化的常见方式"></a>1、定制化的常见方式</h2><ul>
<li><p>修改配置文件；</p>
</li>
<li><p><strong>xxxxxCustomizer；</strong></p>
</li>
<li><p><strong>编写自定义的配置类   xxxConfiguration；+</strong> <strong>@Bean替换、增加容器中默认组件；视图解析器</strong> </p>
</li>
<li><p><strong>Web应用 编写一个配置类实现</strong> <strong>WebMvcConfigurer 即可定制化web功能；+ @Bean给容器中再扩展一些组件</strong></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class AdminWebConfig implements WebMvcConfigurer</span><br></pre></td></tr></table></figure>

<ul>
<li><p>@EnableWebMvc + WebMvcConfigurer —— @Bean  可以全面接管SpringMVC，所有规则全部自己重新配置； 实现定制和扩展功能</p>
</li>
<li><ul>
<li>原理</li>
<li>1、WebMvcAutoConfiguration  默认的SpringMVC的自动配置功能类。静态资源、欢迎页…..</li>
</ul>
</li>
<li><ul>
<li>2、一旦使用 @EnableWebMvc 、。会 @Import(DelegatingWebMvcConfiguration.<strong>class</strong>)</li>
<li>3、<strong>DelegatingWebMvcConfiguration</strong> 的 作用，只保证SpringMVC最基本的使用</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>把所有系统中的 WebMvcConfigurer 拿过来。所有功能的定制都是这些 WebMvcConfigurer  合起来一起生效</li>
<li>自动配置了一些非常底层的组件。<strong>RequestMappingHandlerMapping</strong>、这些组件依赖的组件都是从容器中获取</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li><ul>
<li><strong>public class</strong> DelegatingWebMvcConfiguration <strong>extends</strong> <strong>WebMvcConfigurationSupport</strong></li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>4、<strong>WebMvcAutoConfiguration</strong> 里面的配置要能生效 必须  @ConditionalOnMissingBean(<strong>WebMvcConfigurationSupport</strong>.<strong>class</strong>)</li>
<li>5、@EnableWebMvc  导致了 <strong>WebMvcAutoConfiguration  没有生效。</strong></li>
</ul>
</li>
<li><p>… …</p>
</li>
</ul>
<h2 id="2、原理分析套路"><a href="#2、原理分析套路" class="headerlink" title="2、原理分析套路"></a>2、原理分析套路</h2><p><strong>场景starter</strong> <strong>- xxxxAutoConfiguration - 导入xxx组件 - 绑定xxxProperties –</strong> <strong>绑定配置文件项</strong> </p>
]]></content>
      <categories>
        <category>java后端</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
</search>
